/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { start: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        ";",
        peg$literalExpectation(";", false),
        function(declarationsHead, declarationsTail) { return combine(buildList(declarationsHead, declarationsTail, 2)); },
        ":",
        peg$literalExpectation(":", false),
        function(name, value) {
              let r = {};
              r['_' + name] = value;
              return r;
            },
        function(name) { return name; },
        function(head, tail) { return buildExpression(head, tail); },
        "/",
        peg$literalExpectation("/", false),
        function() { return '/'; },
        ",",
        peg$literalExpectation(",", false),
        function() { return ','; },
        function(quantity) {
              return {
                type: 'Quantity',
                value: quantity.value,
                unit: quantity.unit
              };
            },
        function(value) { return { type: 'String', value: value }; },
        function(value) { return { type: 'URI',    value: value }; },
        function(value) { return value; },
        ")",
        peg$literalExpectation(")", false),
        function(name, params) {
              return { type: 'Function', name: name, params: params };
            },
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        "%",
        peg$literalExpectation("%", false),
        function(component) {
            return Math.max(0, Math.min(100, parseInt(component, 10))) * 1e-2 * 255
          },
        "1",
        peg$literalExpectation("1", false),
        "2",
        peg$literalExpectation("2", false),
        /^[0-4]/,
        peg$classExpectation([["0", "4"]], false, false),
        "25",
        peg$literalExpectation("25", false),
        /^[0-5]/,
        peg$classExpectation([["0", "5"]], false, false),
        function(component) {
            return parseInt(Array.isArray(component) ? component.join('') : component, 10);
          },
        function(a) {
            const component = a.join('');
            return Math.max(0, Math.min(100, parseInt(component, 10))) * 1e-2
          },
        ".",
        peg$literalExpectation(".", false),
        function(a, b, c) {
            const component = (a ? a.join('') : '') + b + c.join('');
            return Math.max(0, Math.min(1, parseFloat(component)));
          },
        function(a) {
            return Math.max(0, Math.min(1, parseInt(a.join(''), 10)))
          },
        "rgba(",
        peg$literalExpectation("rgba(", false),
        function(r, g, b, a) {
            return {r, g, b, a};
          },
        "rgb(",
        peg$literalExpectation("rgb(", false),
        function(r, g, b) {
            return {r, g, b, a: 1};
          },
        "#",
        peg$literalExpectation("#", false),
        /^[a-f0-9]/i,
        peg$classExpectation([["a", "f"], ["0", "9"]], false, true),
        function(r, g, b, a) {
            return {
              r: parseInt(r.join(''), 16),
              g: parseInt(g.join(''), 16),
              b: parseInt(b.join(''), 16),
              a: a ? parseInt(a.join(''), 16) / 255 : 1
            }
          },
        /^[a-f0-9]/,
        peg$classExpectation([["a", "f"], ["0", "9"]], false, false),
        function(r, g, b, a) {
            return {
              r: parseInt(r + r, 16),
              g: parseInt(g + g, 16),
              b: parseInt(b + b, 16),
              a: a ? parseInt(a + a, 16) / 255 : 1
            }
          },
        "maroon",
        peg$literalExpectation("maroon", false),
        "red",
        peg$literalExpectation("red", false),
        "orange",
        peg$literalExpectation("orange", false),
        "yellow",
        peg$literalExpectation("yellow", false),
        "olive",
        peg$literalExpectation("olive", false),
        "purple",
        peg$literalExpectation("purple", false),
        "fuchsia",
        peg$literalExpectation("fuchsia", false),
        "white",
        peg$literalExpectation("white", false),
        "lime",
        peg$literalExpectation("lime", false),
        "green",
        peg$literalExpectation("green", false),
        "navy",
        peg$literalExpectation("navy", false),
        "blue",
        peg$literalExpectation("blue", false),
        "aqua",
        peg$literalExpectation("aqua", false),
        "teal",
        peg$literalExpectation("teal", false),
        "black",
        peg$literalExpectation("black", false),
        "silver",
        peg$literalExpectation("silver", false),
        "gray",
        peg$literalExpectation("gray", false),
        "transparent",
        peg$literalExpectation("transparent", false),
        function() {
            return colorMap.get(text())
          },
        "inherit",
        peg$literalExpectation("inherit", false),
        function() { return inherited; },
        "initial",
        peg$literalExpectation("initial", false),
        function() { return initial; },
        "xx-small",
        peg$literalExpectation("xx-small", false),
        function() { return 9 },
        "x-small",
        peg$literalExpectation("x-small", false),
        function() { return 10 },
        "small",
        peg$literalExpectation("small", false),
        function() { return 13 },
        "medium",
        peg$literalExpectation("medium", false),
        function() { return 16 },
        "large",
        peg$literalExpectation("large", false),
        function() { return 18 },
        "x-large",
        peg$literalExpectation("x-large", false),
        function() { return 24 },
        "xx-large",
        peg$literalExpectation("xx-large", false),
        function() { return 32 },
        "smaller",
        peg$literalExpectation("smaller", false),
        function() { return { value: 1/1.2, unit: 'em' } },
        "larger",
        peg$literalExpectation("larger", false),
        function() { return { value: 1.2, unit: 'em' } },
        function(font_size) { return font_size; },
        "normal",
        peg$literalExpectation("normal", false),
        function(line_height) { return line_height; },
        "italic",
        peg$literalExpectation("italic", false),
        "oblique",
        peg$literalExpectation("oblique", false),
        "bolder",
        peg$literalExpectation("bolder", false),
        "lighter",
        peg$literalExpectation("lighter", false),
        "bold",
        peg$literalExpectation("bold", false),
        function() { return 700; },
        function() { return +text() >= 1 && +text() <= 1000 ? +text() : undefined; },
        "small-caps",
        peg$literalExpectation("small-caps", false),
        "ultra-condensed",
        peg$literalExpectation("ultra-condensed", false),
        "extra-condensed",
        peg$literalExpectation("extra-condensed", false),
        "condensed",
        peg$literalExpectation("condensed", false),
        "semi-condensed",
        peg$literalExpectation("semi-condensed", false),
        "semi-expanded",
        peg$literalExpectation("semi-expanded", false),
        "expanded",
        peg$literalExpectation("expanded", false),
        "extra-expanded",
        peg$literalExpectation("extra-expanded", false),
        "ultra-expanded",
        peg$literalExpectation("ultra-expanded", false),
        function(family) { return family; },
        function(head, tail) { return buildList(head, tail, 1).join(' '); },
        function(f1, fn) {
          return [f1].concat(fn ? extractList(fn, 2) : []);
        },
        function(s) {
          if ($font) {
            if (s === 'normal') {
              if (++$fontNormals > 4) $font = undefined;
            } else {
              if ('fontStyle' in $font) {
                $font = undefined;
              } else {
                $font.fontStyle = s;
                ++$fontNormals;
              }
            }
          }
        },
        function(s) {
          if ($font) {
            if (s === undefined || 'fontWeight' in $font) {
              $font = undefined;
            } else {
              $font.fontWeight = s;
              ++$fontNormals;
            }
          }
        },
        function(s) {
          if ($font) {
            if ('fontVariant' in $font) {
              $font = undefined;
            } else {
              $font.fontVariant = s;
              ++$fontNormals;
            }
          }
        },
        function(s) {
          if ($font) {
            if ('fontStretch' in $font) {
              $font = undefined;
            } else {
              $font.fontStretch = s;
              ++$fontNormals;
            }
          }
        },
        function() {
          const ret = $font;
          $font = {};
          $fontNormals = 0;
          return ret;
        },
        function(x) {
            if (x[0] === undefined) return;

            const ret = Object.assign({
              fontStyle: 'normal',
              fontWeight: 'normal',
              fontVariant: 'normal',
              fontStretch: 'normal'
            }, x[0]);

            ret.fontSize = x[1];
            ret.lineHeight = x[2][1] === '/' ? x[2][3] : 'normal';
            ret.fontFamily = x[3];
            return ret;
          },
        "ltr",
        peg$literalExpectation("ltr", false),
        "rtl",
        peg$literalExpectation("rtl", false),
        "block",
        peg$literalExpectation("block", false),
        function() { return {outer: 'block', inner: 'flow'}; },
        "inline-block",
        peg$literalExpectation("inline-block", false),
        function() { return {outer: 'inline', inner: 'flow-root'}; },
        "inline",
        peg$literalExpectation("inline", false),
        function() { return {outer: 'inline', inner: 'flow'}; },
        "flow-root",
        peg$literalExpectation("flow-root", false),
        function() { return {outer: 'block', inner: 'flow-root'}; },
        "horizontal-tb",
        peg$literalExpectation("horizontal-tb", false),
        "vertical-lr",
        peg$literalExpectation("vertical-lr", false),
        "vertical-rl",
        peg$literalExpectation("vertical-rl", false),
        "nowrap",
        peg$literalExpectation("nowrap", false),
        "pre-wrap",
        peg$literalExpectation("pre-wrap", false),
        "pre-line",
        peg$literalExpectation("pre-line", false),
        "pre",
        peg$literalExpectation("pre", false),
        "absolute",
        peg$literalExpectation("absolute", false),
        "relative",
        peg$literalExpectation("relative", false),
        "static",
        peg$literalExpectation("static", false),
        "auto",
        peg$literalExpectation("auto", false),
        "none",
        peg$literalExpectation("none", false),
        "hidden",
        peg$literalExpectation("hidden", false),
        "dotted",
        peg$literalExpectation("dotted", false),
        "dashed",
        peg$literalExpectation("dashed", false),
        "solid",
        peg$literalExpectation("solid", false),
        "double",
        peg$literalExpectation("double", false),
        "groove",
        peg$literalExpectation("groove", false),
        "ridge",
        peg$literalExpectation("ridge", false),
        "inset",
        peg$literalExpectation("inset", false),
        "outset",
        peg$literalExpectation("outset", false),
        "font-size",
        peg$literalExpectation("font-size", true),
        function(fontSize) {
            return {fontSize};
          },
        "line-height",
        peg$literalExpectation("line-height", true),
        function(lineHeight) {
            return {lineHeight};
          },
        "font-style",
        peg$literalExpectation("font-style", true),
        function(fontStyle) {
            return {fontStyle};
          },
        "font-weight",
        peg$literalExpectation("font-weight", true),
        function(fontWeight) {
            return fontWeight && {fontWeight};
          },
        "font-variant",
        peg$literalExpectation("font-variant", true),
        function(fontVariant) {
            return {fontVariant};
          },
        "font-stretch",
        peg$literalExpectation("font-stretch", true),
        function(fontStretch) {
            return {fontStretch};
          },
        "font-family",
        peg$literalExpectation("font-family", true),
        function(fontFamily) {
            return {fontFamily};
          },
        "font",
        peg$literalExpectation("font", true),
        function(font) {
            return font && (typeof font === "object" ? font : {font});
          },
        "color",
        peg$literalExpectation("color", true),
        function(color) {
            return {color};
          },
        "direction",
        peg$literalExpectation("direction", true),
        function(direction) {
            return {direction};
          },
        "display",
        peg$literalExpectation("display", true),
        function(display) {
            return {display};
          },
        "writing-mode",
        peg$literalExpectation("writing-mode", true),
        function(writingMode) {
            return {writingMode};
          },
        "white-space",
        peg$literalExpectation("white-space", true),
        function(whiteSpace) {
            return {whiteSpace};
          },
        "tab-size",
        peg$literalExpectation("tab-size", true),
        function(tabSize) {
            return {tabSize};
          },
        "position",
        peg$literalExpectation("position", true),
        function(position) {
            return {position};
          },
        "margin-top",
        peg$literalExpectation("margin-top", true),
        function(marginTop) {
            return {marginTop};
          },
        "margin-right",
        peg$literalExpectation("margin-right", true),
        function(marginRight) {
            return {marginRight};
          },
        "margin-bottom",
        peg$literalExpectation("margin-bottom", true),
        function(marginBottom) {
            return {marginBottom};
          },
        "margin-left",
        peg$literalExpectation("margin-left", true),
        function(marginLeft) {
            return {marginLeft};
          },
        "margin",
        peg$literalExpectation("margin", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'margin', '', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'margin', '', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'margin', '', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'margin', '', s, s, s, s);
          },
        "padding-top",
        peg$literalExpectation("padding-top", true),
        function(paddingTop) {
            return {paddingTop};
          },
        "padding-right",
        peg$literalExpectation("padding-right", true),
        function(paddingRight) {
            return {paddingRight};
          },
        "padding-bottom",
        peg$literalExpectation("padding-bottom", true),
        function(paddingBottom) {
            return {paddingBottom};
          },
        "padding-left",
        peg$literalExpectation("padding-left", true),
        function(paddingLeft) {
            return {paddingLeft};
          },
        "padding",
        peg$literalExpectation("padding", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'padding', '', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'padding', '', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'padding', '', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'padding', '', s, s, s, s);
          },
        "border-top-width",
        peg$literalExpectation("border-top-width", true),
        function(borderTopWidth) {
            return {borderTopWidth};
          },
        "border-right-width",
        peg$literalExpectation("border-right-width", true),
        function(borderRightWidth) {
            return {borderRightWidth};
          },
        "border-bottom-width",
        peg$literalExpectation("border-bottom-width", true),
        function(borderBottomWidth) {
            return {borderBottomWidth};
          },
        "border-left-width",
        peg$literalExpectation("border-left-width", true),
        function(borderLeftWidth) {
            return {borderLeftWidth};
          },
        "border-width",
        peg$literalExpectation("border-width", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'border', 'Width', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'border', 'Width', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'border', 'Width', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'border', 'Width', s, s, s, s);
          },
        "border-top-style",
        peg$literalExpectation("border-top-style", true),
        function(borderTopStyle) {
            return {borderTopStyle};
          },
        "border-right-style",
        peg$literalExpectation("border-right-style", true),
        function(borderRightStyle) {
            return {borderRightStyle};
          },
        "border-bottom-style",
        peg$literalExpectation("border-bottom-style", true),
        function(borderBottomStyle) {
            return {borderBottomStyle};
          },
        "border-left-style",
        peg$literalExpectation("border-left-style", true),
        function(borderLeftStyle) {
            return {borderLeftStyle};
          },
        "border-style",
        peg$literalExpectation("border-style", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'border', 'Style', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'border', 'Style', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'border', 'Style', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'border', 'Style', s, s, s, s);
          },
        "border-top-color",
        peg$literalExpectation("border-top-color", true),
        function(borderTopColor) {
            return {borderTopColor};
          },
        "border-right-color",
        peg$literalExpectation("border-right-color", true),
        function(borderRightColor) {
            return {borderRightColor};
          },
        "border-bottom-color",
        peg$literalExpectation("border-bottom-color", true),
        function(borderBottomColor) {
            return {borderBottomColor};
          },
        "border-left-color",
        peg$literalExpectation("border-left-color", true),
        function(borderLeftColor) {
            return {borderLeftColor};
          },
        "border-color",
        peg$literalExpectation("border-color", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'border', 'Color', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'border', 'Color', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'border', 'Color', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'border', 'Color', s, s, s, s);
          },
        "-top",
        peg$literalExpectation("-top", false),
        "-right",
        peg$literalExpectation("-right", false),
        "-bottom",
        peg$literalExpectation("-bottom", false),
        "-left",
        peg$literalExpectation("-left", false),
        "border",
        peg$literalExpectation("border", true),
        function(t, w, s, c) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (c) setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            return ret;
          },
        function(t, s, w, c) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (c) setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            return ret;
          },
        function(t, w, c, s) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            if (s) setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            return ret;
          },
        function(t, c, w, s) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            if (s) setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            return ret;
          },
        function(t, c, s, w) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (w) setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            return ret;
          },
        function(t, s, c, w) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (w) setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            return ret;
          },
        function(t, w) {
            return setTopRightBottomLeftOr(t, {}, 'border', 'Width', w, w, w, w);
          },
        function(t, c) {
            return setTopRightBottomLeftOr(t, {}, 'border', 'Color', c, c, c, c);
          },
        function(t, s) {
            return setTopRightBottomLeftOr(t, {}, 'border', 'Style', s, s, s, s);
          },
        function(t, i) {
            const ret = setTopRightBottomLeftOr(t, {}, 'border', 'Style', i, i, i, i);
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', i, i, i, i);
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', i, i, i, i);
            return ret;
          },
        "background-color",
        peg$literalExpectation("background-color", true),
        function(backgroundColor) {
            return {backgroundColor};
          },
        "background-clip",
        peg$literalExpectation("background-clip", true),
        "border-box",
        peg$literalExpectation("border-box", false),
        "content-box",
        peg$literalExpectation("content-box", false),
        "padding-box",
        peg$literalExpectation("padding-box", false),
        function(backgroundClip) {
            return {backgroundClip};
          },
        "text-align",
        peg$literalExpectation("text-align", true),
        "start",
        peg$literalExpectation("start", false),
        "end",
        peg$literalExpectation("end", false),
        "left",
        peg$literalExpectation("left", false),
        "right",
        peg$literalExpectation("right", false),
        "center",
        peg$literalExpectation("center", false),
        function(textAlign) {
            return {textAlign};
          },
        "width",
        peg$literalExpectation("width", true),
        function(width) {
            return {width};
          },
        "height",
        peg$literalExpectation("height", true),
        function(height) {
            return {height};
          },
        "box-sizing",
        peg$literalExpectation("box-sizing", true),
        function(boxSizing) {
            return {boxSizing};
          },
        /^[0-9a-f]/i,
        peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        /^[\x80-\uFFFF]/,
        peg$classExpectation([["\x80", "\uFFFF"]], false, false),
        "\\",
        peg$literalExpectation("\\", false),
        "\r\n",
        peg$literalExpectation("\r\n", false),
        /^[ \t\r\n\f]/,
        peg$classExpectation([" ", "\t", "\r", "\n", "\f"], false, false),
        function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        /^[^\r\n\f0-9a-f]/i,
        peg$classExpectation(["\r", "\n", "\f", ["0", "9"], ["a", "f"]], true, true),
        function(ch) { return ch; },
        /^[_a-z]/i,
        peg$classExpectation(["_", ["a", "z"]], false, true),
        /^[_a-z0-9\-]/i,
        peg$classExpectation(["_", ["a", "z"], ["0", "9"], "-"], false, true),
        "\"",
        peg$literalExpectation("\"", false),
        /^[^\n\r\f\\"]/,
        peg$classExpectation(["\n", "\r", "\f", "\\", "\""], true, false),
        function(nl) { return ''; },
        function(chars) {
              return chars.join('');
            },
        "'",
        peg$literalExpectation("'", false),
        /^[^\n\r\f\\']/,
        peg$classExpectation(["\n", "\r", "\f", "\\", "'"], true, false),
        "/*",
        peg$literalExpectation("/*", false),
        /^[^*]/,
        peg$classExpectation(["*"], true, false),
        "*",
        peg$literalExpectation("*", false),
        /^[^\/*]/,
        peg$classExpectation(["/", "*"], true, false),
        "-",
        peg$literalExpectation("-", false),
        function(prefix, start, chars) {
              return prefix + start + chars.join('');
            },
        function(chars) { return chars.join(''); },
        /^[+\-]/,
        peg$classExpectation(["+", "-"], false, false),
        "e",
        peg$literalExpectation("e", false),
        function() {
              return parseFloat(text());
            },
        /^[!#$%&*-[\]-~]/,
        peg$classExpectation(["!", "#", "$", "%", "&", ["*", "["], ["]", "~"]], false, false),
        "\n",
        peg$literalExpectation("\n", false),
        "\r",
        peg$literalExpectation("\r", false),
        "\f",
        peg$literalExpectation("\f", false),
        "a",
        peg$literalExpectation("a", true),
        "0",
        peg$literalExpectation("0", false),
        /^[Aa]/,
        peg$classExpectation(["A", "a"], false, false),
        function() { return 'a'; },
        "c",
        peg$literalExpectation("c", true),
        /^[Cc]/,
        peg$classExpectation(["C", "c"], false, false),
        function() { return 'c'; },
        "d",
        peg$literalExpectation("d", true),
        /^[Dd]/,
        peg$classExpectation(["D", "d"], false, false),
        function() { return 'd'; },
        peg$literalExpectation("e", true),
        /^[Ee]/,
        peg$classExpectation(["E", "e"], false, false),
        function() { return 'e'; },
        "g",
        peg$literalExpectation("g", true),
        /^[Gg]/,
        peg$classExpectation(["G", "g"], false, false),
        "\\g",
        peg$literalExpectation("\\g", true),
        function() { return 'g'; },
        "h",
        peg$literalExpectation("h", true),
        /^[Hh]/,
        peg$classExpectation(["H", "h"], false, false),
        "\\h",
        peg$literalExpectation("\\h", true),
        function() { return 'h'; },
        "i",
        peg$literalExpectation("i", true),
        /^[Ii]/,
        peg$classExpectation(["I", "i"], false, false),
        "\\i",
        peg$literalExpectation("\\i", true),
        function() { return 'i'; },
        "k",
        peg$literalExpectation("k", true),
        /^[Kk]/,
        peg$classExpectation(["K", "k"], false, false),
        "\\k",
        peg$literalExpectation("\\k", true),
        function() { return 'k'; },
        "l",
        peg$literalExpectation("l", true),
        /^[Ll]/,
        peg$classExpectation(["L", "l"], false, false),
        "\\l",
        peg$literalExpectation("\\l", true),
        function() { return 'l'; },
        "m",
        peg$literalExpectation("m", true),
        /^[Mm]/,
        peg$classExpectation(["M", "m"], false, false),
        "\\m",
        peg$literalExpectation("\\m", true),
        function() { return 'm'; },
        "n",
        peg$literalExpectation("n", true),
        /^[Nn]/,
        peg$classExpectation(["N", "n"], false, false),
        "\\n",
        peg$literalExpectation("\\n", true),
        function() { return 'n'; },
        "o",
        peg$literalExpectation("o", true),
        /^[Oo]/,
        peg$classExpectation(["O", "o"], false, false),
        "\\o",
        peg$literalExpectation("\\o", true),
        function() { return 'o'; },
        "p",
        peg$literalExpectation("p", true),
        /^[Pp]/,
        peg$classExpectation(["P", "p"], false, false),
        "\\p",
        peg$literalExpectation("\\p", true),
        function() { return 'p'; },
        "r",
        peg$literalExpectation("r", true),
        /^[Rr]/,
        peg$classExpectation(["R", "r"], false, false),
        "\\r",
        peg$literalExpectation("\\r", true),
        function() { return 'r'; },
        "s",
        peg$literalExpectation("s", true),
        /^[Ss]/,
        peg$classExpectation(["S", "s"], false, false),
        "\\s",
        peg$literalExpectation("\\s", true),
        function() { return 's'; },
        "t",
        peg$literalExpectation("t", true),
        /^[Tt]/,
        peg$classExpectation(["T", "t"], false, false),
        "\\t",
        peg$literalExpectation("\\t", true),
        function() { return 't'; },
        "u",
        peg$literalExpectation("u", true),
        /^[Uu]/,
        peg$classExpectation(["U", "u"], false, false),
        "\\u",
        peg$literalExpectation("\\u", true),
        function() { return 'u'; },
        "x",
        peg$literalExpectation("x", true),
        /^[Xx]/,
        peg$classExpectation(["X", "x"], false, false),
        "\\x",
        peg$literalExpectation("\\x", true),
        function() { return 'x'; },
        "z",
        peg$literalExpectation("z", true),
        /^[Zz]/,
        peg$classExpectation(["Z", "z"], false, false),
        "\\z",
        peg$literalExpectation("\\z", true),
        function() { return 'z'; },
        peg$otherExpectation("whitespace"),
        peg$otherExpectation("string"),
        function(string) { return string; },
        peg$otherExpectation("identifier"),
        function(ident) { return ident; },
        peg$otherExpectation("hash"),
        function(name) { return '#' + name; },
        peg$otherExpectation("length"),
        function(value) { return { value: value, unit: 'ex' }; },
        function(value) { return { value: value, unit: 'cm' }; },
        function(value) { return { value: value, unit: 'mm' }; },
        function(value) { return { value: value, unit: 'in' }; },
        function(value) { return { value: value, unit: 'pt' }; },
        function(value) { return { value: value, unit: 'pc' }; },
        function(value) { return { value: value, unit: 'em' }; },
        function() { return 0; },
        peg$otherExpectation("angle"),
        function(value) { return { value: value, unit: 'deg'  }; },
        function(value) { return { value: value, unit: 'rad'  }; },
        function(value) { return { value: value, unit: 'grad' }; },
        peg$otherExpectation("time"),
        function(value) { return { value: value, unit: 'ms' }; },
        function(value) { return { value: value, unit: 's'  }; },
        peg$otherExpectation("frequency"),
        function(value) { return { value: value, unit: 'hz' }; },
        function(value) { return { value: value, unit: 'kh' }; },
        peg$otherExpectation("percentage"),
        function(value) { return { value: value, unit: '%' }; },
        peg$otherExpectation("number"),
        function(value) { return { value: value, unit: null }; },
        peg$otherExpectation("uri"),
        "(",
        peg$literalExpectation("(", true),
        function(url) { return url; },
        peg$otherExpectation("function"),
        peg$literalExpectation("(", false)
      ],

      peg$bytecode = [
        peg$decode("%$;\x980#*;\x98&/\xA3#;!.\" &\"/\x95$$%2 \"\"6 7!/A#$;\x980#*;\x98&/1$;!.\" &\"/#$+#)(#'#(\"'#&'#0Q*%2 \"\"6 7!/A#$;\x980#*;\x98&/1$;!.\" &\"/#$+#)(#'#(\"'#&'#&/)$8#:\"#\"! )(#'#(\"'#&'#"),
        peg$decode(";D.\u0169 &;E.\u0163 &;F.\u015D &;G.\u0157 &;H.\u0151 &;J.\u014B &;K.\u0145 &;L.\u013F &;M.\u0139 &;N.\u0133 &;O.\u012D &;P.\u0127 &;Q.\u0121 &;R.\u011B &;S.\u0115 &;T.\u010F &;U.\u0109 &;V.\u0103 &;W.\xFD &;X.\xF7 &;Y.\xF1 &;Z.\xEB &;[.\xE5 &;\\.\xDF &;].\xD9 &;^.\xD3 &;_.\xCD &;`.\xC7 &;a.\xC1 &;b.\xBB &;c.\xB5 &;d.\xAF &;e.\xA9 &;f.\xA3 &;g.\x9D &;h.\x97 &;i.\x91 &;j.\x8B &;k.\x85 &;m.\x7F &;q.y &;r.s &;s.m &;n.g &;o.a &;p.[ &%;\"/Q#2#\"\"6#7$/B$$;\x980#*;\x98&/2$;#/)$8$:%$\"# )($'#(#'#(\"'#&'#"),
        peg$decode("%;\x9A/8#$;\x980#*;\x98&/($8\":&\"!!)(\"'#&'#"),
        peg$decode("%;%/i#$%;$.\" &\"/,#;%/#$+\")(\"'#&'#0;*%;$.\" &\"/,#;%/#$+\")(\"'#&'#&/)$8\":'\"\"! )(\"'#&'#"),
        peg$decode("%2(\"\"6(7)/7#$;\x980#*;\x98&/'$8\":*\" )(\"'#&'#.G &%2+\"\"6+7,/7#$;\x980#*;\x98&/'$8\":-\" )(\"'#&'#"),
        peg$decode("%;\xA1.A &;\x9D.; &;\x9C.5 &;\x9E./ &;\x9F.) &;\xA0.# &;\xA2/8#$;\x980#*;\x98&/($8\":.\"!!)(\"'#&'#.\x98 &%;\x99/8#$;\x980#*;\x98&/($8\":/\"!!)(\"'#&'#.s &%;\xA3/8#$;\x980#*;\x98&/($8\":0\"!!)(\"'#&'#.N &;&.H &;).B &%;\x9A/8#$;\x980#*;\x98&/($8\":1\"!!)(\"'#&'#"),
        peg$decode("%;\xA4/a#$;\x980#*;\x98&/Q$;#/H$22\"\"6273/9$$;\x980#*;\x98&/)$8%:4%\"$\")(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%$45\"\"5!76/,#0)*45\"\"5!76&&&#/7#27\"\"6778/($8\":9\"!!)(\"'#&'#.\xE7 &%%2:\"\"6:7;/A#45\"\"5!76/2$45\"\"5!76/#$+#)(#'#(\"'#&'#.\xA7 &%2<\"\"6<7=/A#4>\"\"5!7?/2$45\"\"5!76/#$+#)(#'#(\"'#&'#.s &%2@\"\"6@7A/2#4B\"\"5!7C/#$+\")(\"'#&'#.N &%45\"\"5!76/2#45\"\"5!76/#$+\")(\"'#&'#.) &45\"\"5!76/' 8!:D!! )"),
        peg$decode("%$45\"\"5!76/,#0)*45\"\"5!76&&&#/7#27\"\"6778/($8\":E\"!!)(\"'#&'#.\xA3 &%$45\"\"5!760)*45\"\"5!76&/[#2F\"\"6F7G/L$$45\"\"5!76/,#0)*45\"\"5!76&&&#/*$8#:H##\"! )(#'#(\"'#&'#.H &%$45\"\"5!76/,#0)*45\"\"5!76&&&#/' 8!:I!! )"),
        peg$decode("%$;|0#*;|&/\u011A#2J\"\"6J7K/\u010B$$;\x980#*;\x98&/\xFB$;'/\xF2$$;\x980#*;\x98&/\xE2$2+\"\"6+7,/\xD3$$;\x980#*;\x98&/\xC3$;'/\xBA$$;\x980#*;\x98&/\xAA$2+\"\"6+7,/\x9B$$;\x980#*;\x98&/\x8B$;'/\x82$$;\x980#*;\x98&/r$2+\"\"6+7,/c$$;\x980#*;\x98&/S$;(/J$$;\x980#*;\x98&/:$22\"\"6273/+$82:L2$.*&\")(2'#(1'#(0'#(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0317 &%$;|0#*;|&/\xE1#2M\"\"6M7N/\xD2$$;\x980#*;\x98&/\xC2$;'/\xB9$$;\x980#*;\x98&/\xA9$2+\"\"6+7,/\x9A$$;\x980#*;\x98&/\x8A$;'/\x81$$;\x980#*;\x98&/q$2+\"\"6+7,/b$$;\x980#*;\x98&/R$;'/I$$;\x980#*;\x98&/9$22\"\"6273/*$8.:O.#*&\")(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0242 &%$;|0#*;|&/\xDF#2P\"\"6P7Q/\xD0$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#/\xA8$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#/\x80$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#/X$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#.\" &\"/+$8&:T&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u016F &%$;|0#*;|&/{#2P\"\"6P7Q/l$4R\"\"5!7S/]$4R\"\"5!7S/N$4U\"\"5!7V/?$4R\"\"5!7S.\" &\"/+$8&:W&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u0100 &%2X\"\"6X7Y.\xE9 &2Z\"\"6Z7[.\xDD &2\\\"\"6\\7].\xD1 &2^\"\"6^7_.\xC5 &2`\"\"6`7a.\xB9 &2b\"\"6b7c.\xAD &2d\"\"6d7e.\xA1 &2f\"\"6f7g.\x95 &2h\"\"6h7i.\x89 &2j\"\"6j7k.} &2l\"\"6l7m.q &2n\"\"6n7o.e &2p\"\"6p7q.Y &2r\"\"6r7s.M &2t\"\"6t7u.A &2v\"\"6v7w.5 &2x\"\"6x7y.) &2z\"\"6z7{/& 8!:|! )"),
        peg$decode("%2}\"\"6}7~/& 8!:\x7F! ).4 &%2\x80\"\"6\x807\x81/& 8!:\x82! )"),
        peg$decode("%2\x83\"\"6\x837\x84/& 8!:\x85! ).\xA7 &%2\x86\"\"6\x867\x87/& 8!:\x88! ).\x90 &%2\x89\"\"6\x897\x8A/& 8!:\x8B! ).y &%2\x8C\"\"6\x8C7\x8D/& 8!:\x8E! ).b &%2\x8F\"\"6\x8F7\x90/& 8!:\x91! ).K &%2\x92\"\"6\x927\x93/& 8!:\x94! ).4 &%2\x95\"\"6\x957\x96/& 8!:\x97! )"),
        peg$decode("%2\x98\"\"6\x987\x99/& 8!:\x9A! ).4 &%2\x9B\"\"6\x9B7\x9C/& 8!:\x9D! )"),
        peg$decode("%;,./ &;+.) &;\x9D.# &;\xA1/' 8!:\x9E!! )"),
        peg$decode("%2\x9F\"\"6\x9F7\xA0./ &;\x9D.) &;\xA1.# &;\xA2/' 8!:\xA1!! )"),
        peg$decode("2\x9F\"\"6\x9F7\xA0.5 &2\xA2\"\"6\xA27\xA3.) &2\xA4\"\"6\xA47\xA5"),
        peg$decode("2\x9F\"\"6\x9F7\xA0.v &2\xA6\"\"6\xA67\xA7.j &2\xA8\"\"6\xA87\xA9.^ &%2\xAA\"\"6\xAA7\xAB/& 8!:\xAC! ).G &%$45\"\"5!76/,#0)*45\"\"5!76&&&#/& 8!:\xAD! )"),
        peg$decode("2\x9F\"\"6\x9F7\xA0.) &2\xAE\"\"6\xAE7\xAF"),
        peg$decode("2\x9F\"\"6\x9F7\xA0.} &2\xB0\"\"6\xB07\xB1.q &2\xB2\"\"6\xB27\xB3.e &2\xB4\"\"6\xB47\xB5.Y &2\xB6\"\"6\xB67\xB7.M &2\xB8\"\"6\xB87\xB9.A &2\xBA\"\"6\xBA7\xBB.5 &2\xBC\"\"6\xBC7\xBD.) &2\xBE\"\"6\xBE7\xBF"),
        peg$decode("%;\x99/8#$;\x980#*;\x98&/($8\":\xC0\"!!)(\"'#&'#.w &%;}/m#$%$;\x980#*;\x98&/,#;}/#$+\")(\"'#&'#0=*%$;\x980#*;\x98&/,#;}/#$+\")(\"'#&'#&/)$8\":\xC1\"\"! )(\"'#&'#"),
        peg$decode("%;3/\x8B#$%2+\"\"6+7,/<#$;\x980#*;\x98&/,$;3/#$+#)(#'#(\"'#&'#0L*%2+\"\"6+7,/<#$;\x980#*;\x98&/,$;3/#$+#)(#'#(\"'#&'#&/)$8\":\xC2\"\"! )(\"'#&'#"),
        peg$decode("%;//' 8!:\xC3!! )"),
        peg$decode("%;0/' 8!:\xC4!! )"),
        peg$decode("%;1/' 8!:\xC5!! )"),
        peg$decode("%;2/' 8!:\xC6!! )"),
        peg$decode("%$%;5.N &%%<;-=.##&&!&'#/,#;6/#$+\")(\"'#&'#.) &;7.# &;8/9#$;\x98/&#0#*;\x98&&&#/#$+\")(\"'#&'#0t*%;5.N &%%<;-=.##&&!&'#/,#;6/#$+\")(\"'#&'#.) &;7.# &;8/9#$;\x98/&#0#*;\x98&&&#/#$+\")(\"'#&'#&/& 8!:\xC7! )"),
        peg$decode("%%;9/\xDF#;-/\xD6$%%<%$;\x980#*;\x98&/2#2(\"\"6(7)/#$+\")(\"'#&'#=.##&&!&'#/9#$;\x98/&#0#*;\x98&&&#/#$+\")(\"'#&'#.r &%$;\x980#*;\x98&/a#2(\"\"6(7)/R$$;\x980#*;\x98&/B$;./9$$;\x98/&#0#*;\x98&&&#/#$+%)(%'#($'#(#'#(\"'#&'#/,$;4/#$+$)($'#(#'#(\"'#&'#/' 8!:\xC8!! )"),
        peg$decode("2\xC9\"\"6\xC97\xCA.) &2\xCB\"\"6\xCB7\xCC"),
        peg$decode("%2\xCD\"\"6\xCD7\xCE/& 8!:\xCF! ).b &%2\xD0\"\"6\xD07\xD1/& 8!:\xD2! ).K &%2\xD3\"\"6\xD37\xD4/& 8!:\xD5! ).4 &%2\xD6\"\"6\xD67\xD7/& 8!:\xD8! )"),
        peg$decode("2\xD9\"\"6\xD97\xDA.5 &2\xDB\"\"6\xDB7\xDC.) &2\xDD\"\"6\xDD7\xDE"),
        peg$decode("2\x9F\"\"6\x9F7\xA0.M &2\xDF\"\"6\xDF7\xE0.A &2\xE1\"\"6\xE17\xE2.5 &2\xE3\"\"6\xE37\xE4.) &2\xE5\"\"6\xE57\xE6"),
        peg$decode(";\x9D.# &;\xA2"),
        peg$decode("2\xE7\"\"6\xE77\xE8.5 &2\xE9\"\"6\xE97\xEA.) &2\xEB\"\"6\xEB7\xEC"),
        peg$decode(";\x9D.# &;\xA1"),
        peg$decode(";\x9D./ &;\xA1.) &2\xED\"\"6\xED7\xEE"),
        peg$decode("2\xEF\"\"6\xEF7\xF0.\x89 &2\xF1\"\"6\xF17\xF2.} &2\xF3\"\"6\xF37\xF4.q &2\xF5\"\"6\xF57\xF6.e &2\xF7\"\"6\xF77\xF8.Y &2\xF9\"\"6\xF97\xFA.M &2\xFB\"\"6\xFB7\xFC.A &2\xFD\"\"6\xFD7\xFE.5 &2\xFF\"\"6\xFF7\u0100.) &2\u0101\"\"6\u01017\u0102"),
        peg$decode("%3\u0103\"\"5)7\u0104/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;-.# &;*/($8%:\u0105%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0106\"\"5+7\u0107/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;..# &;*/($8%:\u0108%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0109\"\"5*7\u010A/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;/.# &;*/($8%:\u010B%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u010C\"\"5+7\u010D/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;0.# &;*/($8%:\u010E%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u010F\"\"5,7\u0110/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;1.# &;*/($8%:\u0111%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0112\"\"5,7\u0113/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;2.# &;*/($8%:\u0114%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0115\"\"5+7\u0116/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;*.# &;4/($8%:\u0117%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0118\"\"5$7\u0119/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;:.# &;*/($8%:\u011A%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u011B\"\"5%7\u011C/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;).# &;*/($8%:\u011D%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u011E\"\"5)7\u011F/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;;.# &;*/($8%:\u0120%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0121\"\"5'7\u0122/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;<.# &;*/($8%:\u0123%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0124\"\"5,7\u0125/`#$;\x980#*;\x98&/P$2#\"\"6#7$/A$$;\x980#*;\x98&/1$;=/($8%:\u0126%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0127\"\"5+7\u0128/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;>.# &;*/($8%:\u0129%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u012A\"\"5(7\u012B/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;?.# &;*/($8%:\u012C%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u012D\"\"5(7\u012E/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;@.# &;*/($8%:\u012F%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0130\"\"5*7\u0131/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;B.# &;*/($8%:\u0132%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0133\"\"5,7\u0134/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;B.# &;*/($8%:\u0135%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0136\"\"5-7\u0137/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;B.# &;*/($8%:\u0138%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0139\"\"5+7\u013A/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;B.# &;*/($8%:\u013B%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u013C\"\"5&7\u013D/\xAE#$;\x980#*;\x98&/\x9E$2#\"\"6#7$/\x8F$$;\x980#*;\x98&/\x7F$;B/v$$;\x980#*;\x98&/f$;B/]$$;\x980#*;\x98&/M$;B/D$$;\x980#*;\x98&/4$;B/+$8+:\u013E+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u013C\"\"5&7\u013D/\x94#$;\x980#*;\x98&/\x84$2#\"\"6#7$/u$$;\x980#*;\x98&/e$;B/\\$$;\x980#*;\x98&/L$;B/C$$;\x980#*;\x98&/3$;B/*$8):\u013F)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u013C\"\"5&7\u013D/z#$;\x980#*;\x98&/j$2#\"\"6#7$/[$$;\x980#*;\x98&/K$;B/B$$;\x980#*;\x98&/2$;B/)$8':\u0140'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u013C\"\"5&7\u013D/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;B.# &;*/($8%:\u0141%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0142\"\"5+7\u0143/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;A.# &;*/($8%:\u0144%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0145\"\"5-7\u0146/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;A.# &;*/($8%:\u0147%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0148\"\"5.7\u0149/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;A.# &;*/($8%:\u014A%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u014B\"\"5,7\u014C/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;A.# &;*/($8%:\u014D%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u014E\"\"5'7\u014F/\xAE#$;\x980#*;\x98&/\x9E$2#\"\"6#7$/\x8F$$;\x980#*;\x98&/\x7F$;A/v$$;\x980#*;\x98&/f$;A/]$$;\x980#*;\x98&/M$;A/D$$;\x980#*;\x98&/4$;A/+$8+:\u0150+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u014E\"\"5'7\u014F/\x94#$;\x980#*;\x98&/\x84$2#\"\"6#7$/u$$;\x980#*;\x98&/e$;A/\\$$;\x980#*;\x98&/L$;A/C$$;\x980#*;\x98&/3$;A/*$8):\u0151)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u014E\"\"5'7\u014F/z#$;\x980#*;\x98&/j$2#\"\"6#7$/[$$;\x980#*;\x98&/K$;A/B$$;\x980#*;\x98&/2$;A/)$8':\u0152'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u014E\"\"5'7\u014F/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;A.# &;*/($8%:\u0153%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0154\"\"507\u0155/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;\x9D.# &;*/($8%:\u0156%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0157\"\"527\u0158/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;\x9D.# &;*/($8%:\u0159%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u015A\"\"537\u015B/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;\x9D.# &;*/($8%:\u015C%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u015D\"\"517\u015E/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;\x9D.# &;*/($8%:\u015F%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0160\"\"5,7\u0161/\xAE#$;\x980#*;\x98&/\x9E$2#\"\"6#7$/\x8F$$;\x980#*;\x98&/\x7F$;\x9D/v$$;\x980#*;\x98&/f$;\x9D/]$$;\x980#*;\x98&/M$;\x9D/D$$;\x980#*;\x98&/4$;\x9D/+$8+:\u0162+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u0160\"\"5,7\u0161/\x94#$;\x980#*;\x98&/\x84$2#\"\"6#7$/u$$;\x980#*;\x98&/e$;\x9D/\\$$;\x980#*;\x98&/L$;\x9D/C$$;\x980#*;\x98&/3$;\x9D/*$8):\u0163)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u0160\"\"5,7\u0161/z#$;\x980#*;\x98&/j$2#\"\"6#7$/[$$;\x980#*;\x98&/K$;\x9D/B$$;\x980#*;\x98&/2$;\x9D/)$8':\u0164'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u0160\"\"5,7\u0161/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;\x9D.# &;*/($8%:\u0165%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0166\"\"507\u0167/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;C.# &;*/($8%:\u0168%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0169\"\"527\u016A/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;C.# &;*/($8%:\u016B%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u016C\"\"537\u016D/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;C.# &;*/($8%:\u016E%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u016F\"\"517\u0170/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;C.# &;*/($8%:\u0171%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0172\"\"5,7\u0173/\xAE#$;\x980#*;\x98&/\x9E$2#\"\"6#7$/\x8F$$;\x980#*;\x98&/\x7F$;C/v$$;\x980#*;\x98&/f$;C/]$$;\x980#*;\x98&/M$;C/D$$;\x980#*;\x98&/4$;C/+$8+:\u0174+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u0172\"\"5,7\u0173/\x94#$;\x980#*;\x98&/\x84$2#\"\"6#7$/u$$;\x980#*;\x98&/e$;C/\\$$;\x980#*;\x98&/L$;C/C$$;\x980#*;\x98&/3$;C/*$8):\u0175)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u0172\"\"5,7\u0173/z#$;\x980#*;\x98&/j$2#\"\"6#7$/[$$;\x980#*;\x98&/K$;C/B$$;\x980#*;\x98&/2$;C/)$8':\u0176'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u0172\"\"5,7\u0173/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;C.# &;*/($8%:\u0177%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0178\"\"507\u0179/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;).# &;*/($8%:\u017A%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u017B\"\"527\u017C/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;).# &;*/($8%:\u017D%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u017E\"\"537\u017F/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;).# &;*/($8%:\u0180%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0181\"\"517\u0182/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;).# &;*/($8%:\u0183%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0184\"\"5,7\u0185/\xAE#$;\x980#*;\x98&/\x9E$2#\"\"6#7$/\x8F$$;\x980#*;\x98&/\x7F$;)/v$$;\x980#*;\x98&/f$;)/]$$;\x980#*;\x98&/M$;)/D$$;\x980#*;\x98&/4$;)/+$8+:\u0186+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u0184\"\"5,7\u0185/\x94#$;\x980#*;\x98&/\x84$2#\"\"6#7$/u$$;\x980#*;\x98&/e$;)/\\$$;\x980#*;\x98&/L$;)/C$$;\x980#*;\x98&/3$;)/*$8):\u0187)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u0184\"\"5,7\u0185/z#$;\x980#*;\x98&/j$2#\"\"6#7$/[$$;\x980#*;\x98&/K$;)/B$$;\x980#*;\x98&/2$;)/)$8':\u0188'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u0184\"\"5,7\u0185/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;).# &;*/($8%:\u0189%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("2\u018A\"\"6\u018A7\u018B.A &2\u018C\"\"6\u018C7\u018D.5 &2\u018E\"\"6\u018E7\u018F.) &2\u0190\"\"6\u01907\u0191"),
        peg$decode("%3\u0192\"\"5&7\u0193/\xA8#;l.\" &\"/\x9A$$;\x980#*;\x98&/\x8A$2#\"\"6#7$/{$$;\x980#*;\x98&/k$;\x9D/b$$;\x980#*;\x98&/R$;C/I$$;\x980#*;\x98&/9$;).\" &\"/+$8*:\u0194*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u04EC &%3\u0192\"\"5&7\u0193/\xA8#;l.\" &\"/\x9A$$;\x980#*;\x98&/\x8A$2#\"\"6#7$/{$$;\x980#*;\x98&/k$;C/b$$;\x980#*;\x98&/R$;\x9D/I$$;\x980#*;\x98&/9$;).\" &\"/+$8*:\u0195*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0451 &%3\u0192\"\"5&7\u0193/\xA8#;l.\" &\"/\x9A$$;\x980#*;\x98&/\x8A$2#\"\"6#7$/{$$;\x980#*;\x98&/k$;\x9D/b$$;\x980#*;\x98&/R$;)/I$$;\x980#*;\x98&/9$;C.\" &\"/+$8*:\u0196*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u03B6 &%3\u0192\"\"5&7\u0193/\xA8#;l.\" &\"/\x9A$$;\x980#*;\x98&/\x8A$2#\"\"6#7$/{$$;\x980#*;\x98&/k$;)/b$$;\x980#*;\x98&/R$;\x9D/I$$;\x980#*;\x98&/9$;C.\" &\"/+$8*:\u0197*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u031B &%3\u0192\"\"5&7\u0193/\xA8#;l.\" &\"/\x9A$$;\x980#*;\x98&/\x8A$2#\"\"6#7$/{$$;\x980#*;\x98&/k$;)/b$$;\x980#*;\x98&/R$;C/I$$;\x980#*;\x98&/9$;\x9D.\" &\"/+$8*:\u0198*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0280 &%3\u0192\"\"5&7\u0193/\xA8#;l.\" &\"/\x9A$$;\x980#*;\x98&/\x8A$2#\"\"6#7$/{$$;\x980#*;\x98&/k$;C/b$$;\x980#*;\x98&/R$;)/I$$;\x980#*;\x98&/9$;\x9D.\" &\"/+$8*:\u0199*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01E5 &%3\u0192\"\"5&7\u0193/\x7F#;l.\" &\"/q$$;\x980#*;\x98&/a$2#\"\"6#7$/R$$;\x980#*;\x98&/B$;\x9D/9$$;\x980#*;\x98&/)$8':\u019A'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0173 &%3\u0192\"\"5&7\u0193/\x7F#;l.\" &\"/q$$;\x980#*;\x98&/a$2#\"\"6#7$/R$$;\x980#*;\x98&/B$;)/9$$;\x980#*;\x98&/)$8':\u019B'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0101 &%3\u0192\"\"5&7\u0193/\x7F#;l.\" &\"/q$$;\x980#*;\x98&/a$2#\"\"6#7$/R$$;\x980#*;\x98&/B$;C/9$$;\x980#*;\x98&/)$8':\u019C'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\x8F &%3\u0192\"\"5&7\u0193/\x7F#;l.\" &\"/q$$;\x980#*;\x98&/a$2#\"\"6#7$/R$$;\x980#*;\x98&/B$;*/9$$;\x980#*;\x98&/)$8':\u019D'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u019E\"\"507\u019F/f#$;\x980#*;\x98&/V$2#\"\"6#7$/G$$;\x980#*;\x98&/7$;).# &;*/($8%:\u01A0%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u01A1\"\"5/7\u01A2/\x84#$;\x980#*;\x98&/t$2#\"\"6#7$/e$$;\x980#*;\x98&/U$2\u01A3\"\"6\u01A37\u01A4.; &2\u01A5\"\"6\u01A57\u01A6./ &2\u01A7\"\"6\u01A77\u01A8.# &;*/($8%:\u01A9%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u01AA\"\"5*7\u01AB/\x9C#$;\x980#*;\x98&/\x8C$2#\"\"6#7$/}$$;\x980#*;\x98&/m$2\u01AC\"\"6\u01AC7\u01AD.S &2\u01AE\"\"6\u01AE7\u01AF.G &2\u01B0\"\"6\u01B07\u01B1.; &2\u01B2\"\"6\u01B27\u01B3./ &2\u01B4\"\"6\u01B47\u01B5.# &;*/($8%:\u01B6%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u01B7\"\"5%7\u01B8/r#$;\x980#*;\x98&/b$2#\"\"6#7$/S$$;\x980#*;\x98&/C$;A./ &2\xED\"\"6\xED7\xEE.# &;*/($8%:\u01B9%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u01BA\"\"5&7\u01BB/r#$;\x980#*;\x98&/b$2#\"\"6#7$/S$$;\x980#*;\x98&/C$;A./ &2\xED\"\"6\xED7\xEE.# &;*/($8%:\u01BC%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u01BD\"\"5*7\u01BE/x#$;\x980#*;\x98&/h$2#\"\"6#7$/Y$$;\x980#*;\x98&/I$2\u01A3\"\"6\u01A37\u01A4./ &2\u01A5\"\"6\u01A57\u01A6.# &;*/($8%:\u01BF%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("4\u01C0\"\"5!7\u01C1"),
        peg$decode("4\u01C2\"\"5!7\u01C3"),
        peg$decode("%2\u01C4\"\"6\u01C47\u01C5/\xA8#%%;t/i#;t.\" &\"/[$;t.\" &\"/M$;t.\" &\"/?$;t.\" &\"/1$;t.\" &\"/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/\"!&,)/H$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/($8#:\u01CA#!!)(#'#(\"'#&'#"),
        peg$decode(";v.G &%2\u01C4\"\"6\u01C47\u01C5/7#4\u01CB\"\"5!7\u01CC/($8\":\u01CD\"! )(\"'#&'#"),
        peg$decode("4\u01CE\"\"5!7\u01CF.) &;u.# &;w"),
        peg$decode("4\u01D0\"\"5!7\u01D1.) &;u.# &;w"),
        peg$decode("%2\u01D2\"\"6\u01D27\u01D3/\xA7#$4\u01D4\"\"5!7\u01D5.G &%2\u01C4\"\"6\u01C47\u01C5/1#;\x84/($8\":\u01D6\"! )(\"'#&'#.# &;w0S*4\u01D4\"\"5!7\u01D5.G &%2\u01C4\"\"6\u01C47\u01C5/1#;\x84/($8\":\u01D6\"! )(\"'#&'#.# &;w&/7$2\u01D2\"\"6\u01D27\u01D3/($8#:\u01D7#!!)(#'#(\"'#&'#"),
        peg$decode("%2\u01D8\"\"6\u01D87\u01D9/\xA7#$4\u01DA\"\"5!7\u01DB.G &%2\u01C4\"\"6\u01C47\u01C5/1#;\x84/($8\":\u01D6\"! )(\"'#&'#.# &;w0S*4\u01DA\"\"5!7\u01DB.G &%2\u01C4\"\"6\u01C47\u01C5/1#;\x84/($8\":\u01D6\"! )(\"'#&'#.# &;w&/7$2\u01D8\"\"6\u01D87\u01D9/($8#:\u01D7#!!)(#'#(\"'#&'#"),
        peg$decode("%2\u01DC\"\"6\u01DC7\u01DD/\u011C#$4\u01DE\"\"5!7\u01DF0)*4\u01DE\"\"5!7\u01DF&/\u0100$$2\u01E0\"\"6\u01E07\u01E1/,#0)*2\u01E0\"\"6\u01E07\u01E1&&&#/\xDE$$%4\u01E2\"\"5!7\u01E3/a#$4\u01DE\"\"5!7\u01DF0)*4\u01DE\"\"5!7\u01DF&/E$$2\u01E0\"\"6\u01E07\u01E1/,#0)*2\u01E0\"\"6\u01E07\u01E1&&&#/#$+#)(#'#(\"'#&'#0q*%4\u01E2\"\"5!7\u01E3/a#$4\u01DE\"\"5!7\u01DF0)*4\u01DE\"\"5!7\u01DF&/E$$2\u01E0\"\"6\u01E07\u01E1/,#0)*2\u01E0\"\"6\u01E07\u01E1&&&#/#$+#)(#'#(\"'#&'#&/2$2(\"\"6(7)/#$+%)(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%%2\u01E4\"\"6\u01E47\u01E5.\" &\"/\"!&,)/C#;x/:$$;y0#*;y&/*$8#:\u01E6##\"! )(#'#(\"'#&'#"),
        peg$decode("%$;y/&#0#*;y&&&#/' 8!:\u01E7!! )"),
        peg$decode("%4\u01E8\"\"5!7\u01E9.\" &\"/\xF1#%$45\"\"5!760)*45\"\"5!76&/T#2F\"\"6F7G/E$$45\"\"5!76/,#0)*45\"\"5!76&&&#/#$+#)(#'#(\"'#&'#.< &$45\"\"5!76/,#0)*45\"\"5!76&&&#/{$%2\u01EA\"\"6\u01EA7\u01EB/Y#4\u01E8\"\"5!7\u01E9.\" &\"/E$$45\"\"5!76/,#0)*45\"\"5!76&&&#/#$+#)(#'#(\"'#&'#.\" &\"/'$8#:\u01EC# )(#'#(\"'#&'#"),
        peg$decode(";z.# &;{"),
        peg$decode("%$4\u01ED\"\"5!7\u01EE.) &;u.# &;w05*4\u01ED\"\"5!7\u01EE.) &;u.# &;w&/' 8!:\u01E7!! )"),
        peg$decode("$4\u01C8\"\"5!7\u01C9/,#0)*4\u01C8\"\"5!7\u01C9&&&#"),
        peg$decode(";\x82.\" &\""),
        peg$decode("2\u01EF\"\"6\u01EF7\u01F0.A &2\u01C6\"\"6\u01C67\u01C7.5 &2\u01F1\"\"6\u01F17\u01F2.) &2\u01F3\"\"6\u01F37\u01F4"),
        peg$decode("3\u01F5\"\"5!7\u01F6.\xB6 &%2\u01C4\"\"6\u01C47\u01C5/\xA6#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x92$2\u01F7\"\"6\u01F77\u01F8.\" &\"/~$2\u01F7\"\"6\u01F77\u01F8.\" &\"/j$2\u01F7\"\"6\u01F77\u01F8.\" &\"/V$4\u01F9\"\"5!7\u01FA/G$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/'$8':\u01FB' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01FC\"\"5!7\u01FD.\xB6 &%2\u01C4\"\"6\u01C47\u01C5/\xA6#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x92$2\u01F7\"\"6\u01F77\u01F8.\" &\"/~$2\u01F7\"\"6\u01F77\u01F8.\" &\"/j$2\u01F7\"\"6\u01F77\u01F8.\" &\"/V$4\u01FE\"\"5!7\u01FF/G$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/'$8':\u0200' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u0201\"\"5!7\u0202.\xB6 &%2\u01C4\"\"6\u01C47\u01C5/\xA6#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x92$2\u01F7\"\"6\u01F77\u01F8.\" &\"/~$2\u01F7\"\"6\u01F77\u01F8.\" &\"/j$2\u01F7\"\"6\u01F77\u01F8.\" &\"/V$4\u0203\"\"5!7\u0204/G$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/'$8':\u0205' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01EA\"\"5!7\u0206.\xB6 &%2\u01C4\"\"6\u01C47\u01C5/\xA6#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x92$2\u01F7\"\"6\u01F77\u01F8.\" &\"/~$2\u01F7\"\"6\u01F77\u01F8.\" &\"/j$2\u01F7\"\"6\u01F77\u01F8.\" &\"/V$4\u0207\"\"5!7\u0208/G$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/'$8':\u0209' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u020A\"\"5!7\u020B.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u020C\"\"5!7\u020D/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u020E\"\"5\"7\u020F/& 8!:\u0210! )"),
        peg$decode("3\u0211\"\"5!7\u0212.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u0213\"\"5!7\u0214/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0215\"\"5\"7\u0216/& 8!:\u0217! )"),
        peg$decode("3\u0218\"\"5!7\u0219.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u021A\"\"5!7\u021B/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u021C\"\"5\"7\u021D/& 8!:\u021E! )"),
        peg$decode("3\u021F\"\"5!7\u0220.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u0221\"\"5!7\u0222/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0223\"\"5\"7\u0224/& 8!:\u0225! )"),
        peg$decode("3\u0226\"\"5!7\u0227.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u0228\"\"5!7\u0229/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u022A\"\"5\"7\u022B/& 8!:\u022C! )"),
        peg$decode("3\u022D\"\"5!7\u022E.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u022F\"\"5!7\u0230/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0231\"\"5\"7\u0232/& 8!:\u0233! )"),
        peg$decode("3\u0234\"\"5!7\u0235.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u0236\"\"5!7\u0237/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0238\"\"5\"7\u0239/& 8!:\u023A! )"),
        peg$decode("3\u023B\"\"5!7\u023C.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u023D\"\"5!7\u023E/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u023F\"\"5\"7\u0240/& 8!:\u0241! )"),
        peg$decode("3\u0242\"\"5!7\u0243.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u0244\"\"5!7\u0245/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0246\"\"5\"7\u0247/& 8!:\u0248! )"),
        peg$decode("3\u0249\"\"5!7\u024A.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u024B\"\"5!7\u024C/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u024D\"\"5\"7\u024E/& 8!:\u024F! )"),
        peg$decode("3\u0250\"\"5!7\u0251.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u0252\"\"5!7\u0253/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0254\"\"5\"7\u0255/& 8!:\u0256! )"),
        peg$decode("3\u0257\"\"5!7\u0258.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u0259\"\"5!7\u025A/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u025B\"\"5\"7\u025C/& 8!:\u025D! )"),
        peg$decode("3\u025E\"\"5!7\u025F.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u0260\"\"5!7\u0261/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0262\"\"5\"7\u0263/& 8!:\u0264! )"),
        peg$decode("3\u0265\"\"5!7\u0266.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u0267\"\"5!7\u0268/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0269\"\"5\"7\u026A/& 8!:\u026B! )"),
        peg$decode("3\u026C\"\"5!7\u026D.\xC9 &%2\u01C4\"\"6\u01C47\u01C5/\xA2#2\u01F7\"\"6\u01F77\u01F8.\" &\"/\x8E$2\u01F7\"\"6\u01F77\u01F8.\" &\"/z$2\u01F7\"\"6\u01F77\u01F8.\" &\"/f$2\u01F7\"\"6\u01F77\u01F8.\" &\"/R$4\u026E\"\"5!7\u026F/C$2\u01C6\"\"6\u01C67\u01C7.) &4\u01C8\"\"5!7\u01C9.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0270\"\"5\"7\u0271/& 8!:\u0272! )"),
        peg$decode("<%$;|0#*;|&/,#;\x82/#$+\")(\"'#&'#=.\" 7\u0273"),
        peg$decode("<%$;|0#*;|&/1#;\x80/($8\":\u0275\"! )(\"'#&'#=.\" 7\u0274"),
        peg$decode("<%$;|0#*;|&/1#;}/($8\":\u0277\"! )(\"'#&'#=.\" 7\u0276"),
        peg$decode("<%$;|0#*;|&/@#2P\"\"6P7Q/1$;~/($8#:\u0279#! )(#'#(\"'#&'#=.\" 7\u0278"),
        peg$decode("<%$;|0#*;|&/C#;\x7F/:$;\x88/1$;\x96/($8$:\u027B$!\")($'#(#'#(\"'#&'#=.\" 7\u027A"),
        peg$decode("<%$;|0#*;|&/C#;\x7F/:$;\x91/1$;\x96/($8$:1$!\")($'#(#'#(\"'#&'#.\u0191 &%$;|0#*;|&/C#;\x7F/:$;\x86/1$;\x8E/($8$:\u027C$!\")($'#(#'#(\"'#&'#.\u015A &%$;|0#*;|&/C#;\x7F/:$;\x8E/1$;\x8E/($8$:\u027D$!\")($'#(#'#(\"'#&'#.\u0123 &%$;|0#*;|&/C#;\x7F/:$;\x8B/1$;\x8F/($8$:\u027E$!\")($'#(#'#(\"'#&'#.\xEC &%$;|0#*;|&/C#;\x7F/:$;\x91/1$;\x94/($8$:\u027F$!\")($'#(#'#(\"'#&'#.\xB5 &%$;|0#*;|&/C#;\x7F/:$;\x91/1$;\x86/($8$:\u0280$!\")($'#(#'#(\"'#&'#.~ &%$;|0#*;|&/C#;\x7F/:$;\x88/1$;\x8E/($8$:\u0281$!\")($'#(#'#(\"'#&'#.G &%$;|0#*;|&/6#2\u01F7\"\"6\u01F77\u01F8/'$8\":\u0282\" )(\"'#&'#=.\" 7\u027A"),
        peg$decode("<%$;|0#*;|&/L#;\x7F/C$;\x87/:$;\x88/1$;\x89/($8%:\u0284%!#)(%'#($'#(#'#(\"'#&'#.\xA6 &%$;|0#*;|&/L#;\x7F/C$;\x92/:$;\x85/1$;\x87/($8%:\u0285%!#)(%'#($'#(#'#(\"'#&'#.f &%$;|0#*;|&/U#;\x7F/L$;\x89/C$;\x92/:$;\x85/1$;\x87/($8&:\u0286&!$)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0283"),
        peg$decode("<%$;|0#*;|&/C#;\x7F/:$;\x8E/1$;\x93/($8$:\u0288$!\")($'#(#'#(\"'#&'#.K &%$;|0#*;|&/:#;\x7F/1$;\x93/($8#:\u0289#!!)(#'#(\"'#&'#=.\" 7\u0287"),
        peg$decode("<%$;|0#*;|&/C#;\x7F/:$;\x8A/1$;\x97/($8$:\u028B$!\")($'#(#'#(\"'#&'#.] &%$;|0#*;|&/L#;\x7F/C$;\x8C/:$;\x8A/1$;\x97/($8%:\u028C%!#)(%'#($'#(#'#(\"'#&'#=.\" 7\u028A"),
        peg$decode("<%$;|0#*;|&/@#;\x7F/7$27\"\"6778/($8#:\u028E#!!)(#'#(\"'#&'#=.\" 7\u028D"),
        peg$decode("<%$;|0#*;|&/1#;\x7F/($8\":\u0290\"! )(\"'#&'#=.\" 7\u028F"),
        peg$decode("<%$;|0#*;|&/|#;\x95/s$;\x92/j$;\x8D/a$3\u0292\"\"5!7\u0293/R$;\x83/I$;\x80/@$;\x83/7$22\"\"6273/($8):\u0294)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\x8D &%$;|0#*;|&/|#;\x95/s$;\x92/j$;\x8D/a$3\u0292\"\"5!7\u0293/R$;\x83/I$;\x81/@$;\x83/7$22\"\"6273/($8):\u0294)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0291"),
        peg$decode("<%$;|0#*;|&/@#;}/7$2\u0292\"\"6\u02927\u0296/($8#:&#!!)(#'#(\"'#&'#=.\" 7\u0295")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }


    const {initial, inherited} = require('./cascade');

    function extractList(list, index) {
      return list.map(function(element) { return element[index]; });
    }

    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index))
        .filter(function(element) { return element !== null; });
    }

    function buildExpression(head, tail) {
      return tail.reduce(function(result, element) {
        return {
          type: 'Expression',
          operator: element[0],
          left: result,
          right: element[1]
        };
      }, head);
    }

    function extend(a, b) {
      for (var prop in b) {
        a[prop] = b[prop];
      }

      return a;
    }

    function combine(a) {
      return a.reduce(function(obj, next) {
        return extend(obj, next);
      }, {});
    }

    function setTopRightBottomLeft(obj, before, after, t, r, b, l) {
      obj[before + 'Top' + (after || '')] = t;
      obj[before + 'Right' + (after || '')] = r;
      obj[before + 'Bottom' + (after || '')] = b;
      obj[before + 'Left' + (after || '')] = l;
      return obj;
    }

    function setTopRightBottomLeftOr(x, obj, before, after, t, r, b, l) {
      if (!x) return setTopRightBottomLeft(obj, before, after, t, r, b, l);

      x = x.toLowerCase();

      if (x === '-top') obj[before + 'Top' + (after || '')] = t;
      if (x === '-right') obj[before + 'Right' + (after || '')] = r;
      if (x === '-bottom') obj[before + 'Bottom' + (after || '')] = b;
      if (x === '-left') obj[before + 'Left' + (after || '')] = l;

      return obj;
    }

    const colorMap = new Map([
      ['maroon', {r: 128, g: 0, b: 0, a: 1}],
      ['red', {r: 255, g: 0, b: 0, a: 1}],
      ['orange', {r: 255, g: 165, b: 0, a: 1}],
      ['yellow', {r: 255, g: 255, b: 0, a: 1}],
      ['olive', {r: 128, g: 128, b: 0, a: 1}],
      ['purple', {r: 128, g: 0, b: 128, a: 1}],
      ['fuchsia', {r: 255, g: 0, b: 255, a: 1}],
      ['white', {r: 255, g: 255, b: 255, a: 1}],
      ['lime', {r: 0, g: 255, b: 0, a: 1}],
      ['green', {r: 0, g: 128, b: 0, a: 1}],
      ['navy', {r: 0, g: 0, b: 128, a: 1}],
      ['blue', {r: 0, g: 0, b: 255, a: 1}],
      ['aqua', {r: 0, g: 255, b: 255, a: 1}],
      ['teal', {r: 0, g: 128, b: 128, a: 1}],
      ['black', {r: 0, g: 0, b: 0, a: 1}],
      ['silver', {r: 192, g: 192, b: 192, a: 1}],
      ['gray', {r: 128, g: 128, b: 128, a: 1}],
      ['transparent', {r: 255, g: 255, b: 255, a: 0}]
    ]);

    let $font = {}, $fontNormals = 0;


  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
