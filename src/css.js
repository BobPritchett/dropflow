/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { start: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        ";",
        peg$literalExpectation(";", false),
        function(declarationsHead, declarationsTail) { return combine(buildList(declarationsHead, declarationsTail, 2)); },
        ":",
        peg$literalExpectation(":", false),
        function(name, value) {
              let r = {};
              r['_' + name] = value;
              return r;
            },
        function(name) { return name; },
        function(head, tail) { return buildExpression(head, tail); },
        "/",
        peg$literalExpectation("/", false),
        function() { return '/'; },
        ",",
        peg$literalExpectation(",", false),
        function() { return ','; },
        function(quantity) {
              return {
                type: 'Quantity',
                value: quantity.value,
                unit: quantity.unit
              };
            },
        function(value) { return { type: 'String', value: value }; },
        function(value) { return { type: 'URI',    value: value }; },
        function(value) { return value; },
        ")",
        peg$literalExpectation(")", false),
        function(name, params) {
              return { type: 'Function', name: name, params: params };
            },
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        "%",
        peg$literalExpectation("%", false),
        function(component) {
            return Math.max(0, Math.min(100, parseInt(component, 10))) * 1e-2 * 255
          },
        "1",
        peg$literalExpectation("1", false),
        "2",
        peg$literalExpectation("2", false),
        /^[0-4]/,
        peg$classExpectation([["0", "4"]], false, false),
        "25",
        peg$literalExpectation("25", false),
        /^[0-5]/,
        peg$classExpectation([["0", "5"]], false, false),
        function(component) {
            return parseInt(Array.isArray(component) ? component.join('') : component, 10);
          },
        function(a) {
            const component = a.join('');
            return Math.max(0, Math.min(100, parseInt(component, 10))) * 1e-2
          },
        ".",
        peg$literalExpectation(".", false),
        function(a, b, c) {
            const component = (a ? a.join('') : '') + b + c.join('');
            return Math.max(0, Math.min(1, parseFloat(component)));
          },
        function(a) {
            return Math.max(0, Math.min(1, parseInt(a.join(''), 10)))
          },
        "rgba(",
        peg$literalExpectation("rgba(", false),
        function(r, g, b, a) {
            return {r, g, b, a};
          },
        "rgb(",
        peg$literalExpectation("rgb(", false),
        function(r, g, b) {
            return {r, g, b, a: 1};
          },
        "#",
        peg$literalExpectation("#", false),
        /^[a-f0-9]/i,
        peg$classExpectation([["a", "f"], ["0", "9"]], false, true),
        function(r, g, b, a) {
            return {
              r: parseInt(r.join(''), 16),
              g: parseInt(g.join(''), 16),
              b: parseInt(b.join(''), 16),
              a: a ? parseInt(a.join(''), 16) / 255 : 1
            }
          },
        /^[a-f0-9]/,
        peg$classExpectation([["a", "f"], ["0", "9"]], false, false),
        function(r, g, b, a) {
            return {
              r: parseInt(r + r, 16),
              g: parseInt(g + g, 16),
              b: parseInt(b + b, 16),
              a: a ? parseInt(a + a, 16) / 255 : 1
            }
          },
        "maroon",
        peg$literalExpectation("maroon", false),
        "red",
        peg$literalExpectation("red", false),
        "orange",
        peg$literalExpectation("orange", false),
        "yellow",
        peg$literalExpectation("yellow", false),
        "olive",
        peg$literalExpectation("olive", false),
        "purple",
        peg$literalExpectation("purple", false),
        "fuchsia",
        peg$literalExpectation("fuchsia", false),
        "white",
        peg$literalExpectation("white", false),
        "lime",
        peg$literalExpectation("lime", false),
        "green",
        peg$literalExpectation("green", false),
        "navy",
        peg$literalExpectation("navy", false),
        "blue",
        peg$literalExpectation("blue", false),
        "aqua",
        peg$literalExpectation("aqua", false),
        "teal",
        peg$literalExpectation("teal", false),
        "black",
        peg$literalExpectation("black", false),
        "silver",
        peg$literalExpectation("silver", false),
        "gray",
        peg$literalExpectation("gray", false),
        function() {
            return colorMap.get(text())
          },
        "inherit",
        peg$literalExpectation("inherit", false),
        function() { return inherited; },
        "initial",
        peg$literalExpectation("initial", false),
        function() { return initial; },
        "xx-small",
        peg$literalExpectation("xx-small", false),
        function() { return 9 },
        "x-small",
        peg$literalExpectation("x-small", false),
        function() { return 10 },
        "small",
        peg$literalExpectation("small", false),
        function() { return 13 },
        "medium",
        peg$literalExpectation("medium", false),
        function() { return 16 },
        "large",
        peg$literalExpectation("large", false),
        function() { return 18 },
        "x-large",
        peg$literalExpectation("x-large", false),
        function() { return 24 },
        "xx-large",
        peg$literalExpectation("xx-large", false),
        function() { return 32 },
        "smaller",
        peg$literalExpectation("smaller", false),
        function() { return { value: 1/1.2, unit: 'em' } },
        "larger",
        peg$literalExpectation("larger", false),
        function() { return { value: 1.2, unit: 'em' } },
        function(font_size) { return font_size; },
        "normal",
        peg$literalExpectation("normal", false),
        function(line_height) { return line_height; },
        "italic",
        peg$literalExpectation("italic", false),
        "oblique",
        peg$literalExpectation("oblique", false),
        "bold",
        peg$literalExpectation("bold", false),
        "bolder",
        peg$literalExpectation("bolder", false),
        "lighter",
        peg$literalExpectation("lighter", false),
        /^[1-9]/,
        peg$classExpectation([["1", "9"]], false, false),
        "00",
        peg$literalExpectation("00", false),
        function(n) { return text(); },
        "small-caps",
        peg$literalExpectation("small-caps", false),
        function(family) { return family; },
        function(head, tail) { return buildList(head, tail, 1).join(' '); },
        function(x) {
            const ret = {fontStyle: x[0], fontVariant: x[2]};
            if (x[4]) ret.fontWeight = x[4];
            return ret;
          },
        function(x) {
            const ret = {fontStyle: x[2], fontVariant: x[0]};
            if (x[4]) ret.fontWeight = x[4];
            return ret;
          },
        function(x) {
            const ret = {fontStyle: x[0], fontWeight: x[2]};
            if (x[4]) ret.fontVariant = x[4];
            return ret;
          },
        function(x) {
            const ret = {fontWeight: x[0], fontStyle: x[2]};
            if (x[4]) ret.fontVariant = x[4];
            return ret;
          },
        function(x) {
            const ret = {fontVariant: x[0], fontWeight: x[2]};
            if (x[4]) ret.fontStyle = x[4];
            return ret;
          },
        function(x) {
            const ret = {fontWeight: x[0], fontVariant: x[2]};
            if (x[4]) ret.fontStyle = x[4];
            return ret;
          },
        function(fontWeight) { return {fontWeight}; },
        function(fontVariant) { return {fontVariant}; },
        function(fontStyle) { return {fontStyle}; },
        function(x) {
              const ret = x[0] || {};
              ret.fontSize = x[1];
              if (x[2]) ret.lineHeight = x[2][2];
              ret.fontFamily = [x[3]].concat(x[4] ? extractList(x[4], 2) : []);
              return ret;
            },
        "block",
        peg$literalExpectation("block", false),
        function() { return {outer: 'block', inner: 'flow'}; },
        "inline-block",
        peg$literalExpectation("inline-block", false),
        function() { return {outer: 'inline', inner: 'flow-root'}; },
        "inline",
        peg$literalExpectation("inline", false),
        function() { return {outer: 'inline', inner: 'flow'}; },
        "flow-root",
        peg$literalExpectation("flow-root", false),
        function() { return {outer: 'block', inner: 'flow-root'}; },
        "horizontal-tb",
        peg$literalExpectation("horizontal-tb", false),
        "vertical-lr",
        peg$literalExpectation("vertical-lr", false),
        "vertical-rl",
        peg$literalExpectation("vertical-rl", false),
        "nowrap",
        peg$literalExpectation("nowrap", false),
        "pre-wrap",
        peg$literalExpectation("pre-wrap", false),
        "pre-line",
        peg$literalExpectation("pre-line", false),
        "pre",
        peg$literalExpectation("pre", false),
        "absolute",
        peg$literalExpectation("absolute", false),
        "relative",
        peg$literalExpectation("relative", false),
        "static",
        peg$literalExpectation("static", false),
        "auto",
        peg$literalExpectation("auto", false),
        "none",
        peg$literalExpectation("none", false),
        "hidden",
        peg$literalExpectation("hidden", false),
        "dotted",
        peg$literalExpectation("dotted", false),
        "dashed",
        peg$literalExpectation("dashed", false),
        "solid",
        peg$literalExpectation("solid", false),
        "double",
        peg$literalExpectation("double", false),
        "groove",
        peg$literalExpectation("groove", false),
        "ridge",
        peg$literalExpectation("ridge", false),
        "inset",
        peg$literalExpectation("inset", false),
        "outset",
        peg$literalExpectation("outset", false),
        "font-size",
        peg$literalExpectation("font-size", true),
        function(fontSize) {
            return {fontSize};
          },
        "line-height",
        peg$literalExpectation("line-height", true),
        function(lineHeight) {
            return {lineHeight};
          },
        "font-style",
        peg$literalExpectation("font-style", true),
        function(fontStyle) {
            return {fontStyle};
          },
        "font-weight",
        peg$literalExpectation("font-weight", true),
        function(fontWeight) {
            return {fontWeight};
          },
        "font-variant",
        peg$literalExpectation("font-variant", true),
        function(fontVariant) {
            return {fontVariant};
          },
        "font-family",
        peg$literalExpectation("font-family", true),
        function(fontFamily) {
            return {fontFamily};
          },
        "font",
        peg$literalExpectation("font", true),
        function(font) {
            return typeof font === "object" ? font : {font};
          },
        "color",
        peg$literalExpectation("color", true),
        function(color) {
            return {color};
          },
        "display",
        peg$literalExpectation("display", true),
        function(display) {
            return {display};
          },
        "writing-mode",
        peg$literalExpectation("writing-mode", true),
        function(writingMode) {
            return {writingMode};
          },
        "white-space",
        peg$literalExpectation("white-space", true),
        function(whiteSpace) {
            return {whiteSpace};
          },
        "tab-size",
        peg$literalExpectation("tab-size", true),
        function(tabSize) {
            return {tabSize};
          },
        "position",
        peg$literalExpectation("position", true),
        function(position) {
            return {position};
          },
        "margin-top",
        peg$literalExpectation("margin-top", true),
        function(marginTop) {
            return {marginTop};
          },
        "margin-right",
        peg$literalExpectation("margin-right", true),
        function(marginRight) {
            return {marginRight};
          },
        "margin-bottom",
        peg$literalExpectation("margin-bottom", true),
        function(marginBottom) {
            return {marginBottom};
          },
        "margin-left",
        peg$literalExpectation("margin-left", true),
        function(marginLeft) {
            return {marginLeft};
          },
        "margin",
        peg$literalExpectation("margin", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'margin', '', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'margin', '', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'margin', '', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'margin', '', s, s, s, s);
          },
        "padding-top",
        peg$literalExpectation("padding-top", true),
        function(paddingTop) {
            return {paddingTop};
          },
        "padding-right",
        peg$literalExpectation("padding-right", true),
        function(paddingRight) {
            return {paddingRight};
          },
        "padding-bottom",
        peg$literalExpectation("padding-bottom", true),
        function(paddingBottom) {
            return {paddingBottom};
          },
        "padding-left",
        peg$literalExpectation("padding-left", true),
        function(paddingLeft) {
            return {paddingLeft};
          },
        "padding",
        peg$literalExpectation("padding", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'padding', '', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'padding', '', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'padding', '', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'padding', '', s, s, s, s);
          },
        "border-top-width",
        peg$literalExpectation("border-top-width", true),
        function(borderTopWidth) {
            return {borderTopWidth};
          },
        "border-right-width",
        peg$literalExpectation("border-right-width", true),
        function(borderRightWidth) {
            return {borderRightWidth};
          },
        "border-bottom-width",
        peg$literalExpectation("border-bottom-width", true),
        function(borderBottomWidth) {
            return {borderBottomWidth};
          },
        "border-left-width",
        peg$literalExpectation("border-left-width", true),
        function(borderLeftWidth) {
            return {borderLeftWidth};
          },
        "border-width",
        peg$literalExpectation("border-width", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'border', 'Width', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'border', 'Width', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'border', 'Width', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'border', 'Width', s, s, s, s);
          },
        "border-top-style",
        peg$literalExpectation("border-top-style", true),
        function(borderTopStyle) {
            return {borderTopStyle};
          },
        "border-right-style",
        peg$literalExpectation("border-right-style", true),
        function(borderRightStyle) {
            return {borderRightStyle};
          },
        "border-bottom-style",
        peg$literalExpectation("border-bottom-style", true),
        function(borderBottomStyle) {
            return {borderBottomStyle};
          },
        "border-left-style",
        peg$literalExpectation("border-left-style", true),
        function(borderLeftStyle) {
            return {borderLeftStyle};
          },
        "border-style",
        peg$literalExpectation("border-style", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'border', 'Style', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'border', 'Style', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'border', 'Style', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'border', 'Style', s, s, s, s);
          },
        "border-top-color",
        peg$literalExpectation("border-top-color", true),
        function(borderTopColor) {
            return {borderTopColor};
          },
        "border-right-color",
        peg$literalExpectation("border-right-color", true),
        function(borderRightColor) {
            return {borderRightColor};
          },
        "border-bottom-color",
        peg$literalExpectation("border-bottom-color", true),
        function(borderBottomColor) {
            return {borderBottomColor};
          },
        "border-left-color",
        peg$literalExpectation("border-left-color", true),
        function(borderLeftColor) {
            return {borderLeftColor};
          },
        "border-color",
        peg$literalExpectation("border-color", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'border', 'Color', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'border', 'Color', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'border', 'Color', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'border', 'Color', s, s, s, s);
          },
        "-top",
        peg$literalExpectation("-top", false),
        "-right",
        peg$literalExpectation("-right", false),
        "-bottom",
        peg$literalExpectation("-bottom", false),
        "-left",
        peg$literalExpectation("-left", false),
        "border",
        peg$literalExpectation("border", true),
        function(t, w, s, c) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (c) setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            return ret;
          },
        function(t, s, w, c) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (c) setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            return ret;
          },
        function(t, w, c, s) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            if (s) setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            return ret;
          },
        function(t, c, w, s) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            if (s) setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            return ret;
          },
        function(t, c, s, w) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (w) setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            return ret;
          },
        function(t, s, c, w) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (w) setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            return ret;
          },
        function(t, w) {
            return setTopRightBottomLeftOr(t, {}, 'border', 'Width', w, w, w, w);
          },
        function(t, c) {
            return setTopRightBottomLeftOr(t, {}, 'border', 'Color', c, c, c, c);
          },
        function(t, s) {
            return setTopRightBottomLeftOr(t, {}, 'border', 'Style', s, s, s, s);
          },
        function(t, i) {
            const ret = setTopRightBottomLeftOr(t, {}, 'border', 'Style', i, i, i, i);
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', i, i, i, i);
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', i, i, i, i);
            return ret;
          },
        "background-color",
        peg$literalExpectation("background-color", true),
        function(backgroundColor) {
            return {backgroundColor};
          },
        "background-clip",
        peg$literalExpectation("background-clip", true),
        "border-box",
        peg$literalExpectation("border-box", false),
        "content-box",
        peg$literalExpectation("content-box", false),
        "padding-box",
        peg$literalExpectation("padding-box", false),
        function(backgroundClip) {
            return {backgroundClip};
          },
        "width",
        peg$literalExpectation("width", true),
        function(width) {
            return {width};
          },
        "height",
        peg$literalExpectation("height", true),
        function(height) {
            return {height};
          },
        "box-sizing",
        peg$literalExpectation("box-sizing", true),
        function(boxSizing) {
            return {boxSizing};
          },
        /^[0-9a-f]/i,
        peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        /^[\x80-\uFFFF]/,
        peg$classExpectation([["\x80", "\uFFFF"]], false, false),
        "\\",
        peg$literalExpectation("\\", false),
        "\r\n",
        peg$literalExpectation("\r\n", false),
        /^[ \t\r\n\f]/,
        peg$classExpectation([" ", "\t", "\r", "\n", "\f"], false, false),
        function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        /^[^\r\n\f0-9a-f]/i,
        peg$classExpectation(["\r", "\n", "\f", ["0", "9"], ["a", "f"]], true, true),
        function(ch) { return ch; },
        /^[_a-z]/i,
        peg$classExpectation(["_", ["a", "z"]], false, true),
        /^[_a-z0-9\-]/i,
        peg$classExpectation(["_", ["a", "z"], ["0", "9"], "-"], false, true),
        "\"",
        peg$literalExpectation("\"", false),
        /^[^\n\r\f\\"]/,
        peg$classExpectation(["\n", "\r", "\f", "\\", "\""], true, false),
        function(nl) { return ''; },
        function(chars) {
              return chars.join('');
            },
        "'",
        peg$literalExpectation("'", false),
        /^[^\n\r\f\\']/,
        peg$classExpectation(["\n", "\r", "\f", "\\", "'"], true, false),
        "/*",
        peg$literalExpectation("/*", false),
        /^[^*]/,
        peg$classExpectation(["*"], true, false),
        "*",
        peg$literalExpectation("*", false),
        /^[^\/*]/,
        peg$classExpectation(["/", "*"], true, false),
        "-",
        peg$literalExpectation("-", false),
        function(prefix, start, chars) {
              return prefix + start + chars.join('');
            },
        function(chars) { return chars.join(''); },
        /^[+\-]/,
        peg$classExpectation(["+", "-"], false, false),
        "e",
        peg$literalExpectation("e", false),
        function() {
              return parseFloat(text());
            },
        /^[!#$%&*-[\]-~]/,
        peg$classExpectation(["!", "#", "$", "%", "&", ["*", "["], ["]", "~"]], false, false),
        "\n",
        peg$literalExpectation("\n", false),
        "\r",
        peg$literalExpectation("\r", false),
        "\f",
        peg$literalExpectation("\f", false),
        "a",
        peg$literalExpectation("a", true),
        "0",
        peg$literalExpectation("0", false),
        /^[Aa]/,
        peg$classExpectation(["A", "a"], false, false),
        function() { return 'a'; },
        "c",
        peg$literalExpectation("c", true),
        /^[Cc]/,
        peg$classExpectation(["C", "c"], false, false),
        function() { return 'c'; },
        "d",
        peg$literalExpectation("d", true),
        /^[Dd]/,
        peg$classExpectation(["D", "d"], false, false),
        function() { return 'd'; },
        peg$literalExpectation("e", true),
        /^[Ee]/,
        peg$classExpectation(["E", "e"], false, false),
        function() { return 'e'; },
        "g",
        peg$literalExpectation("g", true),
        /^[Gg]/,
        peg$classExpectation(["G", "g"], false, false),
        "\\g",
        peg$literalExpectation("\\g", true),
        function() { return 'g'; },
        "h",
        peg$literalExpectation("h", true),
        /^[Hh]/,
        peg$classExpectation(["H", "h"], false, false),
        "\\h",
        peg$literalExpectation("\\h", true),
        function() { return 'h'; },
        "i",
        peg$literalExpectation("i", true),
        /^[Ii]/,
        peg$classExpectation(["I", "i"], false, false),
        "\\i",
        peg$literalExpectation("\\i", true),
        function() { return 'i'; },
        "k",
        peg$literalExpectation("k", true),
        /^[Kk]/,
        peg$classExpectation(["K", "k"], false, false),
        "\\k",
        peg$literalExpectation("\\k", true),
        function() { return 'k'; },
        "l",
        peg$literalExpectation("l", true),
        /^[Ll]/,
        peg$classExpectation(["L", "l"], false, false),
        "\\l",
        peg$literalExpectation("\\l", true),
        function() { return 'l'; },
        "m",
        peg$literalExpectation("m", true),
        /^[Mm]/,
        peg$classExpectation(["M", "m"], false, false),
        "\\m",
        peg$literalExpectation("\\m", true),
        function() { return 'm'; },
        "n",
        peg$literalExpectation("n", true),
        /^[Nn]/,
        peg$classExpectation(["N", "n"], false, false),
        "\\n",
        peg$literalExpectation("\\n", true),
        function() { return 'n'; },
        "o",
        peg$literalExpectation("o", true),
        /^[Oo]/,
        peg$classExpectation(["O", "o"], false, false),
        "\\o",
        peg$literalExpectation("\\o", true),
        function() { return 'o'; },
        "p",
        peg$literalExpectation("p", true),
        /^[Pp]/,
        peg$classExpectation(["P", "p"], false, false),
        "\\p",
        peg$literalExpectation("\\p", true),
        function() { return 'p'; },
        "r",
        peg$literalExpectation("r", true),
        /^[Rr]/,
        peg$classExpectation(["R", "r"], false, false),
        "\\r",
        peg$literalExpectation("\\r", true),
        function() { return 'r'; },
        "s",
        peg$literalExpectation("s", true),
        /^[Ss]/,
        peg$classExpectation(["S", "s"], false, false),
        "\\s",
        peg$literalExpectation("\\s", true),
        function() { return 's'; },
        "t",
        peg$literalExpectation("t", true),
        /^[Tt]/,
        peg$classExpectation(["T", "t"], false, false),
        "\\t",
        peg$literalExpectation("\\t", true),
        function() { return 't'; },
        "u",
        peg$literalExpectation("u", true),
        /^[Uu]/,
        peg$classExpectation(["U", "u"], false, false),
        "\\u",
        peg$literalExpectation("\\u", true),
        function() { return 'u'; },
        "x",
        peg$literalExpectation("x", true),
        /^[Xx]/,
        peg$classExpectation(["X", "x"], false, false),
        "\\x",
        peg$literalExpectation("\\x", true),
        function() { return 'x'; },
        "z",
        peg$literalExpectation("z", true),
        /^[Zz]/,
        peg$classExpectation(["Z", "z"], false, false),
        "\\z",
        peg$literalExpectation("\\z", true),
        function() { return 'z'; },
        peg$otherExpectation("whitespace"),
        peg$otherExpectation("string"),
        function(string) { return string; },
        peg$otherExpectation("identifier"),
        function(ident) { return ident; },
        peg$otherExpectation("hash"),
        function(name) { return '#' + name; },
        peg$otherExpectation("length"),
        function(value) { return { value: value, unit: 'ex' }; },
        function(value) { return { value: value, unit: 'cm' }; },
        function(value) { return { value: value, unit: 'mm' }; },
        function(value) { return { value: value, unit: 'in' }; },
        function(value) { return { value: value, unit: 'pt' }; },
        function(value) { return { value: value, unit: 'pc' }; },
        function(value) { return { value: value, unit: 'em' }; },
        function() { return 0; },
        peg$otherExpectation("angle"),
        function(value) { return { value: value, unit: 'deg'  }; },
        function(value) { return { value: value, unit: 'rad'  }; },
        function(value) { return { value: value, unit: 'grad' }; },
        peg$otherExpectation("time"),
        function(value) { return { value: value, unit: 'ms' }; },
        function(value) { return { value: value, unit: 's'  }; },
        peg$otherExpectation("frequency"),
        function(value) { return { value: value, unit: 'hz' }; },
        function(value) { return { value: value, unit: 'kh' }; },
        peg$otherExpectation("percentage"),
        function(value) { return { value: value, unit: '%' }; },
        peg$otherExpectation("number"),
        function(value) { return { value: value, unit: null }; },
        peg$otherExpectation("uri"),
        "(",
        peg$literalExpectation("(", true),
        function(url) { return url; },
        peg$otherExpectation("function"),
        peg$literalExpectation("(", false)
      ],

      peg$bytecode = [
        peg$decode("%$;\x8E0#*;\x8E&/\xA3#;!.\" &\"/\x95$$%2 \"\"6 7!/A#$;\x8E0#*;\x8E&/1$;!.\" &\"/#$+#)(#'#(\"'#&'#0Q*%2 \"\"6 7!/A#$;\x8E0#*;\x8E&/1$;!.\" &\"/#$+#)(#'#(\"'#&'#&/)$8#:\"#\"! )(#'#(\"'#&'#"),
        peg$decode(";=.\u015D &;>.\u0157 &;?.\u0151 &;@.\u014B &;A.\u0145 &;B.\u013F &;C.\u0139 &;D.\u0133 &;E.\u012D &;F.\u0127 &;G.\u0121 &;H.\u011B &;I.\u0115 &;J.\u010F &;K.\u0109 &;L.\u0103 &;M.\xFD &;N.\xF7 &;O.\xF1 &;P.\xEB &;Q.\xE5 &;R.\xDF &;S.\xD9 &;T.\xD3 &;U.\xCD &;V.\xC7 &;W.\xC1 &;X.\xBB &;Y.\xB5 &;Z.\xAF &;[.\xA9 &;\\.\xA3 &;].\x9D &;^.\x97 &;_.\x91 &;`.\x8B &;a.\x85 &;b.\x7F &;d.y &;g.s &;h.m &;i.g &;e.a &;f.[ &%;\"/Q#2#\"\"6#7$/B$$;\x8E0#*;\x8E&/2$;#/)$8$:%$\"# )($'#(#'#(\"'#&'#"),
        peg$decode("%;\x90/8#$;\x8E0#*;\x8E&/($8\":&\"!!)(\"'#&'#"),
        peg$decode("%;%/i#$%;$.\" &\"/,#;%/#$+\")(\"'#&'#0;*%;$.\" &\"/,#;%/#$+\")(\"'#&'#&/)$8\":'\"\"! )(\"'#&'#"),
        peg$decode("%2(\"\"6(7)/7#$;\x8E0#*;\x8E&/'$8\":*\" )(\"'#&'#.G &%2+\"\"6+7,/7#$;\x8E0#*;\x8E&/'$8\":-\" )(\"'#&'#"),
        peg$decode("%;\x97.A &;\x93.; &;\x92.5 &;\x94./ &;\x95.) &;\x96.# &;\x98/8#$;\x8E0#*;\x8E&/($8\":.\"!!)(\"'#&'#.\x98 &%;\x8F/8#$;\x8E0#*;\x8E&/($8\":/\"!!)(\"'#&'#.s &%;\x99/8#$;\x8E0#*;\x8E&/($8\":0\"!!)(\"'#&'#.N &;&.H &;).B &%;\x90/8#$;\x8E0#*;\x8E&/($8\":1\"!!)(\"'#&'#"),
        peg$decode("%;\x9A/a#$;\x8E0#*;\x8E&/Q$;#/H$22\"\"6273/9$$;\x8E0#*;\x8E&/)$8%:4%\"$\")(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%$45\"\"5!76/,#0)*45\"\"5!76&&&#/7#27\"\"6778/($8\":9\"!!)(\"'#&'#.\xE7 &%%2:\"\"6:7;/A#45\"\"5!76/2$45\"\"5!76/#$+#)(#'#(\"'#&'#.\xA7 &%2<\"\"6<7=/A#4>\"\"5!7?/2$45\"\"5!76/#$+#)(#'#(\"'#&'#.s &%2@\"\"6@7A/2#4B\"\"5!7C/#$+\")(\"'#&'#.N &%45\"\"5!76/2#45\"\"5!76/#$+\")(\"'#&'#.) &45\"\"5!76/' 8!:D!! )"),
        peg$decode("%$45\"\"5!76/,#0)*45\"\"5!76&&&#/7#27\"\"6778/($8\":E\"!!)(\"'#&'#.\xA3 &%$45\"\"5!760)*45\"\"5!76&/[#2F\"\"6F7G/L$$45\"\"5!76/,#0)*45\"\"5!76&&&#/*$8#:H##\"! )(#'#(\"'#&'#.H &%$45\"\"5!76/,#0)*45\"\"5!76&&&#/' 8!:I!! )"),
        peg$decode("%$;r0#*;r&/\u011A#2J\"\"6J7K/\u010B$$;\x8E0#*;\x8E&/\xFB$;'/\xF2$$;\x8E0#*;\x8E&/\xE2$2+\"\"6+7,/\xD3$$;\x8E0#*;\x8E&/\xC3$;'/\xBA$$;\x8E0#*;\x8E&/\xAA$2+\"\"6+7,/\x9B$$;\x8E0#*;\x8E&/\x8B$;'/\x82$$;\x8E0#*;\x8E&/r$2+\"\"6+7,/c$$;\x8E0#*;\x8E&/S$;(/J$$;\x8E0#*;\x8E&/:$22\"\"6273/+$82:L2$.*&\")(2'#(1'#(0'#(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u030B &%$;r0#*;r&/\xE1#2M\"\"6M7N/\xD2$$;\x8E0#*;\x8E&/\xC2$;'/\xB9$$;\x8E0#*;\x8E&/\xA9$2+\"\"6+7,/\x9A$$;\x8E0#*;\x8E&/\x8A$;'/\x81$$;\x8E0#*;\x8E&/q$2+\"\"6+7,/b$$;\x8E0#*;\x8E&/R$;'/I$$;\x8E0#*;\x8E&/9$22\"\"6273/*$8.:O.#*&\")(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0236 &%$;r0#*;r&/\xDF#2P\"\"6P7Q/\xD0$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#/\xA8$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#/\x80$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#/X$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#.\" &\"/+$8&:T&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u0163 &%$;r0#*;r&/{#2P\"\"6P7Q/l$4R\"\"5!7S/]$4R\"\"5!7S/N$4U\"\"5!7V/?$4R\"\"5!7S.\" &\"/+$8&:W&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\xF4 &%2X\"\"6X7Y.\xDD &2Z\"\"6Z7[.\xD1 &2\\\"\"6\\7].\xC5 &2^\"\"6^7_.\xB9 &2`\"\"6`7a.\xAD &2b\"\"6b7c.\xA1 &2d\"\"6d7e.\x95 &2f\"\"6f7g.\x89 &2h\"\"6h7i.} &2j\"\"6j7k.q &2l\"\"6l7m.e &2n\"\"6n7o.Y &2p\"\"6p7q.M &2r\"\"6r7s.A &2t\"\"6t7u.5 &2v\"\"6v7w.) &2x\"\"6x7y/& 8!:z! )"),
        peg$decode("%2{\"\"6{7|/& 8!:}! ).4 &%2~\"\"6~7\x7F/& 8!:\x80! )"),
        peg$decode("%2\x81\"\"6\x817\x82/& 8!:\x83! ).\xA7 &%2\x84\"\"6\x847\x85/& 8!:\x86! ).\x90 &%2\x87\"\"6\x877\x88/& 8!:\x89! ).y &%2\x8A\"\"6\x8A7\x8B/& 8!:\x8C! ).b &%2\x8D\"\"6\x8D7\x8E/& 8!:\x8F! ).K &%2\x90\"\"6\x907\x91/& 8!:\x92! ).4 &%2\x93\"\"6\x937\x94/& 8!:\x95! )"),
        peg$decode("%2\x96\"\"6\x967\x97/& 8!:\x98! ).4 &%2\x99\"\"6\x997\x9A/& 8!:\x9B! )"),
        peg$decode("%;,./ &;+.) &;\x93.# &;\x97/8#$;\x8E0#*;\x8E&/($8\":\x9C\"!!)(\"'#&'#"),
        peg$decode("%2\x9D\"\"6\x9D7\x9E./ &;\x98.) &;\x93.# &;\x97/8#$;\x8E0#*;\x8E&/($8\":\x9F\"!!)(\"'#&'#"),
        peg$decode("2\x9D\"\"6\x9D7\x9E.5 &2\xA0\"\"6\xA07\xA1.) &2\xA2\"\"6\xA27\xA3"),
        peg$decode("2\x9D\"\"6\x9D7\x9E.k &2\xA4\"\"6\xA47\xA5._ &2\xA6\"\"6\xA67\xA7.S &2\xA8\"\"6\xA87\xA9.G &%4\xAA\"\"5!7\xAB/7#2\xAC\"\"6\xAC7\xAD/($8\":\xAE\"!!)(\"'#&'#"),
        peg$decode("2\x9D\"\"6\x9D7\x9E.) &2\xAF\"\"6\xAF7\xB0"),
        peg$decode("%;\x8F/8#$;\x8E0#*;\x8E&/($8\":\xB1\"!!)(\"'#&'#.w &%;s/m#$%$;\x8E0#*;\x8E&/,#;s/#$+\")(\"'#&'#0=*%$;\x8E0#*;\x8E&/,#;s/#$+\")(\"'#&'#&/)$8\":\xB2\"\"! )(\"'#&'#"),
        peg$decode("%%;//j#$;\x8E0#*;\x8E&/Z$;1/Q$$;\x8E0#*;\x8E&/A$;0.\" &\"/3$$;\x8E0#*;\x8E&/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/' 8!:\xB3!! ).\u027B &%%;1/j#$;\x8E0#*;\x8E&/Z$;//Q$$;\x8E0#*;\x8E&/A$;0.\" &\"/3$$;\x8E0#*;\x8E&/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/' 8!:\xB4!! ).\u0218 &%%;//j#$;\x8E0#*;\x8E&/Z$;0/Q$$;\x8E0#*;\x8E&/A$;1.\" &\"/3$$;\x8E0#*;\x8E&/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/' 8!:\xB5!! ).\u01B5 &%%;0/j#$;\x8E0#*;\x8E&/Z$;//Q$$;\x8E0#*;\x8E&/A$;1.\" &\"/3$$;\x8E0#*;\x8E&/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/' 8!:\xB6!! ).\u0152 &%%;1/j#$;\x8E0#*;\x8E&/Z$;0/Q$$;\x8E0#*;\x8E&/A$;/.\" &\"/3$$;\x8E0#*;\x8E&/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/' 8!:\xB7!! ).\xEF &%%;0/j#$;\x8E0#*;\x8E&/Z$;1/Q$$;\x8E0#*;\x8E&/A$;/.\" &\"/3$$;\x8E0#*;\x8E&/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/' 8!:\xB8!! ).\x8C &%;0/8#$;\x8E0#*;\x8E&/($8\":\xB9\"!!)(\"'#&'#.g &%;1/8#$;\x8E0#*;\x8E&/($8\":\xBA\"!!)(\"'#&'#.B &%;//8#$;\x8E0#*;\x8E&/($8\":\xBB\"!!)(\"'#&'#"),
        peg$decode("%%;3.\" &\"/\xCE#;-/\xC5$%2(\"\"6(7)/<#$;\x8E0#*;\x8E&/,$;./#$+#)(#'#(\"'#&'#.\" &\"/\x8E$;2/\x85$$%2+\"\"6+7,/<#$;\x8E0#*;\x8E&/,$;2/#$+#)(#'#(\"'#&'#0L*%2+\"\"6+7,/<#$;\x8E0#*;\x8E&/,$;2/#$+#)(#'#(\"'#&'#&/#$+%)(%'#($'#(#'#(\"'#&'#/' 8!:\xBC!! )"),
        peg$decode("%2\xBD\"\"6\xBD7\xBE/& 8!:\xBF! ).b &%2\xC0\"\"6\xC07\xC1/& 8!:\xC2! ).K &%2\xC3\"\"6\xC37\xC4/& 8!:\xC5! ).4 &%2\xC6\"\"6\xC67\xC7/& 8!:\xC8! )"),
        peg$decode("2\xC9\"\"6\xC97\xCA.5 &2\xCB\"\"6\xCB7\xCC.) &2\xCD\"\"6\xCD7\xCE"),
        peg$decode("2\x9D\"\"6\x9D7\x9E.M &2\xCF\"\"6\xCF7\xD0.A &2\xD1\"\"6\xD17\xD2.5 &2\xD3\"\"6\xD37\xD4.) &2\xD5\"\"6\xD57\xD6"),
        peg$decode(";\x93.# &;\x98"),
        peg$decode("2\xD7\"\"6\xD77\xD8.5 &2\xD9\"\"6\xD97\xDA.) &2\xDB\"\"6\xDB7\xDC"),
        peg$decode(";\x93.# &;\x97"),
        peg$decode(";\x93./ &;\x97.) &2\xDD\"\"6\xDD7\xDE"),
        peg$decode("2\xDF\"\"6\xDF7\xE0.\x89 &2\xE1\"\"6\xE17\xE2.} &2\xE3\"\"6\xE37\xE4.q &2\xE5\"\"6\xE57\xE6.e &2\xE7\"\"6\xE77\xE8.Y &2\xE9\"\"6\xE97\xEA.M &2\xEB\"\"6\xEB7\xEC.A &2\xED\"\"6\xED7\xEE.5 &2\xEF\"\"6\xEF7\xF0.) &2\xF1\"\"6\xF17\xF2"),
        peg$decode("%3\xF3\"\"5)7\xF4/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;-.# &;*/($8%:\xF5%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xF6\"\"5+7\xF7/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;..# &;*/($8%:\xF8%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xF9\"\"5*7\xFA/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;/.# &;*/($8%:\xFB%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xFC\"\"5+7\xFD/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;0.# &;*/($8%:\xFE%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xFF\"\"5,7\u0100/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;1.# &;*/($8%:\u0101%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0102\"\"5+7\u0103/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;2.# &;*/($8%:\u0104%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0105\"\"5$7\u0106/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;4.# &;*/($8%:\u0107%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0108\"\"5%7\u0109/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;).# &;*/($8%:\u010A%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u010B\"\"5'7\u010C/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;5.# &;*/($8%:\u010D%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u010E\"\"5,7\u010F/`#$;\x8E0#*;\x8E&/P$2#\"\"6#7$/A$$;\x8E0#*;\x8E&/1$;6/($8%:\u0110%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0111\"\"5+7\u0112/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;7.# &;*/($8%:\u0113%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0114\"\"5(7\u0115/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;8.# &;*/($8%:\u0116%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0117\"\"5(7\u0118/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;9.# &;*/($8%:\u0119%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u011A\"\"5*7\u011B/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;;.# &;*/($8%:\u011C%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u011D\"\"5,7\u011E/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;;.# &;*/($8%:\u011F%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0120\"\"5-7\u0121/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;;.# &;*/($8%:\u0122%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0123\"\"5+7\u0124/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;;.# &;*/($8%:\u0125%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0126\"\"5&7\u0127/\xAE#$;\x8E0#*;\x8E&/\x9E$2#\"\"6#7$/\x8F$$;\x8E0#*;\x8E&/\x7F$;;/v$$;\x8E0#*;\x8E&/f$;;/]$$;\x8E0#*;\x8E&/M$;;/D$$;\x8E0#*;\x8E&/4$;;/+$8+:\u0128+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u0126\"\"5&7\u0127/\x94#$;\x8E0#*;\x8E&/\x84$2#\"\"6#7$/u$$;\x8E0#*;\x8E&/e$;;/\\$$;\x8E0#*;\x8E&/L$;;/C$$;\x8E0#*;\x8E&/3$;;/*$8):\u0129)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u0126\"\"5&7\u0127/z#$;\x8E0#*;\x8E&/j$2#\"\"6#7$/[$$;\x8E0#*;\x8E&/K$;;/B$$;\x8E0#*;\x8E&/2$;;/)$8':\u012A'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u0126\"\"5&7\u0127/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;;.# &;*/($8%:\u012B%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u012C\"\"5+7\u012D/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;:.# &;*/($8%:\u012E%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u012F\"\"5-7\u0130/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;:.# &;*/($8%:\u0131%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0132\"\"5.7\u0133/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;:.# &;*/($8%:\u0134%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0135\"\"5,7\u0136/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;:.# &;*/($8%:\u0137%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0138\"\"5'7\u0139/\xAE#$;\x8E0#*;\x8E&/\x9E$2#\"\"6#7$/\x8F$$;\x8E0#*;\x8E&/\x7F$;:/v$$;\x8E0#*;\x8E&/f$;:/]$$;\x8E0#*;\x8E&/M$;:/D$$;\x8E0#*;\x8E&/4$;:/+$8+:\u013A+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u0138\"\"5'7\u0139/\x94#$;\x8E0#*;\x8E&/\x84$2#\"\"6#7$/u$$;\x8E0#*;\x8E&/e$;:/\\$$;\x8E0#*;\x8E&/L$;:/C$$;\x8E0#*;\x8E&/3$;:/*$8):\u013B)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u0138\"\"5'7\u0139/z#$;\x8E0#*;\x8E&/j$2#\"\"6#7$/[$$;\x8E0#*;\x8E&/K$;:/B$$;\x8E0#*;\x8E&/2$;:/)$8':\u013C'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u0138\"\"5'7\u0139/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;:.# &;*/($8%:\u013D%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u013E\"\"507\u013F/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;\x93.# &;*/($8%:\u0140%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0141\"\"527\u0142/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;\x93.# &;*/($8%:\u0143%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0144\"\"537\u0145/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;\x93.# &;*/($8%:\u0146%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0147\"\"517\u0148/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;\x93.# &;*/($8%:\u0149%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u014A\"\"5,7\u014B/\xAE#$;\x8E0#*;\x8E&/\x9E$2#\"\"6#7$/\x8F$$;\x8E0#*;\x8E&/\x7F$;\x93/v$$;\x8E0#*;\x8E&/f$;\x93/]$$;\x8E0#*;\x8E&/M$;\x93/D$$;\x8E0#*;\x8E&/4$;\x93/+$8+:\u014C+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u014A\"\"5,7\u014B/\x94#$;\x8E0#*;\x8E&/\x84$2#\"\"6#7$/u$$;\x8E0#*;\x8E&/e$;\x93/\\$$;\x8E0#*;\x8E&/L$;\x93/C$$;\x8E0#*;\x8E&/3$;\x93/*$8):\u014D)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u014A\"\"5,7\u014B/z#$;\x8E0#*;\x8E&/j$2#\"\"6#7$/[$$;\x8E0#*;\x8E&/K$;\x93/B$$;\x8E0#*;\x8E&/2$;\x93/)$8':\u014E'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u014A\"\"5,7\u014B/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;\x93.# &;*/($8%:\u014F%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0150\"\"507\u0151/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;<.# &;*/($8%:\u0152%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0153\"\"527\u0154/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;<.# &;*/($8%:\u0155%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0156\"\"537\u0157/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;<.# &;*/($8%:\u0158%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0159\"\"517\u015A/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;<.# &;*/($8%:\u015B%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u015C\"\"5,7\u015D/\xAE#$;\x8E0#*;\x8E&/\x9E$2#\"\"6#7$/\x8F$$;\x8E0#*;\x8E&/\x7F$;</v$$;\x8E0#*;\x8E&/f$;</]$$;\x8E0#*;\x8E&/M$;</D$$;\x8E0#*;\x8E&/4$;</+$8+:\u015E+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u015C\"\"5,7\u015D/\x94#$;\x8E0#*;\x8E&/\x84$2#\"\"6#7$/u$$;\x8E0#*;\x8E&/e$;</\\$$;\x8E0#*;\x8E&/L$;</C$$;\x8E0#*;\x8E&/3$;</*$8):\u015F)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u015C\"\"5,7\u015D/z#$;\x8E0#*;\x8E&/j$2#\"\"6#7$/[$$;\x8E0#*;\x8E&/K$;</B$$;\x8E0#*;\x8E&/2$;</)$8':\u0160'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u015C\"\"5,7\u015D/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;<.# &;*/($8%:\u0161%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0162\"\"507\u0163/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;).# &;*/($8%:\u0164%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0165\"\"527\u0166/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;).# &;*/($8%:\u0167%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0168\"\"537\u0169/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;).# &;*/($8%:\u016A%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u016B\"\"517\u016C/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;).# &;*/($8%:\u016D%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u016E\"\"5,7\u016F/\xAE#$;\x8E0#*;\x8E&/\x9E$2#\"\"6#7$/\x8F$$;\x8E0#*;\x8E&/\x7F$;)/v$$;\x8E0#*;\x8E&/f$;)/]$$;\x8E0#*;\x8E&/M$;)/D$$;\x8E0#*;\x8E&/4$;)/+$8+:\u0170+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u016E\"\"5,7\u016F/\x94#$;\x8E0#*;\x8E&/\x84$2#\"\"6#7$/u$$;\x8E0#*;\x8E&/e$;)/\\$$;\x8E0#*;\x8E&/L$;)/C$$;\x8E0#*;\x8E&/3$;)/*$8):\u0171)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u016E\"\"5,7\u016F/z#$;\x8E0#*;\x8E&/j$2#\"\"6#7$/[$$;\x8E0#*;\x8E&/K$;)/B$$;\x8E0#*;\x8E&/2$;)/)$8':\u0172'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u016E\"\"5,7\u016F/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;).# &;*/($8%:\u0173%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("2\u0174\"\"6\u01747\u0175.A &2\u0176\"\"6\u01767\u0177.5 &2\u0178\"\"6\u01787\u0179.) &2\u017A\"\"6\u017A7\u017B"),
        peg$decode("%3\u017C\"\"5&7\u017D/\xA8#;c.\" &\"/\x9A$$;\x8E0#*;\x8E&/\x8A$2#\"\"6#7$/{$$;\x8E0#*;\x8E&/k$;\x93/b$$;\x8E0#*;\x8E&/R$;</I$$;\x8E0#*;\x8E&/9$;).\" &\"/+$8*:\u017E*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u04EC &%3\u017C\"\"5&7\u017D/\xA8#;c.\" &\"/\x9A$$;\x8E0#*;\x8E&/\x8A$2#\"\"6#7$/{$$;\x8E0#*;\x8E&/k$;</b$$;\x8E0#*;\x8E&/R$;\x93/I$$;\x8E0#*;\x8E&/9$;).\" &\"/+$8*:\u017F*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0451 &%3\u017C\"\"5&7\u017D/\xA8#;c.\" &\"/\x9A$$;\x8E0#*;\x8E&/\x8A$2#\"\"6#7$/{$$;\x8E0#*;\x8E&/k$;\x93/b$$;\x8E0#*;\x8E&/R$;)/I$$;\x8E0#*;\x8E&/9$;<.\" &\"/+$8*:\u0180*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u03B6 &%3\u017C\"\"5&7\u017D/\xA8#;c.\" &\"/\x9A$$;\x8E0#*;\x8E&/\x8A$2#\"\"6#7$/{$$;\x8E0#*;\x8E&/k$;)/b$$;\x8E0#*;\x8E&/R$;\x93/I$$;\x8E0#*;\x8E&/9$;<.\" &\"/+$8*:\u0181*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u031B &%3\u017C\"\"5&7\u017D/\xA8#;c.\" &\"/\x9A$$;\x8E0#*;\x8E&/\x8A$2#\"\"6#7$/{$$;\x8E0#*;\x8E&/k$;)/b$$;\x8E0#*;\x8E&/R$;</I$$;\x8E0#*;\x8E&/9$;\x93.\" &\"/+$8*:\u0182*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0280 &%3\u017C\"\"5&7\u017D/\xA8#;c.\" &\"/\x9A$$;\x8E0#*;\x8E&/\x8A$2#\"\"6#7$/{$$;\x8E0#*;\x8E&/k$;</b$$;\x8E0#*;\x8E&/R$;)/I$$;\x8E0#*;\x8E&/9$;\x93.\" &\"/+$8*:\u0183*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01E5 &%3\u017C\"\"5&7\u017D/\x7F#;c.\" &\"/q$$;\x8E0#*;\x8E&/a$2#\"\"6#7$/R$$;\x8E0#*;\x8E&/B$;\x93/9$$;\x8E0#*;\x8E&/)$8':\u0184'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0173 &%3\u017C\"\"5&7\u017D/\x7F#;c.\" &\"/q$$;\x8E0#*;\x8E&/a$2#\"\"6#7$/R$$;\x8E0#*;\x8E&/B$;)/9$$;\x8E0#*;\x8E&/)$8':\u0185'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0101 &%3\u017C\"\"5&7\u017D/\x7F#;c.\" &\"/q$$;\x8E0#*;\x8E&/a$2#\"\"6#7$/R$$;\x8E0#*;\x8E&/B$;</9$$;\x8E0#*;\x8E&/)$8':\u0186'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\x8F &%3\u017C\"\"5&7\u017D/\x7F#;c.\" &\"/q$$;\x8E0#*;\x8E&/a$2#\"\"6#7$/R$$;\x8E0#*;\x8E&/B$;*/9$$;\x8E0#*;\x8E&/)$8':\u0187'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0188\"\"507\u0189/f#$;\x8E0#*;\x8E&/V$2#\"\"6#7$/G$$;\x8E0#*;\x8E&/7$;).# &;*/($8%:\u018A%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u018B\"\"5/7\u018C/\x84#$;\x8E0#*;\x8E&/t$2#\"\"6#7$/e$$;\x8E0#*;\x8E&/U$2\u018D\"\"6\u018D7\u018E.; &2\u018F\"\"6\u018F7\u0190./ &2\u0191\"\"6\u01917\u0192.# &;*/($8%:\u0193%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0194\"\"5%7\u0195/r#$;\x8E0#*;\x8E&/b$2#\"\"6#7$/S$$;\x8E0#*;\x8E&/C$;:./ &2\xDD\"\"6\xDD7\xDE.# &;*/($8%:\u0196%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0197\"\"5&7\u0198/r#$;\x8E0#*;\x8E&/b$2#\"\"6#7$/S$$;\x8E0#*;\x8E&/C$;:./ &2\xDD\"\"6\xDD7\xDE.# &;*/($8%:\u0199%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u019A\"\"5*7\u019B/x#$;\x8E0#*;\x8E&/h$2#\"\"6#7$/Y$$;\x8E0#*;\x8E&/I$2\u018D\"\"6\u018D7\u018E./ &2\u018F\"\"6\u018F7\u0190.# &;*/($8%:\u019C%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("4\u019D\"\"5!7\u019E"),
        peg$decode("4\u019F\"\"5!7\u01A0"),
        peg$decode("%2\u01A1\"\"6\u01A17\u01A2/\xA8#%%;j/i#;j.\" &\"/[$;j.\" &\"/M$;j.\" &\"/?$;j.\" &\"/1$;j.\" &\"/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/\"!&,)/H$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/($8#:\u01A7#!!)(#'#(\"'#&'#"),
        peg$decode(";l.G &%2\u01A1\"\"6\u01A17\u01A2/7#4\u01A8\"\"5!7\u01A9/($8\":\u01AA\"! )(\"'#&'#"),
        peg$decode("4\u01AB\"\"5!7\u01AC.) &;k.# &;m"),
        peg$decode("4\u01AD\"\"5!7\u01AE.) &;k.# &;m"),
        peg$decode("%2\u01AF\"\"6\u01AF7\u01B0/\xA7#$4\u01B1\"\"5!7\u01B2.G &%2\u01A1\"\"6\u01A17\u01A2/1#;z/($8\":\u01B3\"! )(\"'#&'#.# &;m0S*4\u01B1\"\"5!7\u01B2.G &%2\u01A1\"\"6\u01A17\u01A2/1#;z/($8\":\u01B3\"! )(\"'#&'#.# &;m&/7$2\u01AF\"\"6\u01AF7\u01B0/($8#:\u01B4#!!)(#'#(\"'#&'#"),
        peg$decode("%2\u01B5\"\"6\u01B57\u01B6/\xA7#$4\u01B7\"\"5!7\u01B8.G &%2\u01A1\"\"6\u01A17\u01A2/1#;z/($8\":\u01B3\"! )(\"'#&'#.# &;m0S*4\u01B7\"\"5!7\u01B8.G &%2\u01A1\"\"6\u01A17\u01A2/1#;z/($8\":\u01B3\"! )(\"'#&'#.# &;m&/7$2\u01B5\"\"6\u01B57\u01B6/($8#:\u01B4#!!)(#'#(\"'#&'#"),
        peg$decode("%2\u01B9\"\"6\u01B97\u01BA/\u011C#$4\u01BB\"\"5!7\u01BC0)*4\u01BB\"\"5!7\u01BC&/\u0100$$2\u01BD\"\"6\u01BD7\u01BE/,#0)*2\u01BD\"\"6\u01BD7\u01BE&&&#/\xDE$$%4\u01BF\"\"5!7\u01C0/a#$4\u01BB\"\"5!7\u01BC0)*4\u01BB\"\"5!7\u01BC&/E$$2\u01BD\"\"6\u01BD7\u01BE/,#0)*2\u01BD\"\"6\u01BD7\u01BE&&&#/#$+#)(#'#(\"'#&'#0q*%4\u01BF\"\"5!7\u01C0/a#$4\u01BB\"\"5!7\u01BC0)*4\u01BB\"\"5!7\u01BC&/E$$2\u01BD\"\"6\u01BD7\u01BE/,#0)*2\u01BD\"\"6\u01BD7\u01BE&&&#/#$+#)(#'#(\"'#&'#&/2$2(\"\"6(7)/#$+%)(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%%2\u01C1\"\"6\u01C17\u01C2.\" &\"/\"!&,)/C#;n/:$$;o0#*;o&/*$8#:\u01C3##\"! )(#'#(\"'#&'#"),
        peg$decode("%$;o/&#0#*;o&&&#/' 8!:\u01C4!! )"),
        peg$decode("%4\u01C5\"\"5!7\u01C6.\" &\"/\xF1#%$45\"\"5!760)*45\"\"5!76&/T#2F\"\"6F7G/E$$45\"\"5!76/,#0)*45\"\"5!76&&&#/#$+#)(#'#(\"'#&'#.< &$45\"\"5!76/,#0)*45\"\"5!76&&&#/{$%2\u01C7\"\"6\u01C77\u01C8/Y#4\u01C5\"\"5!7\u01C6.\" &\"/E$$45\"\"5!76/,#0)*45\"\"5!76&&&#/#$+#)(#'#(\"'#&'#.\" &\"/'$8#:\u01C9# )(#'#(\"'#&'#"),
        peg$decode(";p.# &;q"),
        peg$decode("%$4\u01CA\"\"5!7\u01CB.) &;k.# &;m05*4\u01CA\"\"5!7\u01CB.) &;k.# &;m&/' 8!:\u01C4!! )"),
        peg$decode("$4\u01A5\"\"5!7\u01A6/,#0)*4\u01A5\"\"5!7\u01A6&&&#"),
        peg$decode(";x.\" &\""),
        peg$decode("2\u01CC\"\"6\u01CC7\u01CD.A &2\u01A3\"\"6\u01A37\u01A4.5 &2\u01CE\"\"6\u01CE7\u01CF.) &2\u01D0\"\"6\u01D07\u01D1"),
        peg$decode("3\u01D2\"\"5!7\u01D3.\xB6 &%2\u01A1\"\"6\u01A17\u01A2/\xA6#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x92$2\u01D4\"\"6\u01D47\u01D5.\" &\"/~$2\u01D4\"\"6\u01D47\u01D5.\" &\"/j$2\u01D4\"\"6\u01D47\u01D5.\" &\"/V$4\u01D6\"\"5!7\u01D7/G$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/'$8':\u01D8' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01D9\"\"5!7\u01DA.\xB6 &%2\u01A1\"\"6\u01A17\u01A2/\xA6#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x92$2\u01D4\"\"6\u01D47\u01D5.\" &\"/~$2\u01D4\"\"6\u01D47\u01D5.\" &\"/j$2\u01D4\"\"6\u01D47\u01D5.\" &\"/V$4\u01DB\"\"5!7\u01DC/G$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/'$8':\u01DD' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01DE\"\"5!7\u01DF.\xB6 &%2\u01A1\"\"6\u01A17\u01A2/\xA6#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x92$2\u01D4\"\"6\u01D47\u01D5.\" &\"/~$2\u01D4\"\"6\u01D47\u01D5.\" &\"/j$2\u01D4\"\"6\u01D47\u01D5.\" &\"/V$4\u01E0\"\"5!7\u01E1/G$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/'$8':\u01E2' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01C7\"\"5!7\u01E3.\xB6 &%2\u01A1\"\"6\u01A17\u01A2/\xA6#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x92$2\u01D4\"\"6\u01D47\u01D5.\" &\"/~$2\u01D4\"\"6\u01D47\u01D5.\" &\"/j$2\u01D4\"\"6\u01D47\u01D5.\" &\"/V$4\u01E4\"\"5!7\u01E5/G$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/'$8':\u01E6' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01E7\"\"5!7\u01E8.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u01E9\"\"5!7\u01EA/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01EB\"\"5\"7\u01EC/& 8!:\u01ED! )"),
        peg$decode("3\u01EE\"\"5!7\u01EF.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u01F0\"\"5!7\u01F1/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01F2\"\"5\"7\u01F3/& 8!:\u01F4! )"),
        peg$decode("3\u01F5\"\"5!7\u01F6.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u01F7\"\"5!7\u01F8/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01F9\"\"5\"7\u01FA/& 8!:\u01FB! )"),
        peg$decode("3\u01FC\"\"5!7\u01FD.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u01FE\"\"5!7\u01FF/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0200\"\"5\"7\u0201/& 8!:\u0202! )"),
        peg$decode("3\u0203\"\"5!7\u0204.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u0205\"\"5!7\u0206/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0207\"\"5\"7\u0208/& 8!:\u0209! )"),
        peg$decode("3\u020A\"\"5!7\u020B.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u020C\"\"5!7\u020D/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u020E\"\"5\"7\u020F/& 8!:\u0210! )"),
        peg$decode("3\u0211\"\"5!7\u0212.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u0213\"\"5!7\u0214/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0215\"\"5\"7\u0216/& 8!:\u0217! )"),
        peg$decode("3\u0218\"\"5!7\u0219.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u021A\"\"5!7\u021B/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u021C\"\"5\"7\u021D/& 8!:\u021E! )"),
        peg$decode("3\u021F\"\"5!7\u0220.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u0221\"\"5!7\u0222/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0223\"\"5\"7\u0224/& 8!:\u0225! )"),
        peg$decode("3\u0226\"\"5!7\u0227.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u0228\"\"5!7\u0229/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u022A\"\"5\"7\u022B/& 8!:\u022C! )"),
        peg$decode("3\u022D\"\"5!7\u022E.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u022F\"\"5!7\u0230/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0231\"\"5\"7\u0232/& 8!:\u0233! )"),
        peg$decode("3\u0234\"\"5!7\u0235.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u0236\"\"5!7\u0237/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0238\"\"5\"7\u0239/& 8!:\u023A! )"),
        peg$decode("3\u023B\"\"5!7\u023C.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u023D\"\"5!7\u023E/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u023F\"\"5\"7\u0240/& 8!:\u0241! )"),
        peg$decode("3\u0242\"\"5!7\u0243.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u0244\"\"5!7\u0245/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0246\"\"5\"7\u0247/& 8!:\u0248! )"),
        peg$decode("3\u0249\"\"5!7\u024A.\xC9 &%2\u01A1\"\"6\u01A17\u01A2/\xA2#2\u01D4\"\"6\u01D47\u01D5.\" &\"/\x8E$2\u01D4\"\"6\u01D47\u01D5.\" &\"/z$2\u01D4\"\"6\u01D47\u01D5.\" &\"/f$2\u01D4\"\"6\u01D47\u01D5.\" &\"/R$4\u024B\"\"5!7\u024C/C$2\u01A3\"\"6\u01A37\u01A4.) &4\u01A5\"\"5!7\u01A6.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u024D\"\"5\"7\u024E/& 8!:\u024F! )"),
        peg$decode("<%$;r0#*;r&/,#;x/#$+\")(\"'#&'#=.\" 7\u0250"),
        peg$decode("<%$;r0#*;r&/1#;v/($8\":\u0252\"! )(\"'#&'#=.\" 7\u0251"),
        peg$decode("<%$;r0#*;r&/1#;s/($8\":\u0254\"! )(\"'#&'#=.\" 7\u0253"),
        peg$decode("<%$;r0#*;r&/@#2P\"\"6P7Q/1$;t/($8#:\u0256#! )(#'#(\"'#&'#=.\" 7\u0255"),
        peg$decode("<%$;r0#*;r&/C#;u/:$;~/1$;\x8C/($8$:\u0258$!\")($'#(#'#(\"'#&'#=.\" 7\u0257"),
        peg$decode("<%$;r0#*;r&/C#;u/:$;\x87/1$;\x8C/($8$:1$!\")($'#(#'#(\"'#&'#.\u0191 &%$;r0#*;r&/C#;u/:$;|/1$;\x84/($8$:\u0259$!\")($'#(#'#(\"'#&'#.\u015A &%$;r0#*;r&/C#;u/:$;\x84/1$;\x84/($8$:\u025A$!\")($'#(#'#(\"'#&'#.\u0123 &%$;r0#*;r&/C#;u/:$;\x81/1$;\x85/($8$:\u025B$!\")($'#(#'#(\"'#&'#.\xEC &%$;r0#*;r&/C#;u/:$;\x87/1$;\x8A/($8$:\u025C$!\")($'#(#'#(\"'#&'#.\xB5 &%$;r0#*;r&/C#;u/:$;\x87/1$;|/($8$:\u025D$!\")($'#(#'#(\"'#&'#.~ &%$;r0#*;r&/C#;u/:$;~/1$;\x84/($8$:\u025E$!\")($'#(#'#(\"'#&'#.G &%$;r0#*;r&/6#2\u01D4\"\"6\u01D47\u01D5/'$8\":\u025F\" )(\"'#&'#=.\" 7\u0257"),
        peg$decode("<%$;r0#*;r&/L#;u/C$;}/:$;~/1$;\x7F/($8%:\u0261%!#)(%'#($'#(#'#(\"'#&'#.\xA6 &%$;r0#*;r&/L#;u/C$;\x88/:$;{/1$;}/($8%:\u0262%!#)(%'#($'#(#'#(\"'#&'#.f &%$;r0#*;r&/U#;u/L$;\x7F/C$;\x88/:$;{/1$;}/($8&:\u0263&!$)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0260"),
        peg$decode("<%$;r0#*;r&/C#;u/:$;\x84/1$;\x89/($8$:\u0265$!\")($'#(#'#(\"'#&'#.K &%$;r0#*;r&/:#;u/1$;\x89/($8#:\u0266#!!)(#'#(\"'#&'#=.\" 7\u0264"),
        peg$decode("<%$;r0#*;r&/C#;u/:$;\x80/1$;\x8D/($8$:\u0268$!\")($'#(#'#(\"'#&'#.] &%$;r0#*;r&/L#;u/C$;\x82/:$;\x80/1$;\x8D/($8%:\u0269%!#)(%'#($'#(#'#(\"'#&'#=.\" 7\u0267"),
        peg$decode("<%$;r0#*;r&/@#;u/7$27\"\"6778/($8#:\u026B#!!)(#'#(\"'#&'#=.\" 7\u026A"),
        peg$decode("<%$;r0#*;r&/1#;u/($8\":\u026D\"! )(\"'#&'#=.\" 7\u026C"),
        peg$decode("<%$;r0#*;r&/|#;\x8B/s$;\x88/j$;\x83/a$3\u026F\"\"5!7\u0270/R$;y/I$;v/@$;y/7$22\"\"6273/($8):\u0271)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\x8D &%$;r0#*;r&/|#;\x8B/s$;\x88/j$;\x83/a$3\u026F\"\"5!7\u0270/R$;y/I$;w/@$;y/7$22\"\"6273/($8):\u0271)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u026E"),
        peg$decode("<%$;r0#*;r&/@#;s/7$2\u026F\"\"6\u026F7\u0273/($8#:&#!!)(#'#(\"'#&'#=.\" 7\u0272")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }


    const {initial, inherited} = require('./cascade');

    function extractList(list, index) {
      return list.map(function(element) { return element[index]; });
    }

    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index))
        .filter(function(element) { return element !== null; });
    }

    function buildExpression(head, tail) {
      return tail.reduce(function(result, element) {
        return {
          type: 'Expression',
          operator: element[0],
          left: result,
          right: element[1]
        };
      }, head);
    }

    function extend(a, b) {
      for (var prop in b) {
        a[prop] = b[prop];
      }

      return a;
    }

    function combine(a) {
      return a.reduce(function(obj, next) {
        return extend(obj, next);
      }, {});
    }

    function setTopRightBottomLeft(obj, before, after, t, r, b, l) {
      obj[before + 'Top' + (after || '')] = t;
      obj[before + 'Right' + (after || '')] = r;
      obj[before + 'Bottom' + (after || '')] = b;
      obj[before + 'Left' + (after || '')] = l;
      return obj;
    }

    function setTopRightBottomLeftOr(x, obj, before, after, t, r, b, l) {
      if (!x) return setTopRightBottomLeft(obj, before, after, t, r, b, l);

      x = x.toLowerCase();

      if (x === '-top') obj[before + 'Top' + (after || '')] = t;
      if (x === '-right') obj[before + 'Right' + (after || '')] = r;
      if (x === '-bottom') obj[before + 'Bottom' + (after || '')] = b;
      if (x === '-left') obj[before + 'Left' + (after || '')] = l;

      return obj;
    }

    const colorMap = new Map([
      ['maroon', {r: 128, g: 0, b: 0, a: 1}],
      ['red', {r: 255, g: 0, b: 0, a: 1}],
      ['orange', {r: 255, g: 165, b: 0, a: 1}],
      ['yellow', {r: 255, g: 255, b: 0, a: 1}],
      ['olive', {r: 128, g: 128, b: 0, a: 1}],
      ['purple', {r: 128, g: 0, b: 128, a: 1}],
      ['fuchsia', {r: 255, g: 0, b: 255, a: 1}],
      ['white', {r: 255, g: 255, b: 255, a: 1}],
      ['lime', {r: 0, g: 255, b: 0, a: 1}],
      ['green', {r: 0, g: 128, b: 0, a: 1}],
      ['navy', {r: 0, g: 0, b: 128, a: 1}],
      ['blue', {r: 0, g: 0, b: 255, a: 1}],
      ['aqua', {r: 0, g: 255, b: 255, a: 1}],
      ['teal', {r: 0, g: 128, b: 128, a: 1}],
      ['black', {r: 0, g: 0, b: 0, a: 1}],
      ['silver', {r: 192, g: 192, b: 192, a: 1}],
      ['gray', {r: 128, g: 128, b: 128, a: 1}],
      ['transparent', {r: 255, g: 255, b: 255, a: 0}]
    ]);


  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
