/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { start: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        ";",
        peg$literalExpectation(";", false),
        function(declarationsHead, declarationsTail) { return combine(buildList(declarationsHead, declarationsTail, 2)); },
        ":",
        peg$literalExpectation(":", false),
        function(name, value) {
              let r = {};
              r['_' + name] = value;
              return r;
            },
        function(name) { return name; },
        function(head, tail) { return buildExpression(head, tail); },
        "/",
        peg$literalExpectation("/", false),
        function() { return '/'; },
        ",",
        peg$literalExpectation(",", false),
        function() { return ','; },
        function(quantity) {
              return {
                type: 'Quantity',
                value: quantity.value,
                unit: quantity.unit
              };
            },
        function(value) { return { type: 'String', value: value }; },
        function(value) { return { type: 'URI',    value: value }; },
        function(value) { return value; },
        ")",
        peg$literalExpectation(")", false),
        function(name, params) {
              return { type: 'Function', name: name, params: params };
            },
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        "%",
        peg$literalExpectation("%", false),
        function(component) {
            return Math.max(0, Math.min(100, parseInt(component, 10))) * 1e-2 * 255
          },
        "1",
        peg$literalExpectation("1", false),
        "2",
        peg$literalExpectation("2", false),
        /^[0-4]/,
        peg$classExpectation([["0", "4"]], false, false),
        "25",
        peg$literalExpectation("25", false),
        /^[0-5]/,
        peg$classExpectation([["0", "5"]], false, false),
        function(component) {
            return parseInt(Array.isArray(component) ? component.join('') : component, 10);
          },
        function(a) {
            const component = a.join('');
            return Math.max(0, Math.min(100, parseInt(component, 10))) * 1e-2
          },
        ".",
        peg$literalExpectation(".", false),
        function(a, b, c) {
            const component = (a ? a.join('') : '') + b + c.join('');
            return Math.max(0, Math.min(1, parseFloat(component)));
          },
        function(a) {
            return Math.max(0, Math.min(1, parseInt(a.join(''), 10)))
          },
        "rgba(",
        peg$literalExpectation("rgba(", false),
        function(r, g, b, a) {
            return {r, g, b, a};
          },
        "rgb(",
        peg$literalExpectation("rgb(", false),
        function(r, g, b) {
            return {r, g, b, a: 1};
          },
        "#",
        peg$literalExpectation("#", false),
        /^[a-f0-9]/i,
        peg$classExpectation([["a", "f"], ["0", "9"]], false, true),
        function(r, g, b, a) {
            return {
              r: parseInt(r.join(''), 16),
              g: parseInt(g.join(''), 16),
              b: parseInt(b.join(''), 16),
              a: a ? parseInt(a.join(''), 16) / 255 : 1
            }
          },
        /^[a-f0-9]/,
        peg$classExpectation([["a", "f"], ["0", "9"]], false, false),
        function(r, g, b, a) {
            return {
              r: parseInt(r + r, 16),
              g: parseInt(g + g, 16),
              b: parseInt(b + b, 16),
              a: a ? parseInt(a + a, 16) / 255 : 1
            }
          },
        "inherit",
        peg$literalExpectation("inherit", false),
        "initial",
        peg$literalExpectation("initial", false),
        "xx-small",
        peg$literalExpectation("xx-small", false),
        function() { return { value: 9, unit: 'px' } },
        "x-small",
        peg$literalExpectation("x-small", false),
        function() { return { value: 10, unit: 'px' } },
        "small",
        peg$literalExpectation("small", false),
        function() { return { value: 13, unit: 'px' } },
        "medium",
        peg$literalExpectation("medium", false),
        function() { return { value: 16, unit: 'px' } },
        "large",
        peg$literalExpectation("large", false),
        function() { return { value: 18, unit: 'px' } },
        "x-large",
        peg$literalExpectation("x-large", false),
        function() { return { value: 24, unit: 'px' } },
        "xx-large",
        peg$literalExpectation("xx-large", false),
        function() { return { value: 32, unit: 'px' } },
        "smaller",
        peg$literalExpectation("smaller", false),
        function() { return { value: 1/1.2, unit: 'em' } },
        "larger",
        peg$literalExpectation("larger", false),
        function() { return { value: 1.2, unit: 'em' } },
        function(font_size) { return font_size; },
        "normal",
        peg$literalExpectation("normal", false),
        function(line_height) { return line_height; },
        "italic",
        peg$literalExpectation("italic", false),
        "oblique",
        peg$literalExpectation("oblique", false),
        "bold",
        peg$literalExpectation("bold", false),
        "bolder",
        peg$literalExpectation("bolder", false),
        "lighter",
        peg$literalExpectation("lighter", false),
        /^[1-9]/,
        peg$classExpectation([["1", "9"]], false, false),
        "00",
        peg$literalExpectation("00", false),
        function(n) { return text(); },
        "small-caps",
        peg$literalExpectation("small-caps", false),
        function(family) { return family; },
        function(head, tail) { return buildList(head, tail, 1).join(' '); },
        function(x) {
            const ret = {fontStyle: x[0], fontVariant: x[2]};
            if (x[4]) ret.fontWeight = x[4];
            return ret;
          },
        function(x) {
            const ret = {fontStyle: x[2], fontVariant: x[0]};
            if (x[4]) ret.fontWeight = x[4];
            return ret;
          },
        function(x) {
            const ret = {fontStyle: x[0], fontWeight: x[2]};
            if (x[4]) ret.fontVariant = x[4];
            return ret;
          },
        function(x) {
            const ret = {fontWeight: x[0], fontStyle: x[2]};
            if (x[4]) ret.fontVariant = x[4];
            return ret;
          },
        function(x) {
            const ret = {fontVariant: x[0], fontWeight: x[2]};
            if (x[4]) ret.fontStyle = x[4];
            return ret;
          },
        function(x) {
            const ret = {fontWeight: x[0], fontVariant: x[2]};
            if (x[4]) ret.fontStyle = x[4];
            return ret;
          },
        function(fontWeight) { return {fontWeight}; },
        function(fontVariant) { return {fontVariant}; },
        function(fontStyle) { return {fontStyle}; },
        function(x) {
              const ret = x[0] || {};
              ret.fontSize = x[1];
              if (x[2]) ret.lineHeight = x[2][2];
              ret.fontFamily = [x[3]].concat(x[4] ? extractList(x[4], 2) : []);
              return ret;
            },
        "block",
        peg$literalExpectation("block", false),
        function() { return {outer: 'block', inner: 'flow'}; },
        "inline-block",
        peg$literalExpectation("inline-block", false),
        function() { return {outer: 'inline', inner: 'flow-root'}; },
        "inline",
        peg$literalExpectation("inline", false),
        function() { return {outer: 'inline', inner: 'flow'}; },
        "flow-root",
        peg$literalExpectation("flow-root", false),
        function() { return {outer: 'block', inner: 'flow-root'}; },
        "nowrap",
        peg$literalExpectation("nowrap", false),
        "pre-wrap",
        peg$literalExpectation("pre-wrap", false),
        "pre-line",
        peg$literalExpectation("pre-line", false),
        "pre",
        peg$literalExpectation("pre", false),
        "absolute",
        peg$literalExpectation("absolute", false),
        "relative",
        peg$literalExpectation("relative", false),
        "static",
        peg$literalExpectation("static", false),
        "auto",
        peg$literalExpectation("auto", false),
        "none",
        peg$literalExpectation("none", false),
        "hidden",
        peg$literalExpectation("hidden", false),
        "dotted",
        peg$literalExpectation("dotted", false),
        "dashed",
        peg$literalExpectation("dashed", false),
        "solid",
        peg$literalExpectation("solid", false),
        "double",
        peg$literalExpectation("double", false),
        "groove",
        peg$literalExpectation("groove", false),
        "ridge",
        peg$literalExpectation("ridge", false),
        "inset",
        peg$literalExpectation("inset", false),
        "outset",
        peg$literalExpectation("outset", false),
        "font-size",
        peg$literalExpectation("font-size", true),
        function(fontSize) {
            return {fontSize};
          },
        "line-height",
        peg$literalExpectation("line-height", true),
        function(lineHeight) {
            return {lineHeight};
          },
        "font-style",
        peg$literalExpectation("font-style", true),
        function(fontStyle) {
            return {fontStyle};
          },
        "font-weight",
        peg$literalExpectation("font-weight", true),
        function(fontWeight) {
            return {fontWeight};
          },
        "font-variant",
        peg$literalExpectation("font-variant", true),
        function(fontVariant) {
            return {fontVariant};
          },
        "font-family",
        peg$literalExpectation("font-family", true),
        function(fontFamily) {
            return {fontFamily};
          },
        "font",
        peg$literalExpectation("font", true),
        function(font) {
            return typeof font === "object" ? font : {font};
          },
        "color",
        peg$literalExpectation("color", true),
        function(color) {
            return {color};
          },
        "display",
        peg$literalExpectation("display", true),
        function(display) {
            return {display};
          },
        "white-space",
        peg$literalExpectation("white-space", true),
        function(whiteSpace) {
            return {whiteSpace};
          },
        "tab-size",
        peg$literalExpectation("tab-size", true),
        function(tabSize) {
            return {tabSize};
          },
        "position",
        peg$literalExpectation("position", true),
        function(position) {
            return {position};
          },
        "margin-top",
        peg$literalExpectation("margin-top", true),
        function(marginTop) {
            return {marginTop};
          },
        "margin-right",
        peg$literalExpectation("margin-right", true),
        function(marginRight) {
            return {marginRight};
          },
        "margin-bottom",
        peg$literalExpectation("margin-bottom", true),
        function(marginBottom) {
            return {marginBottom};
          },
        "margin-left",
        peg$literalExpectation("margin-left", true),
        function(marginLeft) {
            return {marginLeft};
          },
        "margin",
        peg$literalExpectation("margin", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'margin', '', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'margin', '', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'margin', '', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'margin', '', s, s, s, s);
          },
        "padding-top",
        peg$literalExpectation("padding-top", true),
        function(paddingTop) {
            return {paddingTop};
          },
        "padding-right",
        peg$literalExpectation("padding-right", true),
        function(paddingRight) {
            return {paddingRight};
          },
        "padding-bottom",
        peg$literalExpectation("padding-bottom", true),
        function(paddingBottom) {
            return {paddingBottom};
          },
        "padding-left",
        peg$literalExpectation("padding-left", true),
        function(paddingLeft) {
            return {paddingLeft};
          },
        "padding",
        peg$literalExpectation("padding", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'padding', '', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'padding', '', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'padding', '', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'padding', '', s, s, s, s);
          },
        "border-top-width",
        peg$literalExpectation("border-top-width", true),
        function(borderTopWidth) {
            return {borderTopWidth};
          },
        "border-right-width",
        peg$literalExpectation("border-right-width", true),
        function(borderRightWidth) {
            return {borderRightWidth};
          },
        "border-bottom-width",
        peg$literalExpectation("border-bottom-width", true),
        function(borderBottomWidth) {
            return {borderBottomWidth};
          },
        "border-left-width",
        peg$literalExpectation("border-left-width", true),
        function(borderLeftWidth) {
            return {borderLeftWidth};
          },
        "border-width",
        peg$literalExpectation("border-width", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'border', 'Width', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'border', 'Width', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'border', 'Width', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'border', 'Width', s, s, s, s);
          },
        "border-top-style",
        peg$literalExpectation("border-top-style", true),
        function(borderTopStyle) {
            return {borderTopStyle};
          },
        "border-right-style",
        peg$literalExpectation("border-right-style", true),
        function(borderRightStyle) {
            return {borderRightStyle};
          },
        "border-bottom-style",
        peg$literalExpectation("border-bottom-style", true),
        function(borderBottomStyle) {
            return {borderBottomStyle};
          },
        "border-left-style",
        peg$literalExpectation("border-left-style", true),
        function(borderLeftStyle) {
            return {borderLeftStyle};
          },
        "border-style",
        peg$literalExpectation("border-style", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'border', 'Style', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'border', 'Style', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'border', 'Style', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'border', 'Style', s, s, s, s);
          },
        "border-top-color",
        peg$literalExpectation("border-top-color", true),
        function(borderTopColor) {
            return {borderTopColor};
          },
        "border-right-color",
        peg$literalExpectation("border-right-color", true),
        function(borderRightColor) {
            return {borderRightColor};
          },
        "border-bottom-color",
        peg$literalExpectation("border-bottom-color", true),
        function(borderBottomColor) {
            return {borderBottomColor};
          },
        "border-left-color",
        peg$literalExpectation("border-left-color", true),
        function(borderLeftColor) {
            return {borderLeftColor};
          },
        "border-color",
        peg$literalExpectation("border-color", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'border', 'Color', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'border', 'Color', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'border', 'Color', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'border', 'Color', s, s, s, s);
          },
        "-top",
        peg$literalExpectation("-top", false),
        "-right",
        peg$literalExpectation("-right", false),
        "-bottom",
        peg$literalExpectation("-bottom", false),
        "-left",
        peg$literalExpectation("-left", false),
        "border",
        peg$literalExpectation("border", true),
        function(t, w, s, c) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (c) setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            return ret;
          },
        function(t, s, w, c) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (c) setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            return ret;
          },
        function(t, w, c, s) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            if (s) setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            return ret;
          },
        function(t, c, w, s) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            if (s) setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            return ret;
          },
        function(t, c, s, w) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (w) setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            return ret;
          },
        function(t, s, c, w) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (w) setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            return ret;
          },
        function(t, w) {
            return setTopRightBottomLeftOr(t, {}, 'border', 'Width', w, w, w, w);
          },
        function(t, c) {
            return setTopRightBottomLeftOr(t, {}, 'border', 'Color', c, c, c, c);
          },
        function(t, s) {
            return setTopRightBottomLeftOr(t, {}, 'border', 'Style', s, s, s, s);
          },
        function(t, i) {
            const ret = setTopRightBottomLeftOr(t, {}, 'border', 'Style', i, i, i, i);
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', i, i, i, i);
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', i, i, i, i);
            return ret;
          },
        "background-color",
        peg$literalExpectation("background-color", true),
        function(backgroundColor) {
            return {backgroundColor};
          },
        "background-clip",
        peg$literalExpectation("background-clip", true),
        "border-box",
        peg$literalExpectation("border-box", false),
        "content-box",
        peg$literalExpectation("content-box", false),
        "padding-box",
        peg$literalExpectation("padding-box", false),
        function(backgroundClip) {
            return {backgroundClip};
          },
        "width",
        peg$literalExpectation("width", true),
        function(width) {
            return {width};
          },
        "height",
        peg$literalExpectation("height", true),
        function(height) {
            return {height};
          },
        "box-sizing",
        peg$literalExpectation("box-sizing", true),
        function(boxSizing) {
            return {boxSizing};
          },
        /^[0-9a-f]/i,
        peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        /^[\x80-\uFFFF]/,
        peg$classExpectation([["\x80", "\uFFFF"]], false, false),
        "\\",
        peg$literalExpectation("\\", false),
        "\r\n",
        peg$literalExpectation("\r\n", false),
        /^[ \t\r\n\f]/,
        peg$classExpectation([" ", "\t", "\r", "\n", "\f"], false, false),
        function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        /^[^\r\n\f0-9a-f]/i,
        peg$classExpectation(["\r", "\n", "\f", ["0", "9"], ["a", "f"]], true, true),
        function(ch) { return ch; },
        /^[_a-z]/i,
        peg$classExpectation(["_", ["a", "z"]], false, true),
        /^[_a-z0-9\-]/i,
        peg$classExpectation(["_", ["a", "z"], ["0", "9"], "-"], false, true),
        "\"",
        peg$literalExpectation("\"", false),
        /^[^\n\r\f\\"]/,
        peg$classExpectation(["\n", "\r", "\f", "\\", "\""], true, false),
        function(nl) { return ''; },
        function(chars) {
              return chars.join('');
            },
        "'",
        peg$literalExpectation("'", false),
        /^[^\n\r\f\\']/,
        peg$classExpectation(["\n", "\r", "\f", "\\", "'"], true, false),
        "/*",
        peg$literalExpectation("/*", false),
        /^[^*]/,
        peg$classExpectation(["*"], true, false),
        "*",
        peg$literalExpectation("*", false),
        /^[^\/*]/,
        peg$classExpectation(["/", "*"], true, false),
        "-",
        peg$literalExpectation("-", false),
        function(prefix, start, chars) {
              return prefix + start + chars.join('');
            },
        function(chars) { return chars.join(''); },
        /^[+\-]/,
        peg$classExpectation(["+", "-"], false, false),
        "e",
        peg$literalExpectation("e", false),
        function() {
              return parseFloat(text());
            },
        /^[!#$%&*-[\]-~]/,
        peg$classExpectation(["!", "#", "$", "%", "&", ["*", "["], ["]", "~"]], false, false),
        "\n",
        peg$literalExpectation("\n", false),
        "\r",
        peg$literalExpectation("\r", false),
        "\f",
        peg$literalExpectation("\f", false),
        "a",
        peg$literalExpectation("a", true),
        "0",
        peg$literalExpectation("0", false),
        /^[Aa]/,
        peg$classExpectation(["A", "a"], false, false),
        function() { return 'a'; },
        "c",
        peg$literalExpectation("c", true),
        /^[Cc]/,
        peg$classExpectation(["C", "c"], false, false),
        function() { return 'c'; },
        "d",
        peg$literalExpectation("d", true),
        /^[Dd]/,
        peg$classExpectation(["D", "d"], false, false),
        function() { return 'd'; },
        peg$literalExpectation("e", true),
        /^[Ee]/,
        peg$classExpectation(["E", "e"], false, false),
        function() { return 'e'; },
        "g",
        peg$literalExpectation("g", true),
        /^[Gg]/,
        peg$classExpectation(["G", "g"], false, false),
        "\\g",
        peg$literalExpectation("\\g", true),
        function() { return 'g'; },
        "h",
        peg$literalExpectation("h", true),
        /^[Hh]/,
        peg$classExpectation(["H", "h"], false, false),
        "\\h",
        peg$literalExpectation("\\h", true),
        function() { return 'h'; },
        "i",
        peg$literalExpectation("i", true),
        /^[Ii]/,
        peg$classExpectation(["I", "i"], false, false),
        "\\i",
        peg$literalExpectation("\\i", true),
        function() { return 'i'; },
        "k",
        peg$literalExpectation("k", true),
        /^[Kk]/,
        peg$classExpectation(["K", "k"], false, false),
        "\\k",
        peg$literalExpectation("\\k", true),
        function() { return 'k'; },
        "l",
        peg$literalExpectation("l", true),
        /^[Ll]/,
        peg$classExpectation(["L", "l"], false, false),
        "\\l",
        peg$literalExpectation("\\l", true),
        function() { return 'l'; },
        "m",
        peg$literalExpectation("m", true),
        /^[Mm]/,
        peg$classExpectation(["M", "m"], false, false),
        "\\m",
        peg$literalExpectation("\\m", true),
        function() { return 'm'; },
        "n",
        peg$literalExpectation("n", true),
        /^[Nn]/,
        peg$classExpectation(["N", "n"], false, false),
        "\\n",
        peg$literalExpectation("\\n", true),
        function() { return 'n'; },
        "o",
        peg$literalExpectation("o", true),
        /^[Oo]/,
        peg$classExpectation(["O", "o"], false, false),
        "\\o",
        peg$literalExpectation("\\o", true),
        function() { return 'o'; },
        "p",
        peg$literalExpectation("p", true),
        /^[Pp]/,
        peg$classExpectation(["P", "p"], false, false),
        "\\p",
        peg$literalExpectation("\\p", true),
        function() { return 'p'; },
        "r",
        peg$literalExpectation("r", true),
        /^[Rr]/,
        peg$classExpectation(["R", "r"], false, false),
        "\\r",
        peg$literalExpectation("\\r", true),
        function() { return 'r'; },
        "s",
        peg$literalExpectation("s", true),
        /^[Ss]/,
        peg$classExpectation(["S", "s"], false, false),
        "\\s",
        peg$literalExpectation("\\s", true),
        function() { return 's'; },
        "t",
        peg$literalExpectation("t", true),
        /^[Tt]/,
        peg$classExpectation(["T", "t"], false, false),
        "\\t",
        peg$literalExpectation("\\t", true),
        function() { return 't'; },
        "u",
        peg$literalExpectation("u", true),
        /^[Uu]/,
        peg$classExpectation(["U", "u"], false, false),
        "\\u",
        peg$literalExpectation("\\u", true),
        function() { return 'u'; },
        "x",
        peg$literalExpectation("x", true),
        /^[Xx]/,
        peg$classExpectation(["X", "x"], false, false),
        "\\x",
        peg$literalExpectation("\\x", true),
        function() { return 'x'; },
        "z",
        peg$literalExpectation("z", true),
        /^[Zz]/,
        peg$classExpectation(["Z", "z"], false, false),
        "\\z",
        peg$literalExpectation("\\z", true),
        function() { return 'z'; },
        peg$otherExpectation("whitespace"),
        peg$otherExpectation("string"),
        function(string) { return string; },
        peg$otherExpectation("identifier"),
        function(ident) { return ident; },
        peg$otherExpectation("hash"),
        function(name) { return '#' + name; },
        peg$otherExpectation("length"),
        function(value) { return { value: value, unit: 'em' }; },
        function(value) { return { value: value, unit: 'ex' }; },
        function(value) { return { value: value, unit: 'px' }; },
        function(value) { return { value: value, unit: 'cm' }; },
        function(value) { return { value: value, unit: 'mm' }; },
        function(value) { return { value: value, unit: 'in' }; },
        function(value) { return { value: value, unit: 'pt' }; },
        function(value) { return { value: value, unit: 'pc' }; },
        function() { return { value: 0, unit: 'px' }; },
        peg$otherExpectation("angle"),
        function(value) { return { value: value, unit: 'deg'  }; },
        function(value) { return { value: value, unit: 'rad'  }; },
        function(value) { return { value: value, unit: 'grad' }; },
        peg$otherExpectation("time"),
        function(value) { return { value: value, unit: 'ms' }; },
        function(value) { return { value: value, unit: 's'  }; },
        peg$otherExpectation("frequency"),
        function(value) { return { value: value, unit: 'hz' }; },
        function(value) { return { value: value, unit: 'kh' }; },
        peg$otherExpectation("percentage"),
        function(value) { return { value: value, unit: '%' }; },
        peg$otherExpectation("number"),
        function(value) { return { value: value, unit: null }; },
        peg$otherExpectation("uri"),
        "(",
        peg$literalExpectation("(", true),
        function(url) { return url; },
        peg$otherExpectation("function"),
        peg$literalExpectation("(", false)
      ],

      peg$bytecode = [
        peg$decode("%$;\x8C0#*;\x8C&/\xA3#;!.\" &\"/\x95$$%2 \"\"6 7!/A#$;\x8C0#*;\x8C&/1$;!.\" &\"/#$+#)(#'#(\"'#&'#0Q*%2 \"\"6 7!/A#$;\x8C0#*;\x8C&/1$;!.\" &\"/#$+#)(#'#(\"'#&'#&/)$8#:\"#\"! )(#'#(\"'#&'#"),
        peg$decode(";<.\u0157 &;=.\u0151 &;>.\u014B &;?.\u0145 &;@.\u013F &;A.\u0139 &;B.\u0133 &;C.\u012D &;D.\u0127 &;E.\u0121 &;F.\u011B &;G.\u0115 &;H.\u010F &;I.\u0109 &;J.\u0103 &;K.\xFD &;L.\xF7 &;M.\xF1 &;N.\xEB &;O.\xE5 &;P.\xDF &;Q.\xD9 &;R.\xD3 &;S.\xCD &;T.\xC7 &;U.\xC1 &;V.\xBB &;W.\xB5 &;X.\xAF &;Y.\xA9 &;Z.\xA3 &;[.\x9D &;\\.\x97 &;].\x91 &;^.\x8B &;_.\x85 &;`.\x7F &;b.y &;e.s &;f.m &;g.g &;c.a &;d.[ &%;\"/Q#2#\"\"6#7$/B$$;\x8C0#*;\x8C&/2$;#/)$8$:%$\"# )($'#(#'#(\"'#&'#"),
        peg$decode("%;\x8E/8#$;\x8C0#*;\x8C&/($8\":&\"!!)(\"'#&'#"),
        peg$decode("%;%/i#$%;$.\" &\"/,#;%/#$+\")(\"'#&'#0;*%;$.\" &\"/,#;%/#$+\")(\"'#&'#&/)$8\":'\"\"! )(\"'#&'#"),
        peg$decode("%2(\"\"6(7)/7#$;\x8C0#*;\x8C&/'$8\":*\" )(\"'#&'#.G &%2+\"\"6+7,/7#$;\x8C0#*;\x8C&/'$8\":-\" )(\"'#&'#"),
        peg$decode("%;\x96.G &;\x92.A &;\x90.; &;\x91.5 &;\x93./ &;\x94.) &;\x95.# &;\x97/8#$;\x8C0#*;\x8C&/($8\":.\"!!)(\"'#&'#.\x98 &%;\x8D/8#$;\x8C0#*;\x8C&/($8\":/\"!!)(\"'#&'#.s &%;\x98/8#$;\x8C0#*;\x8C&/($8\":0\"!!)(\"'#&'#.N &;&.H &;).B &%;\x8E/8#$;\x8C0#*;\x8C&/($8\":1\"!!)(\"'#&'#"),
        peg$decode("%;\x99/a#$;\x8C0#*;\x8C&/Q$;#/H$22\"\"6273/9$$;\x8C0#*;\x8C&/)$8%:4%\"$\")(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%$45\"\"5!76/,#0)*45\"\"5!76&&&#/7#27\"\"6778/($8\":9\"!!)(\"'#&'#.\xE7 &%%2:\"\"6:7;/A#45\"\"5!76/2$45\"\"5!76/#$+#)(#'#(\"'#&'#.\xA7 &%2<\"\"6<7=/A#4>\"\"5!7?/2$45\"\"5!76/#$+#)(#'#(\"'#&'#.s &%2@\"\"6@7A/2#4B\"\"5!7C/#$+\")(\"'#&'#.N &%45\"\"5!76/2#45\"\"5!76/#$+\")(\"'#&'#.) &45\"\"5!76/' 8!:D!! )"),
        peg$decode("%$45\"\"5!76/,#0)*45\"\"5!76&&&#/7#27\"\"6778/($8\":E\"!!)(\"'#&'#.\xA3 &%$45\"\"5!760)*45\"\"5!76&/[#2F\"\"6F7G/L$$45\"\"5!76/,#0)*45\"\"5!76&&&#/*$8#:H##\"! )(#'#(\"'#&'#.H &%$45\"\"5!76/,#0)*45\"\"5!76&&&#/' 8!:I!! )"),
        peg$decode("%$;p0#*;p&/\u011A#2J\"\"6J7K/\u010B$$;\x8C0#*;\x8C&/\xFB$;'/\xF2$$;\x8C0#*;\x8C&/\xE2$2+\"\"6+7,/\xD3$$;\x8C0#*;\x8C&/\xC3$;'/\xBA$$;\x8C0#*;\x8C&/\xAA$2+\"\"6+7,/\x9B$$;\x8C0#*;\x8C&/\x8B$;'/\x82$$;\x8C0#*;\x8C&/r$2+\"\"6+7,/c$$;\x8C0#*;\x8C&/S$;(/J$$;\x8C0#*;\x8C&/:$22\"\"6273/+$82:L2$.*&\")(2'#(1'#(0'#(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0234 &%$;p0#*;p&/\xE1#2M\"\"6M7N/\xD2$$;\x8C0#*;\x8C&/\xC2$;'/\xB9$$;\x8C0#*;\x8C&/\xA9$2+\"\"6+7,/\x9A$$;\x8C0#*;\x8C&/\x8A$;'/\x81$$;\x8C0#*;\x8C&/q$2+\"\"6+7,/b$$;\x8C0#*;\x8C&/R$;'/I$$;\x8C0#*;\x8C&/9$22\"\"6273/*$8.:O.#*&\")(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u015F &%$;p0#*;p&/\xDF#2P\"\"6P7Q/\xD0$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#/\xA8$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#/\x80$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#/X$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#.\" &\"/+$8&:T&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\x8C &%$;p0#*;p&/{#2P\"\"6P7Q/l$4R\"\"5!7S/]$4R\"\"5!7S/N$4U\"\"5!7V/?$4R\"\"5!7S.\" &\"/+$8&:W&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("2X\"\"6X7Y.) &2Z\"\"6Z7["),
        peg$decode("%2\\\"\"6\\7]/& 8!:^! ).\xA7 &%2_\"\"6_7`/& 8!:a! ).\x90 &%2b\"\"6b7c/& 8!:d! ).y &%2e\"\"6e7f/& 8!:g! ).b &%2h\"\"6h7i/& 8!:j! ).K &%2k\"\"6k7l/& 8!:m! ).4 &%2n\"\"6n7o/& 8!:p! )"),
        peg$decode("%2q\"\"6q7r/& 8!:s! ).: &%2t\"\"6t7u/& 8!:v! ).# &;\x90"),
        peg$decode("%;,./ &;+.) &;\x92.# &;\x96/8#$;\x8C0#*;\x8C&/($8\":w\"!!)(\"'#&'#"),
        peg$decode("%2x\"\"6x7y./ &;\x97.) &;\x92.# &;\x96/8#$;\x8C0#*;\x8C&/($8\":z\"!!)(\"'#&'#"),
        peg$decode("2x\"\"6x7y.5 &2{\"\"6{7|.) &2}\"\"6}7~"),
        peg$decode("2x\"\"6x7y.k &2\x7F\"\"6\x7F7\x80._ &2\x81\"\"6\x817\x82.S &2\x83\"\"6\x837\x84.G &%4\x85\"\"5!7\x86/7#2\x87\"\"6\x877\x88/($8\":\x89\"!!)(\"'#&'#"),
        peg$decode("2x\"\"6x7y.) &2\x8A\"\"6\x8A7\x8B"),
        peg$decode("%;\x8D/8#$;\x8C0#*;\x8C&/($8\":\x8C\"!!)(\"'#&'#.w &%;q/m#$%$;\x8C0#*;\x8C&/,#;q/#$+\")(\"'#&'#0=*%$;\x8C0#*;\x8C&/,#;q/#$+\")(\"'#&'#&/)$8\":\x8D\"\"! )(\"'#&'#"),
        peg$decode("%%;//j#$;\x8C0#*;\x8C&/Z$;1/Q$$;\x8C0#*;\x8C&/A$;0.\" &\"/3$$;\x8C0#*;\x8C&/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/' 8!:\x8E!! ).\u027B &%%;1/j#$;\x8C0#*;\x8C&/Z$;//Q$$;\x8C0#*;\x8C&/A$;0.\" &\"/3$$;\x8C0#*;\x8C&/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/' 8!:\x8F!! ).\u0218 &%%;//j#$;\x8C0#*;\x8C&/Z$;0/Q$$;\x8C0#*;\x8C&/A$;1.\" &\"/3$$;\x8C0#*;\x8C&/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/' 8!:\x90!! ).\u01B5 &%%;0/j#$;\x8C0#*;\x8C&/Z$;//Q$$;\x8C0#*;\x8C&/A$;1.\" &\"/3$$;\x8C0#*;\x8C&/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/' 8!:\x91!! ).\u0152 &%%;1/j#$;\x8C0#*;\x8C&/Z$;0/Q$$;\x8C0#*;\x8C&/A$;/.\" &\"/3$$;\x8C0#*;\x8C&/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/' 8!:\x92!! ).\xEF &%%;0/j#$;\x8C0#*;\x8C&/Z$;1/Q$$;\x8C0#*;\x8C&/A$;/.\" &\"/3$$;\x8C0#*;\x8C&/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/' 8!:\x93!! ).\x8C &%;0/8#$;\x8C0#*;\x8C&/($8\":\x94\"!!)(\"'#&'#.g &%;1/8#$;\x8C0#*;\x8C&/($8\":\x95\"!!)(\"'#&'#.B &%;//8#$;\x8C0#*;\x8C&/($8\":\x96\"!!)(\"'#&'#"),
        peg$decode("%%;3/\xCE#;-/\xC5$%2(\"\"6(7)/<#$;\x8C0#*;\x8C&/,$;./#$+#)(#'#(\"'#&'#.\" &\"/\x8E$;2/\x85$$%2+\"\"6+7,/<#$;\x8C0#*;\x8C&/,$;2/#$+#)(#'#(\"'#&'#0L*%2+\"\"6+7,/<#$;\x8C0#*;\x8C&/,$;2/#$+#)(#'#(\"'#&'#&/#$+%)(%'#($'#(#'#(\"'#&'#/' 8!:\x97!! )"),
        peg$decode("%2\x98\"\"6\x987\x99/& 8!:\x9A! ).b &%2\x9B\"\"6\x9B7\x9C/& 8!:\x9D! ).K &%2\x9E\"\"6\x9E7\x9F/& 8!:\xA0! ).4 &%2\xA1\"\"6\xA17\xA2/& 8!:\xA3! )"),
        peg$decode("2x\"\"6x7y.M &2\xA4\"\"6\xA47\xA5.A &2\xA6\"\"6\xA67\xA7.5 &2\xA8\"\"6\xA87\xA9.) &2\xAA\"\"6\xAA7\xAB"),
        peg$decode(";\x92.# &;\x97"),
        peg$decode("2\xAC\"\"6\xAC7\xAD.5 &2\xAE\"\"6\xAE7\xAF.) &2\xB0\"\"6\xB07\xB1"),
        peg$decode(";\x92.# &;\x96"),
        peg$decode(";\x92./ &;\x96.) &2\xB2\"\"6\xB27\xB3"),
        peg$decode("2\xB4\"\"6\xB47\xB5.\x89 &2\xB6\"\"6\xB67\xB7.} &2\xB8\"\"6\xB87\xB9.q &2\xBA\"\"6\xBA7\xBB.e &2\xBC\"\"6\xBC7\xBD.Y &2\xBE\"\"6\xBE7\xBF.M &2\xC0\"\"6\xC07\xC1.A &2\xC2\"\"6\xC27\xC3.5 &2\xC4\"\"6\xC47\xC5.) &2\xC6\"\"6\xC67\xC7"),
        peg$decode("%3\xC8\"\"5)7\xC9/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;-.# &;*/($8%:\xCA%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xCB\"\"5+7\xCC/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;..# &;*/($8%:\xCD%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xCE\"\"5*7\xCF/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;/.# &;*/($8%:\xD0%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xD1\"\"5+7\xD2/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;0.# &;*/($8%:\xD3%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xD4\"\"5,7\xD5/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;1.# &;*/($8%:\xD6%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xD7\"\"5+7\xD8/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;2.# &;*/($8%:\xD9%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xDA\"\"5$7\xDB/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;4.# &;*/($8%:\xDC%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xDD\"\"5%7\xDE/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;).# &;*/($8%:\xDF%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xE0\"\"5'7\xE1/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;5.# &;*/($8%:\xE2%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xE3\"\"5+7\xE4/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;6.# &;*/($8%:\xE5%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xE6\"\"5(7\xE7/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;7.# &;*/($8%:\xE8%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xE9\"\"5(7\xEA/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;8.# &;*/($8%:\xEB%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xEC\"\"5*7\xED/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;9.# &;*/($8%:\xEE%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xEF\"\"5,7\xF0/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;9.# &;*/($8%:\xF1%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xF2\"\"5-7\xF3/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;9.# &;*/($8%:\xF4%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xF5\"\"5+7\xF6/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;9.# &;*/($8%:\xF7%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xF8\"\"5&7\xF9/\xAE#$;\x8C0#*;\x8C&/\x9E$2#\"\"6#7$/\x8F$$;\x8C0#*;\x8C&/\x7F$;:/v$$;\x8C0#*;\x8C&/f$;:/]$$;\x8C0#*;\x8C&/M$;:/D$$;\x8C0#*;\x8C&/4$;:/+$8+:\xFA+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\xF8\"\"5&7\xF9/\x94#$;\x8C0#*;\x8C&/\x84$2#\"\"6#7$/u$$;\x8C0#*;\x8C&/e$;:/\\$$;\x8C0#*;\x8C&/L$;:/C$$;\x8C0#*;\x8C&/3$;:/*$8):\xFB)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\xF8\"\"5&7\xF9/z#$;\x8C0#*;\x8C&/j$2#\"\"6#7$/[$$;\x8C0#*;\x8C&/K$;:/B$$;\x8C0#*;\x8C&/2$;:/)$8':\xFC'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\xF8\"\"5&7\xF9/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;:.# &;*/($8%:\xFD%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\xFE\"\"5+7\xFF/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;9.# &;*/($8%:\u0100%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0101\"\"5-7\u0102/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;9.# &;*/($8%:\u0103%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0104\"\"5.7\u0105/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;9.# &;*/($8%:\u0106%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0107\"\"5,7\u0108/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;9.# &;*/($8%:\u0109%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u010A\"\"5'7\u010B/\xAE#$;\x8C0#*;\x8C&/\x9E$2#\"\"6#7$/\x8F$$;\x8C0#*;\x8C&/\x7F$;9/v$$;\x8C0#*;\x8C&/f$;9/]$$;\x8C0#*;\x8C&/M$;9/D$$;\x8C0#*;\x8C&/4$;9/+$8+:\u010C+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u010A\"\"5'7\u010B/\x94#$;\x8C0#*;\x8C&/\x84$2#\"\"6#7$/u$$;\x8C0#*;\x8C&/e$;9/\\$$;\x8C0#*;\x8C&/L$;9/C$$;\x8C0#*;\x8C&/3$;9/*$8):\u010D)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u010A\"\"5'7\u010B/z#$;\x8C0#*;\x8C&/j$2#\"\"6#7$/[$$;\x8C0#*;\x8C&/K$;9/B$$;\x8C0#*;\x8C&/2$;9/)$8':\u010E'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u010A\"\"5'7\u010B/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;9.# &;*/($8%:\u010F%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0110\"\"507\u0111/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;\x92.# &;*/($8%:\u0112%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0113\"\"527\u0114/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;\x92.# &;*/($8%:\u0115%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0116\"\"537\u0117/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;\x92.# &;*/($8%:\u0118%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0119\"\"517\u011A/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;\x92.# &;*/($8%:\u011B%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u011C\"\"5,7\u011D/\xAE#$;\x8C0#*;\x8C&/\x9E$2#\"\"6#7$/\x8F$$;\x8C0#*;\x8C&/\x7F$;\x92/v$$;\x8C0#*;\x8C&/f$;\x92/]$$;\x8C0#*;\x8C&/M$;\x92/D$$;\x8C0#*;\x8C&/4$;\x92/+$8+:\u011E+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u011C\"\"5,7\u011D/\x94#$;\x8C0#*;\x8C&/\x84$2#\"\"6#7$/u$$;\x8C0#*;\x8C&/e$;\x92/\\$$;\x8C0#*;\x8C&/L$;\x92/C$$;\x8C0#*;\x8C&/3$;\x92/*$8):\u011F)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u011C\"\"5,7\u011D/z#$;\x8C0#*;\x8C&/j$2#\"\"6#7$/[$$;\x8C0#*;\x8C&/K$;\x92/B$$;\x8C0#*;\x8C&/2$;\x92/)$8':\u0120'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u011C\"\"5,7\u011D/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;\x92.# &;*/($8%:\u0121%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0122\"\"507\u0123/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;;.# &;*/($8%:\u0124%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0125\"\"527\u0126/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;;.# &;*/($8%:\u0127%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0128\"\"537\u0129/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;;.# &;*/($8%:\u012A%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u012B\"\"517\u012C/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;;.# &;*/($8%:\u012D%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u012E\"\"5,7\u012F/\xAE#$;\x8C0#*;\x8C&/\x9E$2#\"\"6#7$/\x8F$$;\x8C0#*;\x8C&/\x7F$;;/v$$;\x8C0#*;\x8C&/f$;;/]$$;\x8C0#*;\x8C&/M$;;/D$$;\x8C0#*;\x8C&/4$;;/+$8+:\u0130+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u012E\"\"5,7\u012F/\x94#$;\x8C0#*;\x8C&/\x84$2#\"\"6#7$/u$$;\x8C0#*;\x8C&/e$;;/\\$$;\x8C0#*;\x8C&/L$;;/C$$;\x8C0#*;\x8C&/3$;;/*$8):\u0131)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u012E\"\"5,7\u012F/z#$;\x8C0#*;\x8C&/j$2#\"\"6#7$/[$$;\x8C0#*;\x8C&/K$;;/B$$;\x8C0#*;\x8C&/2$;;/)$8':\u0132'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u012E\"\"5,7\u012F/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;;.# &;*/($8%:\u0133%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0134\"\"507\u0135/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;).# &;*/($8%:\u0136%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0137\"\"527\u0138/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;).# &;*/($8%:\u0139%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u013A\"\"537\u013B/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;).# &;*/($8%:\u013C%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u013D\"\"517\u013E/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;).# &;*/($8%:\u013F%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0140\"\"5,7\u0141/\xAE#$;\x8C0#*;\x8C&/\x9E$2#\"\"6#7$/\x8F$$;\x8C0#*;\x8C&/\x7F$;)/v$$;\x8C0#*;\x8C&/f$;)/]$$;\x8C0#*;\x8C&/M$;)/D$$;\x8C0#*;\x8C&/4$;)/+$8+:\u0142+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u0140\"\"5,7\u0141/\x94#$;\x8C0#*;\x8C&/\x84$2#\"\"6#7$/u$$;\x8C0#*;\x8C&/e$;)/\\$$;\x8C0#*;\x8C&/L$;)/C$$;\x8C0#*;\x8C&/3$;)/*$8):\u0143)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u0140\"\"5,7\u0141/z#$;\x8C0#*;\x8C&/j$2#\"\"6#7$/[$$;\x8C0#*;\x8C&/K$;)/B$$;\x8C0#*;\x8C&/2$;)/)$8':\u0144'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u0140\"\"5,7\u0141/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;).# &;*/($8%:\u0145%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("2\u0146\"\"6\u01467\u0147.A &2\u0148\"\"6\u01487\u0149.5 &2\u014A\"\"6\u014A7\u014B.) &2\u014C\"\"6\u014C7\u014D"),
        peg$decode("%3\u014E\"\"5&7\u014F/\xA8#;a.\" &\"/\x9A$$;\x8C0#*;\x8C&/\x8A$2#\"\"6#7$/{$$;\x8C0#*;\x8C&/k$;\x92/b$$;\x8C0#*;\x8C&/R$;;/I$$;\x8C0#*;\x8C&/9$;).\" &\"/+$8*:\u0150*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u04EC &%3\u014E\"\"5&7\u014F/\xA8#;a.\" &\"/\x9A$$;\x8C0#*;\x8C&/\x8A$2#\"\"6#7$/{$$;\x8C0#*;\x8C&/k$;;/b$$;\x8C0#*;\x8C&/R$;\x92/I$$;\x8C0#*;\x8C&/9$;).\" &\"/+$8*:\u0151*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0451 &%3\u014E\"\"5&7\u014F/\xA8#;a.\" &\"/\x9A$$;\x8C0#*;\x8C&/\x8A$2#\"\"6#7$/{$$;\x8C0#*;\x8C&/k$;\x92/b$$;\x8C0#*;\x8C&/R$;)/I$$;\x8C0#*;\x8C&/9$;;.\" &\"/+$8*:\u0152*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u03B6 &%3\u014E\"\"5&7\u014F/\xA8#;a.\" &\"/\x9A$$;\x8C0#*;\x8C&/\x8A$2#\"\"6#7$/{$$;\x8C0#*;\x8C&/k$;)/b$$;\x8C0#*;\x8C&/R$;\x92/I$$;\x8C0#*;\x8C&/9$;;.\" &\"/+$8*:\u0153*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u031B &%3\u014E\"\"5&7\u014F/\xA8#;a.\" &\"/\x9A$$;\x8C0#*;\x8C&/\x8A$2#\"\"6#7$/{$$;\x8C0#*;\x8C&/k$;)/b$$;\x8C0#*;\x8C&/R$;;/I$$;\x8C0#*;\x8C&/9$;\x92.\" &\"/+$8*:\u0154*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0280 &%3\u014E\"\"5&7\u014F/\xA8#;a.\" &\"/\x9A$$;\x8C0#*;\x8C&/\x8A$2#\"\"6#7$/{$$;\x8C0#*;\x8C&/k$;;/b$$;\x8C0#*;\x8C&/R$;)/I$$;\x8C0#*;\x8C&/9$;\x92.\" &\"/+$8*:\u0155*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01E5 &%3\u014E\"\"5&7\u014F/\x7F#;a.\" &\"/q$$;\x8C0#*;\x8C&/a$2#\"\"6#7$/R$$;\x8C0#*;\x8C&/B$;\x92/9$$;\x8C0#*;\x8C&/)$8':\u0156'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0173 &%3\u014E\"\"5&7\u014F/\x7F#;a.\" &\"/q$$;\x8C0#*;\x8C&/a$2#\"\"6#7$/R$$;\x8C0#*;\x8C&/B$;)/9$$;\x8C0#*;\x8C&/)$8':\u0157'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0101 &%3\u014E\"\"5&7\u014F/\x7F#;a.\" &\"/q$$;\x8C0#*;\x8C&/a$2#\"\"6#7$/R$$;\x8C0#*;\x8C&/B$;;/9$$;\x8C0#*;\x8C&/)$8':\u0158'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\x8F &%3\u014E\"\"5&7\u014F/\x7F#;a.\" &\"/q$$;\x8C0#*;\x8C&/a$2#\"\"6#7$/R$$;\x8C0#*;\x8C&/B$;*/9$$;\x8C0#*;\x8C&/)$8':\u0159'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u015A\"\"507\u015B/f#$;\x8C0#*;\x8C&/V$2#\"\"6#7$/G$$;\x8C0#*;\x8C&/7$;).# &;*/($8%:\u015C%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u015D\"\"5/7\u015E/\x84#$;\x8C0#*;\x8C&/t$2#\"\"6#7$/e$$;\x8C0#*;\x8C&/U$2\u015F\"\"6\u015F7\u0160.; &2\u0161\"\"6\u01617\u0162./ &2\u0163\"\"6\u01637\u0164.# &;*/($8%:\u0165%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0166\"\"5%7\u0167/r#$;\x8C0#*;\x8C&/b$2#\"\"6#7$/S$$;\x8C0#*;\x8C&/C$;9./ &2\xB2\"\"6\xB27\xB3.# &;*/($8%:\u0168%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0169\"\"5&7\u016A/r#$;\x8C0#*;\x8C&/b$2#\"\"6#7$/S$$;\x8C0#*;\x8C&/C$;9./ &2\xB2\"\"6\xB27\xB3.# &;*/($8%:\u016B%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u016C\"\"5*7\u016D/x#$;\x8C0#*;\x8C&/h$2#\"\"6#7$/Y$$;\x8C0#*;\x8C&/I$2\u015F\"\"6\u015F7\u0160./ &2\u0161\"\"6\u01617\u0162.# &;*/($8%:\u016E%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("4\u016F\"\"5!7\u0170"),
        peg$decode("4\u0171\"\"5!7\u0172"),
        peg$decode("%2\u0173\"\"6\u01737\u0174/\xA8#%%;h/i#;h.\" &\"/[$;h.\" &\"/M$;h.\" &\"/?$;h.\" &\"/1$;h.\" &\"/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/\"!&,)/H$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/($8#:\u0179#!!)(#'#(\"'#&'#"),
        peg$decode(";j.G &%2\u0173\"\"6\u01737\u0174/7#4\u017A\"\"5!7\u017B/($8\":\u017C\"! )(\"'#&'#"),
        peg$decode("4\u017D\"\"5!7\u017E.) &;i.# &;k"),
        peg$decode("4\u017F\"\"5!7\u0180.) &;i.# &;k"),
        peg$decode("%2\u0181\"\"6\u01817\u0182/\xA7#$4\u0183\"\"5!7\u0184.G &%2\u0173\"\"6\u01737\u0174/1#;x/($8\":\u0185\"! )(\"'#&'#.# &;k0S*4\u0183\"\"5!7\u0184.G &%2\u0173\"\"6\u01737\u0174/1#;x/($8\":\u0185\"! )(\"'#&'#.# &;k&/7$2\u0181\"\"6\u01817\u0182/($8#:\u0186#!!)(#'#(\"'#&'#"),
        peg$decode("%2\u0187\"\"6\u01877\u0188/\xA7#$4\u0189\"\"5!7\u018A.G &%2\u0173\"\"6\u01737\u0174/1#;x/($8\":\u0185\"! )(\"'#&'#.# &;k0S*4\u0189\"\"5!7\u018A.G &%2\u0173\"\"6\u01737\u0174/1#;x/($8\":\u0185\"! )(\"'#&'#.# &;k&/7$2\u0187\"\"6\u01877\u0188/($8#:\u0186#!!)(#'#(\"'#&'#"),
        peg$decode("%2\u018B\"\"6\u018B7\u018C/\u011C#$4\u018D\"\"5!7\u018E0)*4\u018D\"\"5!7\u018E&/\u0100$$2\u018F\"\"6\u018F7\u0190/,#0)*2\u018F\"\"6\u018F7\u0190&&&#/\xDE$$%4\u0191\"\"5!7\u0192/a#$4\u018D\"\"5!7\u018E0)*4\u018D\"\"5!7\u018E&/E$$2\u018F\"\"6\u018F7\u0190/,#0)*2\u018F\"\"6\u018F7\u0190&&&#/#$+#)(#'#(\"'#&'#0q*%4\u0191\"\"5!7\u0192/a#$4\u018D\"\"5!7\u018E0)*4\u018D\"\"5!7\u018E&/E$$2\u018F\"\"6\u018F7\u0190/,#0)*2\u018F\"\"6\u018F7\u0190&&&#/#$+#)(#'#(\"'#&'#&/2$2(\"\"6(7)/#$+%)(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%%2\u0193\"\"6\u01937\u0194.\" &\"/\"!&,)/C#;l/:$$;m0#*;m&/*$8#:\u0195##\"! )(#'#(\"'#&'#"),
        peg$decode("%$;m/&#0#*;m&&&#/' 8!:\u0196!! )"),
        peg$decode("%4\u0197\"\"5!7\u0198.\" &\"/\xF1#%$45\"\"5!760)*45\"\"5!76&/T#2F\"\"6F7G/E$$45\"\"5!76/,#0)*45\"\"5!76&&&#/#$+#)(#'#(\"'#&'#.< &$45\"\"5!76/,#0)*45\"\"5!76&&&#/{$%2\u0199\"\"6\u01997\u019A/Y#4\u0197\"\"5!7\u0198.\" &\"/E$$45\"\"5!76/,#0)*45\"\"5!76&&&#/#$+#)(#'#(\"'#&'#.\" &\"/'$8#:\u019B# )(#'#(\"'#&'#"),
        peg$decode(";n.# &;o"),
        peg$decode("%$4\u019C\"\"5!7\u019D.) &;i.# &;k05*4\u019C\"\"5!7\u019D.) &;i.# &;k&/' 8!:\u0196!! )"),
        peg$decode("$4\u0177\"\"5!7\u0178/,#0)*4\u0177\"\"5!7\u0178&&&#"),
        peg$decode(";v.\" &\""),
        peg$decode("2\u019E\"\"6\u019E7\u019F.A &2\u0175\"\"6\u01757\u0176.5 &2\u01A0\"\"6\u01A07\u01A1.) &2\u01A2\"\"6\u01A27\u01A3"),
        peg$decode("3\u01A4\"\"5!7\u01A5.\xB6 &%2\u0173\"\"6\u01737\u0174/\xA6#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x92$2\u01A6\"\"6\u01A67\u01A7.\" &\"/~$2\u01A6\"\"6\u01A67\u01A7.\" &\"/j$2\u01A6\"\"6\u01A67\u01A7.\" &\"/V$4\u01A8\"\"5!7\u01A9/G$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/'$8':\u01AA' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01AB\"\"5!7\u01AC.\xB6 &%2\u0173\"\"6\u01737\u0174/\xA6#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x92$2\u01A6\"\"6\u01A67\u01A7.\" &\"/~$2\u01A6\"\"6\u01A67\u01A7.\" &\"/j$2\u01A6\"\"6\u01A67\u01A7.\" &\"/V$4\u01AD\"\"5!7\u01AE/G$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/'$8':\u01AF' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01B0\"\"5!7\u01B1.\xB6 &%2\u0173\"\"6\u01737\u0174/\xA6#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x92$2\u01A6\"\"6\u01A67\u01A7.\" &\"/~$2\u01A6\"\"6\u01A67\u01A7.\" &\"/j$2\u01A6\"\"6\u01A67\u01A7.\" &\"/V$4\u01B2\"\"5!7\u01B3/G$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/'$8':\u01B4' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u0199\"\"5!7\u01B5.\xB6 &%2\u0173\"\"6\u01737\u0174/\xA6#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x92$2\u01A6\"\"6\u01A67\u01A7.\" &\"/~$2\u01A6\"\"6\u01A67\u01A7.\" &\"/j$2\u01A6\"\"6\u01A67\u01A7.\" &\"/V$4\u01B6\"\"5!7\u01B7/G$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/'$8':\u01B8' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01B9\"\"5!7\u01BA.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u01BB\"\"5!7\u01BC/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01BD\"\"5\"7\u01BE/& 8!:\u01BF! )"),
        peg$decode("3\u01C0\"\"5!7\u01C1.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u01C2\"\"5!7\u01C3/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01C4\"\"5\"7\u01C5/& 8!:\u01C6! )"),
        peg$decode("3\u01C7\"\"5!7\u01C8.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u01C9\"\"5!7\u01CA/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01CB\"\"5\"7\u01CC/& 8!:\u01CD! )"),
        peg$decode("3\u01CE\"\"5!7\u01CF.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u01D0\"\"5!7\u01D1/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01D2\"\"5\"7\u01D3/& 8!:\u01D4! )"),
        peg$decode("3\u01D5\"\"5!7\u01D6.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u01D7\"\"5!7\u01D8/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01D9\"\"5\"7\u01DA/& 8!:\u01DB! )"),
        peg$decode("3\u01DC\"\"5!7\u01DD.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u01DE\"\"5!7\u01DF/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01E0\"\"5\"7\u01E1/& 8!:\u01E2! )"),
        peg$decode("3\u01E3\"\"5!7\u01E4.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u01E5\"\"5!7\u01E6/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01E7\"\"5\"7\u01E8/& 8!:\u01E9! )"),
        peg$decode("3\u01EA\"\"5!7\u01EB.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u01EC\"\"5!7\u01ED/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01EE\"\"5\"7\u01EF/& 8!:\u01F0! )"),
        peg$decode("3\u01F1\"\"5!7\u01F2.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u01F3\"\"5!7\u01F4/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01F5\"\"5\"7\u01F6/& 8!:\u01F7! )"),
        peg$decode("3\u01F8\"\"5!7\u01F9.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u01FA\"\"5!7\u01FB/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01FC\"\"5\"7\u01FD/& 8!:\u01FE! )"),
        peg$decode("3\u01FF\"\"5!7\u0200.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u0201\"\"5!7\u0202/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0203\"\"5\"7\u0204/& 8!:\u0205! )"),
        peg$decode("3\u0206\"\"5!7\u0207.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u0208\"\"5!7\u0209/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u020A\"\"5\"7\u020B/& 8!:\u020C! )"),
        peg$decode("3\u020D\"\"5!7\u020E.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u020F\"\"5!7\u0210/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0211\"\"5\"7\u0212/& 8!:\u0213! )"),
        peg$decode("3\u0214\"\"5!7\u0215.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u0216\"\"5!7\u0217/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0218\"\"5\"7\u0219/& 8!:\u021A! )"),
        peg$decode("3\u021B\"\"5!7\u021C.\xC9 &%2\u0173\"\"6\u01737\u0174/\xA2#2\u01A6\"\"6\u01A67\u01A7.\" &\"/\x8E$2\u01A6\"\"6\u01A67\u01A7.\" &\"/z$2\u01A6\"\"6\u01A67\u01A7.\" &\"/f$2\u01A6\"\"6\u01A67\u01A7.\" &\"/R$4\u021D\"\"5!7\u021E/C$2\u0175\"\"6\u01757\u0176.) &4\u0177\"\"5!7\u0178.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u021F\"\"5\"7\u0220/& 8!:\u0221! )"),
        peg$decode("<%$;p0#*;p&/,#;v/#$+\")(\"'#&'#=.\" 7\u0222"),
        peg$decode("<%$;p0#*;p&/1#;t/($8\":\u0224\"! )(\"'#&'#=.\" 7\u0223"),
        peg$decode("<%$;p0#*;p&/1#;q/($8\":\u0226\"! )(\"'#&'#=.\" 7\u0225"),
        peg$decode("<%$;p0#*;p&/@#2P\"\"6P7Q/1$;r/($8#:\u0228#! )(#'#(\"'#&'#=.\" 7\u0227"),
        peg$decode("<%$;p0#*;p&/C#;s/:$;|/1$;\x82/($8$:\u022A$!\")($'#(#'#(\"'#&'#=.\" 7\u0229"),
        peg$decode("<%$;p0#*;p&/C#;s/:$;|/1$;\x8A/($8$:\u022B$!\")($'#(#'#(\"'#&'#=.\" 7\u0229"),
        peg$decode("<%$;p0#*;p&/C#;s/:$;\x85/1$;\x8A/($8$:\u022C$!\")($'#(#'#(\"'#&'#.\u015A &%$;p0#*;p&/C#;s/:$;z/1$;\x82/($8$:\u022D$!\")($'#(#'#(\"'#&'#.\u0123 &%$;p0#*;p&/C#;s/:$;\x82/1$;\x82/($8$:\u022E$!\")($'#(#'#(\"'#&'#.\xEC &%$;p0#*;p&/C#;s/:$;\x7F/1$;\x83/($8$:\u022F$!\")($'#(#'#(\"'#&'#.\xB5 &%$;p0#*;p&/C#;s/:$;\x85/1$;\x88/($8$:\u0230$!\")($'#(#'#(\"'#&'#.~ &%$;p0#*;p&/C#;s/:$;\x85/1$;z/($8$:\u0231$!\")($'#(#'#(\"'#&'#.G &%$;p0#*;p&/6#2\u01A6\"\"6\u01A67\u01A7/'$8\":\u0232\" )(\"'#&'#=.\" 7\u0229"),
        peg$decode("<%$;p0#*;p&/L#;s/C$;{/:$;|/1$;}/($8%:\u0234%!#)(%'#($'#(#'#(\"'#&'#.\xA6 &%$;p0#*;p&/L#;s/C$;\x86/:$;y/1$;{/($8%:\u0235%!#)(%'#($'#(#'#(\"'#&'#.f &%$;p0#*;p&/U#;s/L$;}/C$;\x86/:$;y/1$;{/($8&:\u0236&!$)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0233"),
        peg$decode("<%$;p0#*;p&/C#;s/:$;\x82/1$;\x87/($8$:\u0238$!\")($'#(#'#(\"'#&'#.K &%$;p0#*;p&/:#;s/1$;\x87/($8#:\u0239#!!)(#'#(\"'#&'#=.\" 7\u0237"),
        peg$decode("<%$;p0#*;p&/C#;s/:$;~/1$;\x8B/($8$:\u023B$!\")($'#(#'#(\"'#&'#.] &%$;p0#*;p&/L#;s/C$;\x80/:$;~/1$;\x8B/($8%:\u023C%!#)(%'#($'#(#'#(\"'#&'#=.\" 7\u023A"),
        peg$decode("<%$;p0#*;p&/@#;s/7$27\"\"6778/($8#:\u023E#!!)(#'#(\"'#&'#=.\" 7\u023D"),
        peg$decode("<%$;p0#*;p&/1#;s/($8\":\u0240\"! )(\"'#&'#=.\" 7\u023F"),
        peg$decode("<%$;p0#*;p&/|#;\x89/s$;\x86/j$;\x81/a$3\u0242\"\"5!7\u0243/R$;w/I$;t/@$;w/7$22\"\"6273/($8):\u0244)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\x8D &%$;p0#*;p&/|#;\x89/s$;\x86/j$;\x81/a$3\u0242\"\"5!7\u0243/R$;w/I$;u/@$;w/7$22\"\"6273/($8):\u0244)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0241"),
        peg$decode("<%$;p0#*;p&/@#;q/7$2\u0242\"\"6\u02427\u0246/($8#:&#!!)(#'#(\"'#&'#=.\" 7\u0245")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }


    function extractList(list, index) {
      return list.map(function(element) { return element[index]; });
    }

    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index))
        .filter(function(element) { return element !== null; });
    }

    function buildExpression(head, tail) {
      return tail.reduce(function(result, element) {
        return {
          type: 'Expression',
          operator: element[0],
          left: result,
          right: element[1]
        };
      }, head);
    }

    function extend(a, b) {
      for (var prop in b) {
        a[prop] = b[prop];
      }

      return a;
    }

    function combine(a) {
      return a.reduce(function(obj, next) {
        return extend(obj, next);
      }, {});
    }

    function setTopRightBottomLeft(obj, before, after, t, r, b, l) {
      obj[before + 'Top' + (after || '')] = t;
      obj[before + 'Right' + (after || '')] = r;
      obj[before + 'Bottom' + (after || '')] = b;
      obj[before + 'Left' + (after || '')] = l;
      return obj;
    }

    function setTopRightBottomLeftOr(x, obj, before, after, t, r, b, l) {
      if (x === '') return setTopRightBottomLeft(obj, before, after, t, r, b, l);

      x = x.toLowerCase();

      if (x === '-top') obj[before + 'Top' + (after || '')] = t;
      if (x === '-right') obj[before + 'Right' + (after || '')] = r;
      if (x === '-bottom') obj[before + 'Bottom' + (after || '')] = b;
      if (x === '-left') obj[before + 'Left' + (after || '')] = l;

      return obj;
    }


  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
