// Generated by Peggy 2.0.1.
//
// https://peggyjs.org/


  import {initial, inherited} from './cascade.js';

  function extractList(list, index) {
    return list.map(function(element) { return element[index]; });
  }

  function buildList(head, tail, index) {
    return [head].concat(extractList(tail, index))
      .filter(function(element) { return element !== null; });
  }

  function buildExpression(head, tail) {
    return tail.reduce(function(result, element) {
      return {
        type: 'Expression',
        operator: element[0],
        left: result,
        right: element[1]
      };
    }, head);
  }

  function extend(a, b) {
    for (var prop in b) {
      a[prop] = b[prop];
    }

    return a;
  }

  function combine(a) {
    return a.reduce(function(obj, next) {
      return extend(obj, next);
    }, {});
  }

  function setTopRightBottomLeft(obj, before, after, t, r, b, l) {
    obj[before + 'Top' + (after || '')] = t;
    obj[before + 'Right' + (after || '')] = r;
    obj[before + 'Bottom' + (after || '')] = b;
    obj[before + 'Left' + (after || '')] = l;
    return obj;
  }

  function setTopRightBottomLeftOr(x, obj, before, after, t, r, b, l) {
    if (!x) return setTopRightBottomLeft(obj, before, after, t, r, b, l);

    x = x.toLowerCase();

    if (x === '-top') obj[before + 'Top' + (after || '')] = t;
    if (x === '-right') obj[before + 'Right' + (after || '')] = r;
    if (x === '-bottom') obj[before + 'Bottom' + (after || '')] = b;
    if (x === '-left') obj[before + 'Left' + (after || '')] = l;

    return obj;
  }

  const colorMap = new Map([
    ['maroon', {r: 128, g: 0, b: 0, a: 1}],
    ['red', {r: 255, g: 0, b: 0, a: 1}],
    ['orange', {r: 255, g: 165, b: 0, a: 1}],
    ['yellow', {r: 255, g: 255, b: 0, a: 1}],
    ['olive', {r: 128, g: 128, b: 0, a: 1}],
    ['purple', {r: 128, g: 0, b: 128, a: 1}],
    ['fuchsia', {r: 255, g: 0, b: 255, a: 1}],
    ['white', {r: 255, g: 255, b: 255, a: 1}],
    ['lime', {r: 0, g: 255, b: 0, a: 1}],
    ['green', {r: 0, g: 128, b: 0, a: 1}],
    ['navy', {r: 0, g: 0, b: 128, a: 1}],
    ['blue', {r: 0, g: 0, b: 255, a: 1}],
    ['aqua', {r: 0, g: 255, b: 255, a: 1}],
    ['teal', {r: 0, g: 128, b: 128, a: 1}],
    ['black', {r: 0, g: 0, b: 0, a: 1}],
    ['silver', {r: 192, g: 192, b: 192, a: 1}],
    ['gray', {r: 128, g: 128, b: 128, a: 1}],
    ['transparent', {r: 255, g: 255, b: 255, a: 0}]
  ]);

  let $font = {}, $fontNormals = 0;

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var loc = this.location.source + ":" + s.line + ":" + s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = ";";
  var peg$c1 = ":";
  var peg$c2 = "/";
  var peg$c3 = ",";
  var peg$c4 = ")";
  var peg$c5 = "%";
  var peg$c6 = "1";
  var peg$c7 = "2";
  var peg$c8 = "25";
  var peg$c9 = ".";
  var peg$c10 = "rgba(";
  var peg$c11 = "rgb(";
  var peg$c12 = "#";
  var peg$c13 = "maroon";
  var peg$c14 = "red";
  var peg$c15 = "orange";
  var peg$c16 = "yellow";
  var peg$c17 = "olive";
  var peg$c18 = "purple";
  var peg$c19 = "fuchsia";
  var peg$c20 = "white";
  var peg$c21 = "lime";
  var peg$c22 = "green";
  var peg$c23 = "navy";
  var peg$c24 = "blue";
  var peg$c25 = "aqua";
  var peg$c26 = "teal";
  var peg$c27 = "black";
  var peg$c28 = "silver";
  var peg$c29 = "gray";
  var peg$c30 = "transparent";
  var peg$c31 = "inherit";
  var peg$c32 = "initial";
  var peg$c33 = "xx-small";
  var peg$c34 = "x-small";
  var peg$c35 = "small";
  var peg$c36 = "medium";
  var peg$c37 = "large";
  var peg$c38 = "x-large";
  var peg$c39 = "xx-large";
  var peg$c40 = "smaller";
  var peg$c41 = "larger";
  var peg$c42 = "normal";
  var peg$c43 = "italic";
  var peg$c44 = "oblique";
  var peg$c45 = "bolder";
  var peg$c46 = "lighter";
  var peg$c47 = "bold";
  var peg$c48 = "small-caps";
  var peg$c49 = "ultra-condensed";
  var peg$c50 = "extra-condensed";
  var peg$c51 = "condensed";
  var peg$c52 = "semi-condensed";
  var peg$c53 = "semi-expanded";
  var peg$c54 = "expanded";
  var peg$c55 = "extra-expanded";
  var peg$c56 = "ultra-expanded";
  var peg$c57 = "ltr";
  var peg$c58 = "rtl";
  var peg$c59 = "block";
  var peg$c60 = "inline-block";
  var peg$c61 = "inline";
  var peg$c62 = "flow-root";
  var peg$c63 = "none";
  var peg$c64 = "horizontal-tb";
  var peg$c65 = "vertical-lr";
  var peg$c66 = "vertical-rl";
  var peg$c67 = "nowrap";
  var peg$c68 = "pre-wrap";
  var peg$c69 = "pre-line";
  var peg$c70 = "pre";
  var peg$c71 = "absolute";
  var peg$c72 = "relative";
  var peg$c73 = "static";
  var peg$c74 = "auto";
  var peg$c75 = "hidden";
  var peg$c76 = "dotted";
  var peg$c77 = "dashed";
  var peg$c78 = "solid";
  var peg$c79 = "double";
  var peg$c80 = "groove";
  var peg$c81 = "ridge";
  var peg$c82 = "inset";
  var peg$c83 = "outset";
  var peg$c84 = "font-size";
  var peg$c85 = "line-height";
  var peg$c86 = "font-style";
  var peg$c87 = "font-weight";
  var peg$c88 = "font-variant";
  var peg$c89 = "font-stretch";
  var peg$c90 = "font-family";
  var peg$c91 = "font";
  var peg$c92 = "color";
  var peg$c93 = "direction";
  var peg$c94 = "display";
  var peg$c95 = "writing-mode";
  var peg$c96 = "white-space";
  var peg$c97 = "tab-size";
  var peg$c98 = "position";
  var peg$c99 = "margin-top";
  var peg$c100 = "margin-right";
  var peg$c101 = "margin-bottom";
  var peg$c102 = "margin-left";
  var peg$c103 = "margin";
  var peg$c104 = "padding-top";
  var peg$c105 = "padding-right";
  var peg$c106 = "padding-bottom";
  var peg$c107 = "padding-left";
  var peg$c108 = "padding";
  var peg$c109 = "border-top-width";
  var peg$c110 = "border-right-width";
  var peg$c111 = "border-bottom-width";
  var peg$c112 = "border-left-width";
  var peg$c113 = "border-width";
  var peg$c114 = "border-top-style";
  var peg$c115 = "border-right-style";
  var peg$c116 = "border-bottom-style";
  var peg$c117 = "border-left-style";
  var peg$c118 = "border-style";
  var peg$c119 = "border-top-color";
  var peg$c120 = "border-right-color";
  var peg$c121 = "border-bottom-color";
  var peg$c122 = "border-left-color";
  var peg$c123 = "border-color";
  var peg$c124 = "-top";
  var peg$c125 = "-right";
  var peg$c126 = "-bottom";
  var peg$c127 = "-left";
  var peg$c128 = "border";
  var peg$c129 = "background-color";
  var peg$c130 = "background-clip";
  var peg$c131 = "border-box";
  var peg$c132 = "content-box";
  var peg$c133 = "padding-box";
  var peg$c134 = "text-align";
  var peg$c135 = "start";
  var peg$c136 = "end";
  var peg$c137 = "left";
  var peg$c138 = "right";
  var peg$c139 = "center";
  var peg$c140 = "float";
  var peg$c141 = "clear";
  var peg$c142 = "both";
  var peg$c143 = "width";
  var peg$c144 = "height";
  var peg$c145 = "box-sizing";
  var peg$c146 = "\\";
  var peg$c147 = "\r\n";
  var peg$c148 = "\"";
  var peg$c149 = "'";
  var peg$c150 = "/*";
  var peg$c151 = "*";
  var peg$c152 = "-";
  var peg$c153 = "e";
  var peg$c154 = "\n";
  var peg$c155 = "\r";
  var peg$c156 = "\f";
  var peg$c157 = "a";
  var peg$c158 = "0";
  var peg$c159 = "c";
  var peg$c160 = "d";
  var peg$c161 = "g";
  var peg$c162 = "\\g";
  var peg$c163 = "h";
  var peg$c164 = "\\h";
  var peg$c165 = "i";
  var peg$c166 = "\\i";
  var peg$c167 = "k";
  var peg$c168 = "\\k";
  var peg$c169 = "l";
  var peg$c170 = "\\l";
  var peg$c171 = "m";
  var peg$c172 = "\\m";
  var peg$c173 = "n";
  var peg$c174 = "\\n";
  var peg$c175 = "o";
  var peg$c176 = "\\o";
  var peg$c177 = "p";
  var peg$c178 = "\\p";
  var peg$c179 = "r";
  var peg$c180 = "\\r";
  var peg$c181 = "s";
  var peg$c182 = "\\s";
  var peg$c183 = "t";
  var peg$c184 = "\\t";
  var peg$c185 = "u";
  var peg$c186 = "\\u";
  var peg$c187 = "x";
  var peg$c188 = "\\x";
  var peg$c189 = "z";
  var peg$c190 = "\\z";
  var peg$c191 = "(";

  var peg$r0 = /^[0-9]/;
  var peg$r1 = /^[0-4]/;
  var peg$r2 = /^[0-5]/;
  var peg$r3 = /^[a-f0-9]/i;
  var peg$r4 = /^[a-f0-9]/;
  var peg$r5 = /^[0-9a-f]/i;
  var peg$r6 = /^[\x80-\uFFFF]/;
  var peg$r7 = /^[ \t\r\n\f]/;
  var peg$r8 = /^[^\r\n\f0-9a-f]/i;
  var peg$r9 = /^[_a-z]/i;
  var peg$r10 = /^[_a-z0-9\-]/i;
  var peg$r11 = /^[^\n\r\f\\"]/;
  var peg$r12 = /^[^\n\r\f\\']/;
  var peg$r13 = /^[^*]/;
  var peg$r14 = /^[^\/*]/;
  var peg$r15 = /^[+\-]/;
  var peg$r16 = /^[!#$%&*-[\]-~]/;
  var peg$r17 = /^[Aa]/;
  var peg$r18 = /^[Cc]/;
  var peg$r19 = /^[Dd]/;
  var peg$r20 = /^[Ee]/;
  var peg$r21 = /^[Gg]/;
  var peg$r22 = /^[Hh]/;
  var peg$r23 = /^[Ii]/;
  var peg$r24 = /^[Kk]/;
  var peg$r25 = /^[Ll]/;
  var peg$r26 = /^[Mm]/;
  var peg$r27 = /^[Nn]/;
  var peg$r28 = /^[Oo]/;
  var peg$r29 = /^[Pp]/;
  var peg$r30 = /^[Rr]/;
  var peg$r31 = /^[Ss]/;
  var peg$r32 = /^[Tt]/;
  var peg$r33 = /^[Uu]/;
  var peg$r34 = /^[Xx]/;
  var peg$r35 = /^[Zz]/;

  var peg$e0 = peg$literalExpectation(";", false);
  var peg$e1 = peg$literalExpectation(":", false);
  var peg$e2 = peg$literalExpectation("/", false);
  var peg$e3 = peg$literalExpectation(",", false);
  var peg$e4 = peg$literalExpectation(")", false);
  var peg$e5 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e6 = peg$literalExpectation("%", false);
  var peg$e7 = peg$literalExpectation("1", false);
  var peg$e8 = peg$literalExpectation("2", false);
  var peg$e9 = peg$classExpectation([["0", "4"]], false, false);
  var peg$e10 = peg$literalExpectation("25", false);
  var peg$e11 = peg$classExpectation([["0", "5"]], false, false);
  var peg$e12 = peg$literalExpectation(".", false);
  var peg$e13 = peg$literalExpectation("rgba(", false);
  var peg$e14 = peg$literalExpectation("rgb(", false);
  var peg$e15 = peg$literalExpectation("#", false);
  var peg$e16 = peg$classExpectation([["a", "f"], ["0", "9"]], false, true);
  var peg$e17 = peg$classExpectation([["a", "f"], ["0", "9"]], false, false);
  var peg$e18 = peg$literalExpectation("maroon", false);
  var peg$e19 = peg$literalExpectation("red", false);
  var peg$e20 = peg$literalExpectation("orange", false);
  var peg$e21 = peg$literalExpectation("yellow", false);
  var peg$e22 = peg$literalExpectation("olive", false);
  var peg$e23 = peg$literalExpectation("purple", false);
  var peg$e24 = peg$literalExpectation("fuchsia", false);
  var peg$e25 = peg$literalExpectation("white", false);
  var peg$e26 = peg$literalExpectation("lime", false);
  var peg$e27 = peg$literalExpectation("green", false);
  var peg$e28 = peg$literalExpectation("navy", false);
  var peg$e29 = peg$literalExpectation("blue", false);
  var peg$e30 = peg$literalExpectation("aqua", false);
  var peg$e31 = peg$literalExpectation("teal", false);
  var peg$e32 = peg$literalExpectation("black", false);
  var peg$e33 = peg$literalExpectation("silver", false);
  var peg$e34 = peg$literalExpectation("gray", false);
  var peg$e35 = peg$literalExpectation("transparent", false);
  var peg$e36 = peg$literalExpectation("inherit", false);
  var peg$e37 = peg$literalExpectation("initial", false);
  var peg$e38 = peg$literalExpectation("xx-small", false);
  var peg$e39 = peg$literalExpectation("x-small", false);
  var peg$e40 = peg$literalExpectation("small", false);
  var peg$e41 = peg$literalExpectation("medium", false);
  var peg$e42 = peg$literalExpectation("large", false);
  var peg$e43 = peg$literalExpectation("x-large", false);
  var peg$e44 = peg$literalExpectation("xx-large", false);
  var peg$e45 = peg$literalExpectation("smaller", false);
  var peg$e46 = peg$literalExpectation("larger", false);
  var peg$e47 = peg$literalExpectation("normal", false);
  var peg$e48 = peg$literalExpectation("italic", false);
  var peg$e49 = peg$literalExpectation("oblique", false);
  var peg$e50 = peg$literalExpectation("bolder", false);
  var peg$e51 = peg$literalExpectation("lighter", false);
  var peg$e52 = peg$literalExpectation("bold", false);
  var peg$e53 = peg$literalExpectation("small-caps", false);
  var peg$e54 = peg$literalExpectation("ultra-condensed", false);
  var peg$e55 = peg$literalExpectation("extra-condensed", false);
  var peg$e56 = peg$literalExpectation("condensed", false);
  var peg$e57 = peg$literalExpectation("semi-condensed", false);
  var peg$e58 = peg$literalExpectation("semi-expanded", false);
  var peg$e59 = peg$literalExpectation("expanded", false);
  var peg$e60 = peg$literalExpectation("extra-expanded", false);
  var peg$e61 = peg$literalExpectation("ultra-expanded", false);
  var peg$e62 = peg$literalExpectation("ltr", false);
  var peg$e63 = peg$literalExpectation("rtl", false);
  var peg$e64 = peg$literalExpectation("block", false);
  var peg$e65 = peg$literalExpectation("inline-block", false);
  var peg$e66 = peg$literalExpectation("inline", false);
  var peg$e67 = peg$literalExpectation("flow-root", false);
  var peg$e68 = peg$literalExpectation("none", false);
  var peg$e69 = peg$literalExpectation("horizontal-tb", false);
  var peg$e70 = peg$literalExpectation("vertical-lr", false);
  var peg$e71 = peg$literalExpectation("vertical-rl", false);
  var peg$e72 = peg$literalExpectation("nowrap", false);
  var peg$e73 = peg$literalExpectation("pre-wrap", false);
  var peg$e74 = peg$literalExpectation("pre-line", false);
  var peg$e75 = peg$literalExpectation("pre", false);
  var peg$e76 = peg$literalExpectation("absolute", false);
  var peg$e77 = peg$literalExpectation("relative", false);
  var peg$e78 = peg$literalExpectation("static", false);
  var peg$e79 = peg$literalExpectation("auto", false);
  var peg$e80 = peg$literalExpectation("hidden", false);
  var peg$e81 = peg$literalExpectation("dotted", false);
  var peg$e82 = peg$literalExpectation("dashed", false);
  var peg$e83 = peg$literalExpectation("solid", false);
  var peg$e84 = peg$literalExpectation("double", false);
  var peg$e85 = peg$literalExpectation("groove", false);
  var peg$e86 = peg$literalExpectation("ridge", false);
  var peg$e87 = peg$literalExpectation("inset", false);
  var peg$e88 = peg$literalExpectation("outset", false);
  var peg$e89 = peg$literalExpectation("font-size", true);
  var peg$e90 = peg$literalExpectation("line-height", true);
  var peg$e91 = peg$literalExpectation("font-style", true);
  var peg$e92 = peg$literalExpectation("font-weight", true);
  var peg$e93 = peg$literalExpectation("font-variant", true);
  var peg$e94 = peg$literalExpectation("font-stretch", true);
  var peg$e95 = peg$literalExpectation("font-family", true);
  var peg$e96 = peg$literalExpectation("font", true);
  var peg$e97 = peg$literalExpectation("color", true);
  var peg$e98 = peg$literalExpectation("direction", true);
  var peg$e99 = peg$literalExpectation("display", true);
  var peg$e100 = peg$literalExpectation("writing-mode", true);
  var peg$e101 = peg$literalExpectation("white-space", true);
  var peg$e102 = peg$literalExpectation("tab-size", true);
  var peg$e103 = peg$literalExpectation("position", true);
  var peg$e104 = peg$literalExpectation("margin-top", true);
  var peg$e105 = peg$literalExpectation("margin-right", true);
  var peg$e106 = peg$literalExpectation("margin-bottom", true);
  var peg$e107 = peg$literalExpectation("margin-left", true);
  var peg$e108 = peg$literalExpectation("margin", true);
  var peg$e109 = peg$literalExpectation("padding-top", true);
  var peg$e110 = peg$literalExpectation("padding-right", true);
  var peg$e111 = peg$literalExpectation("padding-bottom", true);
  var peg$e112 = peg$literalExpectation("padding-left", true);
  var peg$e113 = peg$literalExpectation("padding", true);
  var peg$e114 = peg$literalExpectation("border-top-width", true);
  var peg$e115 = peg$literalExpectation("border-right-width", true);
  var peg$e116 = peg$literalExpectation("border-bottom-width", true);
  var peg$e117 = peg$literalExpectation("border-left-width", true);
  var peg$e118 = peg$literalExpectation("border-width", true);
  var peg$e119 = peg$literalExpectation("border-top-style", true);
  var peg$e120 = peg$literalExpectation("border-right-style", true);
  var peg$e121 = peg$literalExpectation("border-bottom-style", true);
  var peg$e122 = peg$literalExpectation("border-left-style", true);
  var peg$e123 = peg$literalExpectation("border-style", true);
  var peg$e124 = peg$literalExpectation("border-top-color", true);
  var peg$e125 = peg$literalExpectation("border-right-color", true);
  var peg$e126 = peg$literalExpectation("border-bottom-color", true);
  var peg$e127 = peg$literalExpectation("border-left-color", true);
  var peg$e128 = peg$literalExpectation("border-color", true);
  var peg$e129 = peg$literalExpectation("-top", false);
  var peg$e130 = peg$literalExpectation("-right", false);
  var peg$e131 = peg$literalExpectation("-bottom", false);
  var peg$e132 = peg$literalExpectation("-left", false);
  var peg$e133 = peg$literalExpectation("border", true);
  var peg$e134 = peg$literalExpectation("background-color", true);
  var peg$e135 = peg$literalExpectation("background-clip", true);
  var peg$e136 = peg$literalExpectation("border-box", false);
  var peg$e137 = peg$literalExpectation("content-box", false);
  var peg$e138 = peg$literalExpectation("padding-box", false);
  var peg$e139 = peg$literalExpectation("text-align", true);
  var peg$e140 = peg$literalExpectation("start", false);
  var peg$e141 = peg$literalExpectation("end", false);
  var peg$e142 = peg$literalExpectation("left", false);
  var peg$e143 = peg$literalExpectation("right", false);
  var peg$e144 = peg$literalExpectation("center", false);
  var peg$e145 = peg$literalExpectation("float", true);
  var peg$e146 = peg$literalExpectation("clear", true);
  var peg$e147 = peg$literalExpectation("both", false);
  var peg$e148 = peg$literalExpectation("width", true);
  var peg$e149 = peg$literalExpectation("height", true);
  var peg$e150 = peg$literalExpectation("box-sizing", true);
  var peg$e151 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true);
  var peg$e152 = peg$classExpectation([["\x80", "\uFFFF"]], false, false);
  var peg$e153 = peg$literalExpectation("\\", false);
  var peg$e154 = peg$literalExpectation("\r\n", false);
  var peg$e155 = peg$classExpectation([" ", "\t", "\r", "\n", "\f"], false, false);
  var peg$e156 = peg$classExpectation(["\r", "\n", "\f", ["0", "9"], ["a", "f"]], true, true);
  var peg$e157 = peg$classExpectation(["_", ["a", "z"]], false, true);
  var peg$e158 = peg$classExpectation(["_", ["a", "z"], ["0", "9"], "-"], false, true);
  var peg$e159 = peg$literalExpectation("\"", false);
  var peg$e160 = peg$classExpectation(["\n", "\r", "\f", "\\", "\""], true, false);
  var peg$e161 = peg$literalExpectation("'", false);
  var peg$e162 = peg$classExpectation(["\n", "\r", "\f", "\\", "'"], true, false);
  var peg$e163 = peg$literalExpectation("/*", false);
  var peg$e164 = peg$classExpectation(["*"], true, false);
  var peg$e165 = peg$literalExpectation("*", false);
  var peg$e166 = peg$classExpectation(["/", "*"], true, false);
  var peg$e167 = peg$literalExpectation("-", false);
  var peg$e168 = peg$classExpectation(["+", "-"], false, false);
  var peg$e169 = peg$literalExpectation("e", false);
  var peg$e170 = peg$classExpectation(["!", "#", "$", "%", "&", ["*", "["], ["]", "~"]], false, false);
  var peg$e171 = peg$literalExpectation("\n", false);
  var peg$e172 = peg$literalExpectation("\r", false);
  var peg$e173 = peg$literalExpectation("\f", false);
  var peg$e174 = peg$literalExpectation("a", true);
  var peg$e175 = peg$literalExpectation("0", false);
  var peg$e176 = peg$classExpectation(["A", "a"], false, false);
  var peg$e177 = peg$literalExpectation("c", true);
  var peg$e178 = peg$classExpectation(["C", "c"], false, false);
  var peg$e179 = peg$literalExpectation("d", true);
  var peg$e180 = peg$classExpectation(["D", "d"], false, false);
  var peg$e181 = peg$literalExpectation("e", true);
  var peg$e182 = peg$classExpectation(["E", "e"], false, false);
  var peg$e183 = peg$literalExpectation("g", true);
  var peg$e184 = peg$classExpectation(["G", "g"], false, false);
  var peg$e185 = peg$literalExpectation("\\g", true);
  var peg$e186 = peg$literalExpectation("h", true);
  var peg$e187 = peg$classExpectation(["H", "h"], false, false);
  var peg$e188 = peg$literalExpectation("\\h", true);
  var peg$e189 = peg$literalExpectation("i", true);
  var peg$e190 = peg$classExpectation(["I", "i"], false, false);
  var peg$e191 = peg$literalExpectation("\\i", true);
  var peg$e192 = peg$literalExpectation("k", true);
  var peg$e193 = peg$classExpectation(["K", "k"], false, false);
  var peg$e194 = peg$literalExpectation("\\k", true);
  var peg$e195 = peg$literalExpectation("l", true);
  var peg$e196 = peg$classExpectation(["L", "l"], false, false);
  var peg$e197 = peg$literalExpectation("\\l", true);
  var peg$e198 = peg$literalExpectation("m", true);
  var peg$e199 = peg$classExpectation(["M", "m"], false, false);
  var peg$e200 = peg$literalExpectation("\\m", true);
  var peg$e201 = peg$literalExpectation("n", true);
  var peg$e202 = peg$classExpectation(["N", "n"], false, false);
  var peg$e203 = peg$literalExpectation("\\n", true);
  var peg$e204 = peg$literalExpectation("o", true);
  var peg$e205 = peg$classExpectation(["O", "o"], false, false);
  var peg$e206 = peg$literalExpectation("\\o", true);
  var peg$e207 = peg$literalExpectation("p", true);
  var peg$e208 = peg$classExpectation(["P", "p"], false, false);
  var peg$e209 = peg$literalExpectation("\\p", true);
  var peg$e210 = peg$literalExpectation("r", true);
  var peg$e211 = peg$classExpectation(["R", "r"], false, false);
  var peg$e212 = peg$literalExpectation("\\r", true);
  var peg$e213 = peg$literalExpectation("s", true);
  var peg$e214 = peg$classExpectation(["S", "s"], false, false);
  var peg$e215 = peg$literalExpectation("\\s", true);
  var peg$e216 = peg$literalExpectation("t", true);
  var peg$e217 = peg$classExpectation(["T", "t"], false, false);
  var peg$e218 = peg$literalExpectation("\\t", true);
  var peg$e219 = peg$literalExpectation("u", true);
  var peg$e220 = peg$classExpectation(["U", "u"], false, false);
  var peg$e221 = peg$literalExpectation("\\u", true);
  var peg$e222 = peg$literalExpectation("x", true);
  var peg$e223 = peg$classExpectation(["X", "x"], false, false);
  var peg$e224 = peg$literalExpectation("\\x", true);
  var peg$e225 = peg$literalExpectation("z", true);
  var peg$e226 = peg$classExpectation(["Z", "z"], false, false);
  var peg$e227 = peg$literalExpectation("\\z", true);
  var peg$e228 = peg$otherExpectation("whitespace");
  var peg$e229 = peg$otherExpectation("string");
  var peg$e230 = peg$otherExpectation("identifier");
  var peg$e231 = peg$otherExpectation("hash");
  var peg$e232 = peg$otherExpectation("length");
  var peg$e233 = peg$otherExpectation("angle");
  var peg$e234 = peg$otherExpectation("time");
  var peg$e235 = peg$otherExpectation("frequency");
  var peg$e236 = peg$otherExpectation("percentage");
  var peg$e237 = peg$otherExpectation("number");
  var peg$e238 = peg$otherExpectation("uri");
  var peg$e239 = peg$literalExpectation("(", true);
  var peg$e240 = peg$otherExpectation("function");
  var peg$e241 = peg$literalExpectation("(", false);

  var peg$f0 = function(declarationsHead, declarationsTail) { return combine(buildList(declarationsHead, declarationsTail, 2)); };
  var peg$f1 = function(name, value) {
      let r = {};
      r['_' + name] = value;
      return r;
    };
  var peg$f2 = function(name) { return name; };
  var peg$f3 = function(head, tail) { return buildExpression(head, tail); };
  var peg$f4 = function() { return '/'; };
  var peg$f5 = function() { return ','; };
  var peg$f6 = function(quantity) {
      return {
        type: 'Quantity',
        value: quantity.value,
        unit: quantity.unit
      };
    };
  var peg$f7 = function(value) { return { type: 'String', value: value }; };
  var peg$f8 = function(value) { return { type: 'URI',    value: value }; };
  var peg$f9 = function(value) { return value; };
  var peg$f10 = function(name, params) {
      return { type: 'Function', name: name, params: params };
    };
  var peg$f11 = function(component) {
    return Math.max(0, Math.min(100, parseInt(component, 10))) * 1e-2 * 255
  };
  var peg$f12 = function(component) {
    return parseInt(Array.isArray(component) ? component.join('') : component, 10);
  };
  var peg$f13 = function(a) {
    const component = a.join('');
    return Math.max(0, Math.min(100, parseInt(component, 10))) * 1e-2
  };
  var peg$f14 = function(a, b, c) {
    const component = (a ? a.join('') : '') + b + c.join('');
    return Math.max(0, Math.min(1, parseFloat(component)));
  };
  var peg$f15 = function(a) {
    return Math.max(0, Math.min(1, parseInt(a.join(''), 10)))
  };
  var peg$f16 = function(r, g, b, a) {
    return {r, g, b, a};
  };
  var peg$f17 = function(r, g, b) {
    return {r, g, b, a: 1};
  };
  var peg$f18 = function(r, g, b, a) {
    return {
      r: parseInt(r.join(''), 16),
      g: parseInt(g.join(''), 16),
      b: parseInt(b.join(''), 16),
      a: a ? parseInt(a.join(''), 16) / 255 : 1
    }
  };
  var peg$f19 = function(r, g, b, a) {
    return {
      r: parseInt(r + r, 16),
      g: parseInt(g + g, 16),
      b: parseInt(b + b, 16),
      a: a ? parseInt(a + a, 16) / 255 : 1
    }
  };
  var peg$f20 = function() {
    return colorMap.get(text())
  };
  var peg$f21 = function() { return inherited; };
  var peg$f22 = function() { return initial; };
  var peg$f23 = function() { return 9 };
  var peg$f24 = function() { return 10 };
  var peg$f25 = function() { return 13 };
  var peg$f26 = function() { return 16 };
  var peg$f27 = function() { return 18 };
  var peg$f28 = function() { return 24 };
  var peg$f29 = function() { return 32 };
  var peg$f30 = function() { return { value: 1/1.2, unit: 'em' } };
  var peg$f31 = function() { return { value: 1.2, unit: 'em' } };
  var peg$f32 = function(font_size) { return font_size; };
  var peg$f33 = function(line_height) { return line_height; };
  var peg$f34 = function() { return 700; };
  var peg$f35 = function() { return +text() >= 1 && +text() <= 1000 ? +text() : undefined; };
  var peg$f36 = function(family) { return family; };
  var peg$f37 = function(head, tail) { return buildList(head, tail, 1).join(' '); };
  var peg$f38 = function(f1, fn) {
  return [f1].concat(fn ? extractList(fn, 2) : []);
};
  var peg$f39 = function(s) {
  if ($font) {
    if (s === 'normal') {
      if (++$fontNormals > 4) $font = undefined;
    } else {
      if ('fontStyle' in $font) {
        $font = undefined;
      } else {
        $font.fontStyle = s;
        ++$fontNormals;
      }
    }
  }
};
  var peg$f40 = function(s) {
  if ($font) {
    if (s === undefined || 'fontWeight' in $font) {
      $font = undefined;
    } else {
      $font.fontWeight = s;
      ++$fontNormals;
    }
  }
};
  var peg$f41 = function(s) {
  if ($font) {
    if ('fontVariant' in $font) {
      $font = undefined;
    } else {
      $font.fontVariant = s;
      ++$fontNormals;
    }
  }
};
  var peg$f42 = function(s) {
  if ($font) {
    if ('fontStretch' in $font) {
      $font = undefined;
    } else {
      $font.fontStretch = s;
      ++$fontNormals;
    }
  }
};
  var peg$f43 = function() {
  const ret = $font;
  $font = {};
  $fontNormals = 0;
  return ret;
};
  var peg$f44 = function(x) {
    if (x[0] === undefined) return;

    const ret = Object.assign({
      fontStyle: 'normal',
      fontWeight: 'normal',
      fontVariant: 'normal',
      fontStretch: 'normal'
    }, x[0]);

    ret.fontSize = x[1];
    ret.lineHeight = x[2][1] === '/' ? x[2][3] : 'normal';
    ret.fontFamily = x[3];
    return ret;
  };
  var peg$f45 = function() { return {outer: 'block', inner: 'flow'}; };
  var peg$f46 = function() { return {outer: 'inline', inner: 'flow-root'}; };
  var peg$f47 = function() { return {outer: 'inline', inner: 'flow'}; };
  var peg$f48 = function() { return {outer: 'block', inner: 'flow-root'}; };
  var peg$f49 = function() { return {outer: 'none', inner: 'none'}; };
  var peg$f50 = function(fontSize) {
    return {fontSize};
  };
  var peg$f51 = function(lineHeight) {
    return {lineHeight};
  };
  var peg$f52 = function(fontStyle) {
    return {fontStyle};
  };
  var peg$f53 = function(fontWeight) {
    return fontWeight && {fontWeight};
  };
  var peg$f54 = function(fontVariant) {
    return {fontVariant};
  };
  var peg$f55 = function(fontStretch) {
    return {fontStretch};
  };
  var peg$f56 = function(fontFamily) {
    return {fontFamily};
  };
  var peg$f57 = function(font) {
    return font && (typeof font === "object" ? font : {font});
  };
  var peg$f58 = function(color) {
    return {color};
  };
  var peg$f59 = function(direction) {
    return {direction};
  };
  var peg$f60 = function(display) {
    return {display};
  };
  var peg$f61 = function(writingMode) {
    return {writingMode};
  };
  var peg$f62 = function(whiteSpace) {
    return {whiteSpace};
  };
  var peg$f63 = function(tabSize) {
    return {tabSize};
  };
  var peg$f64 = function(position) {
    return {position};
  };
  var peg$f65 = function(marginTop) {
    return {marginTop};
  };
  var peg$f66 = function(marginRight) {
    return {marginRight};
  };
  var peg$f67 = function(marginBottom) {
    return {marginBottom};
  };
  var peg$f68 = function(marginLeft) {
    return {marginLeft};
  };
  var peg$f69 = function(t, r, b, l) {
    return setTopRightBottomLeft({}, 'margin', '', t, r, b, l);
  };
  var peg$f70 = function(t, h, b) {
    return setTopRightBottomLeft({}, 'margin', '', t, h, b, h);
  };
  var peg$f71 = function(v, h) {
    return setTopRightBottomLeft({}, 'margin', '', v, h, v, h);
  };
  var peg$f72 = function(s) {
    return setTopRightBottomLeft({}, 'margin', '', s, s, s, s);
  };
  var peg$f73 = function(paddingTop) {
    return {paddingTop};
  };
  var peg$f74 = function(paddingRight) {
    return {paddingRight};
  };
  var peg$f75 = function(paddingBottom) {
    return {paddingBottom};
  };
  var peg$f76 = function(paddingLeft) {
    return {paddingLeft};
  };
  var peg$f77 = function(t, r, b, l) {
    return setTopRightBottomLeft({}, 'padding', '', t, r, b, l);
  };
  var peg$f78 = function(t, h, b) {
    return setTopRightBottomLeft({}, 'padding', '', t, h, b, h);
  };
  var peg$f79 = function(v, h) {
    return setTopRightBottomLeft({}, 'padding', '', v, h, v, h);
  };
  var peg$f80 = function(s) {
    return setTopRightBottomLeft({}, 'padding', '', s, s, s, s);
  };
  var peg$f81 = function(borderTopWidth) {
    return {borderTopWidth};
  };
  var peg$f82 = function(borderRightWidth) {
    return {borderRightWidth};
  };
  var peg$f83 = function(borderBottomWidth) {
    return {borderBottomWidth};
  };
  var peg$f84 = function(borderLeftWidth) {
    return {borderLeftWidth};
  };
  var peg$f85 = function(t, r, b, l) {
    return setTopRightBottomLeft({}, 'border', 'Width', t, r, b, l);
  };
  var peg$f86 = function(t, h, b) {
    return setTopRightBottomLeft({}, 'border', 'Width', t, h, b, h);
  };
  var peg$f87 = function(v, h) {
    return setTopRightBottomLeft({}, 'border', 'Width', v, h, v, h);
  };
  var peg$f88 = function(s) {
    return setTopRightBottomLeft({}, 'border', 'Width', s, s, s, s);
  };
  var peg$f89 = function(borderTopStyle) {
    return {borderTopStyle};
  };
  var peg$f90 = function(borderRightStyle) {
    return {borderRightStyle};
  };
  var peg$f91 = function(borderBottomStyle) {
    return {borderBottomStyle};
  };
  var peg$f92 = function(borderLeftStyle) {
    return {borderLeftStyle};
  };
  var peg$f93 = function(t, r, b, l) {
    return setTopRightBottomLeft({}, 'border', 'Style', t, r, b, l);
  };
  var peg$f94 = function(t, h, b) {
    return setTopRightBottomLeft({}, 'border', 'Style', t, h, b, h);
  };
  var peg$f95 = function(v, h) {
    return setTopRightBottomLeft({}, 'border', 'Style', v, h, v, h);
  };
  var peg$f96 = function(s) {
    return setTopRightBottomLeft({}, 'border', 'Style', s, s, s, s);
  };
  var peg$f97 = function(borderTopColor) {
    return {borderTopColor};
  };
  var peg$f98 = function(borderRightColor) {
    return {borderRightColor};
  };
  var peg$f99 = function(borderBottomColor) {
    return {borderBottomColor};
  };
  var peg$f100 = function(borderLeftColor) {
    return {borderLeftColor};
  };
  var peg$f101 = function(t, r, b, l) {
    return setTopRightBottomLeft({}, 'border', 'Color', t, r, b, l);
  };
  var peg$f102 = function(t, h, b) {
    return setTopRightBottomLeft({}, 'border', 'Color', t, h, b, h);
  };
  var peg$f103 = function(v, h) {
    return setTopRightBottomLeft({}, 'border', 'Color', v, h, v, h);
  };
  var peg$f104 = function(s) {
    return setTopRightBottomLeft({}, 'border', 'Color', s, s, s, s);
  };
  var peg$f105 = function(t, w, s, c) {
    const ret = {};
    setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
    setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
    if (c) setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
    return ret;
  };
  var peg$f106 = function(t, s, w, c) {
    const ret = {};
    setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
    setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
    if (c) setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
    return ret;
  };
  var peg$f107 = function(t, w, c, s) {
    const ret = {};
    setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
    setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
    if (s) setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
    return ret;
  };
  var peg$f108 = function(t, c, w, s) {
    const ret = {};
    setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
    setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
    if (s) setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
    return ret;
  };
  var peg$f109 = function(t, c, s, w) {
    const ret = {};
    setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
    setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
    if (w) setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
    return ret;
  };
  var peg$f110 = function(t, s, c, w) {
    const ret = {};
    setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
    setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
    if (w) setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
    return ret;
  };
  var peg$f111 = function(t, w) {
    return setTopRightBottomLeftOr(t, {}, 'border', 'Width', w, w, w, w);
  };
  var peg$f112 = function(t, c) {
    return setTopRightBottomLeftOr(t, {}, 'border', 'Color', c, c, c, c);
  };
  var peg$f113 = function(t, s) {
    return setTopRightBottomLeftOr(t, {}, 'border', 'Style', s, s, s, s);
  };
  var peg$f114 = function(t, i) {
    const ret = setTopRightBottomLeftOr(t, {}, 'border', 'Style', i, i, i, i);
    setTopRightBottomLeftOr(t, ret, 'border', 'Width', i, i, i, i);
    setTopRightBottomLeftOr(t, ret, 'border', 'Color', i, i, i, i);
    return ret;
  };
  var peg$f115 = function(backgroundColor) {
    return {backgroundColor};
  };
  var peg$f116 = function(backgroundClip) {
    return {backgroundClip};
  };
  var peg$f117 = function(textAlign) {
    return {textAlign};
  };
  var peg$f118 = function(float) {
    return {float};
  };
  var peg$f119 = function(clear) {
    return {clear};
  };
  var peg$f120 = function(width) {
    return {width};
  };
  var peg$f121 = function(height) {
    return {height};
  };
  var peg$f122 = function(boxSizing) {
    return {boxSizing};
  };
  var peg$f123 = function(digits) {
      return String.fromCharCode(parseInt(digits, 16));
    };
  var peg$f124 = function(ch) { return ch; };
  var peg$f125 = function(nl) { return ''; };
  var peg$f126 = function(chars) {
      return chars.join('');
    };
  var peg$f127 = function(nl) { return ''; };
  var peg$f128 = function(chars) {
      return chars.join('');
    };
  var peg$f129 = function(prefix, start, chars) {
      return prefix + start + chars.join('');
    };
  var peg$f130 = function(chars) { return chars.join(''); };
  var peg$f131 = function() {
      return parseFloat(text());
    };
  var peg$f132 = function(chars) { return chars.join(''); };
  var peg$f133 = function() { return 'a'; };
  var peg$f134 = function() { return 'c'; };
  var peg$f135 = function() { return 'd'; };
  var peg$f136 = function() { return 'e'; };
  var peg$f137 = function() { return 'g'; };
  var peg$f138 = function() { return 'h'; };
  var peg$f139 = function() { return 'i'; };
  var peg$f140 = function() { return 'k'; };
  var peg$f141 = function() { return 'l'; };
  var peg$f142 = function() { return 'm'; };
  var peg$f143 = function() { return 'n'; };
  var peg$f144 = function() { return 'o'; };
  var peg$f145 = function() { return 'p'; };
  var peg$f146 = function() { return 'r'; };
  var peg$f147 = function() { return 's'; };
  var peg$f148 = function() { return 't'; };
  var peg$f149 = function() { return 'u'; };
  var peg$f150 = function() { return 'x'; };
  var peg$f151 = function() { return 'z'; };
  var peg$f152 = function(string) { return string; };
  var peg$f153 = function(ident) { return ident; };
  var peg$f154 = function(name) { return '#' + name; };
  var peg$f155 = function(value) { return { value: value, unit: 'ex' }; };
  var peg$f156 = function(value) { return value; };
  var peg$f157 = function(value) { return { value: value, unit: 'cm' }; };
  var peg$f158 = function(value) { return { value: value, unit: 'mm' }; };
  var peg$f159 = function(value) { return { value: value, unit: 'in' }; };
  var peg$f160 = function(value) { return { value: value, unit: 'pt' }; };
  var peg$f161 = function(value) { return { value: value, unit: 'pc' }; };
  var peg$f162 = function(value) { return { value: value, unit: 'em' }; };
  var peg$f163 = function() { return 0; };
  var peg$f164 = function(value) { return { value: value, unit: 'deg'  }; };
  var peg$f165 = function(value) { return { value: value, unit: 'rad'  }; };
  var peg$f166 = function(value) { return { value: value, unit: 'grad' }; };
  var peg$f167 = function(value) { return { value: value, unit: 'ms' }; };
  var peg$f168 = function(value) { return { value: value, unit: 's'  }; };
  var peg$f169 = function(value) { return { value: value, unit: 'hz' }; };
  var peg$f170 = function(value) { return { value: value, unit: 'kh' }; };
  var peg$f171 = function(value) { return { value: value, unit: '%' }; };
  var peg$f172 = function(value) { return { value: value, unit: null }; };
  var peg$f173 = function(url) { return url; };
  var peg$f174 = function(url) { return url; };
  var peg$f175 = function(name) { return name; };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseS();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseS();
    }
    s2 = peg$parsedeclaration();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = [];
    s4 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 59) {
      s5 = peg$c0;
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s5 !== peg$FAILED) {
      s6 = [];
      s7 = peg$parseS();
      while (s7 !== peg$FAILED) {
        s6.push(s7);
        s7 = peg$parseS();
      }
      s7 = peg$parsedeclaration();
      if (s7 === peg$FAILED) {
        s7 = null;
      }
      s5 = [s5, s6, s7];
      s4 = s5;
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s5 = peg$c0;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s5 !== peg$FAILED) {
        s6 = [];
        s7 = peg$parseS();
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$parseS();
        }
        s7 = peg$parsedeclaration();
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s0 = peg$f0(s2, s3);

    return s0;
  }

  function peg$parsedeclaration() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parsefont_size_dec();
    if (s0 === peg$FAILED) {
      s0 = peg$parseline_height_dec();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefont_style_dec();
        if (s0 === peg$FAILED) {
          s0 = peg$parsefont_weight_dec();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefont_variant_dec();
            if (s0 === peg$FAILED) {
              s0 = peg$parsefont_family_dec();
              if (s0 === peg$FAILED) {
                s0 = peg$parsefont_dec();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecolor_dec();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsedirection_dec();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsedisplay_dec();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsewriting_mode_dec();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsewhite_space_dec();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsetab_size_dec();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseposition_dec();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsemargin_top_dec();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsemargin_right_dec();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsemargin_bottom_dec();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsemargin_left_dec();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsemargin_dec();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parsepadding_top_dec();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parsepadding_right_dec();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsepadding_bottom_dec();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsepadding_left_dec();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsepadding_dec();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseborder_top_width_dec();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseborder_right_width_dec();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseborder_bottom_width_dec();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseborder_left_width_dec();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseborder_width_dec();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseborder_top_style_dec();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseborder_right_style_dec();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseborder_bottom_style_dec();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseborder_left_style_dec();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseborder_style_dec();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseborder_top_color_dec();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseborder_right_color_dec();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseborder_bottom_color_dec();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseborder_left_color_dec();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseborder_color_dec();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseborder_dec();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parsewidth_dec();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseheight_dec();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parsebox_sizing_dec();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parsebackground_color_dec();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parsebackground_clip_dec();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parsetext_align_dec();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parsefloat_dec();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseclear_dec();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$currPos;
                                                                                                    s1 = peg$parseproperty();
                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                      if (input.charCodeAt(peg$currPos) === 58) {
                                                                                                        s2 = peg$c1;
                                                                                                        peg$currPos++;
                                                                                                      } else {
                                                                                                        s2 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e1); }
                                                                                                      }
                                                                                                      if (s2 !== peg$FAILED) {
                                                                                                        s3 = [];
                                                                                                        s4 = peg$parseS();
                                                                                                        while (s4 !== peg$FAILED) {
                                                                                                          s3.push(s4);
                                                                                                          s4 = peg$parseS();
                                                                                                        }
                                                                                                        s4 = peg$parseexpr();
                                                                                                        if (s4 !== peg$FAILED) {
                                                                                                          peg$savedPos = s0;
                                                                                                          s0 = peg$f1(s1, s4);
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$FAILED;
                                                                                                        }
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$FAILED;
                                                                                                      }
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$FAILED;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseproperty() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseIDENT();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      peg$savedPos = s0;
      s0 = peg$f2(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseterm();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseoperator();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseterm();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseoperator();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseterm();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f3(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoperator() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c2;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      peg$savedPos = s0;
      s0 = peg$f4();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        peg$savedPos = s0;
        s0 = peg$f5();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseterm() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsePERCENTAGE();
    if (s1 === peg$FAILED) {
      s1 = peg$parseLENGTH();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEXS();
        if (s1 === peg$FAILED) {
          s1 = peg$parseANGLE();
          if (s1 === peg$FAILED) {
            s1 = peg$parseTIME();
            if (s1 === peg$FAILED) {
              s1 = peg$parseFREQ();
              if (s1 === peg$FAILED) {
                s1 = peg$parseNUMBER();
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      peg$savedPos = s0;
      s0 = peg$f6(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSTRING();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        peg$savedPos = s0;
        s0 = peg$f7(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseURI();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseS();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseS();
          }
          peg$savedPos = s0;
          s0 = peg$f8(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsefunction();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecolor();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseIDENT();
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseS();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseS();
                }
                peg$savedPos = s0;
                s0 = peg$f9(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefunction() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseFUNCTION();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      s3 = peg$parseexpr();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c4;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseS();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseS();
          }
          peg$savedPos = s0;
          s0 = peg$f10(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsergba_rgb_term() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 37) {
        s2 = peg$c5;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f11(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 49) {
        s2 = peg$c6;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s3 !== peg$FAILED) {
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 50) {
          s2 = peg$c7;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
        if (s2 !== peg$FAILED) {
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s3 !== peg$FAILED) {
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c8) {
            s2 = peg$c8;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s2 !== peg$FAILED) {
            if (peg$r2.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e11); }
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s2 !== peg$FAILED) {
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f12(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsergba_a_term() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 37) {
        s2 = peg$c5;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c9;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s1, s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f15(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsecolor() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    if (input.substr(peg$currPos, 5) === peg$c10) {
      s2 = peg$c10;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseS();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseS();
      }
      s4 = peg$parsergba_rgb_term();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseS();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseS();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c3;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parseS();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseS();
          }
          s8 = peg$parsergba_rgb_term();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parseS();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parseS();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c3;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parseS();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parseS();
              }
              s12 = peg$parsergba_rgb_term();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parseS();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parseS();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c3;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e3); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parseS();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parseS();
                  }
                  s16 = peg$parsergba_a_term();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parseS();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parseS();
                    }
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s18 = peg$c4;
                      peg$currPos++;
                    } else {
                      s18 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e4); }
                    }
                    if (s18 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f16(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsecomment();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsecomment();
      }
      if (input.substr(peg$currPos, 4) === peg$c11) {
        s2 = peg$c11;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseS();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseS();
        }
        s4 = peg$parsergba_rgb_term();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseS();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseS();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c3;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parseS();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseS();
            }
            s8 = peg$parsergba_rgb_term();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parseS();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parseS();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c3;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parseS();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parseS();
                }
                s12 = peg$parsergba_rgb_term();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parseS();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parseS();
                  }
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s14 = peg$c4;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e4); }
                  }
                  if (s14 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f17(s4, s8, s12);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsecomment();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsecomment();
        }
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c12;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e16); }
          }
          if (s4 !== peg$FAILED) {
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s5 !== peg$FAILED) {
              if (peg$r3.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e16); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (peg$r3.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e16); }
              }
              if (s6 !== peg$FAILED) {
                if (peg$r3.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e16); }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                if (peg$r3.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e16); }
                }
                if (s7 !== peg$FAILED) {
                  if (peg$r3.test(input.charAt(peg$currPos))) {
                    s8 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e16); }
                  }
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f18(s3, s4, s5, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsecomment();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsecomment();
          }
          if (input.charCodeAt(peg$currPos) === 35) {
            s2 = peg$c12;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e15); }
          }
          if (s2 !== peg$FAILED) {
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s3 !== peg$FAILED) {
              if (peg$r3.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e16); }
              }
              if (s4 !== peg$FAILED) {
                if (peg$r4.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e17); }
                }
                if (s5 !== peg$FAILED) {
                  if (peg$r3.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e16); }
                  }
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f19(s3, s4, s5, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c13) {
              s1 = peg$c13;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e18); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c14) {
                s1 = peg$c14;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e19); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c15) {
                  s1 = peg$c15;
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e20); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c16) {
                    s1 = peg$c16;
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e21); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c17) {
                      s1 = peg$c17;
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e22); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c18) {
                        s1 = peg$c18;
                        peg$currPos += 6;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e23); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c19) {
                          s1 = peg$c19;
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e24); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c20) {
                            s1 = peg$c20;
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e25); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c21) {
                              s1 = peg$c21;
                              peg$currPos += 4;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e26); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 5) === peg$c22) {
                                s1 = peg$c22;
                                peg$currPos += 5;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e27); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c23) {
                                  s1 = peg$c23;
                                  peg$currPos += 4;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e28); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 4) === peg$c24) {
                                    s1 = peg$c24;
                                    peg$currPos += 4;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e29); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c25) {
                                      s1 = peg$c25;
                                      peg$currPos += 4;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e30); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 4) === peg$c26) {
                                        s1 = peg$c26;
                                        peg$currPos += 4;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e31); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 5) === peg$c27) {
                                          s1 = peg$c27;
                                          peg$currPos += 5;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e32); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 6) === peg$c28) {
                                            s1 = peg$c28;
                                            peg$currPos += 6;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e33); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 4) === peg$c29) {
                                              s1 = peg$c29;
                                              peg$currPos += 4;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e34); }
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 11) === peg$c30) {
                                                s1 = peg$c30;
                                                peg$currPos += 11;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e35); }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f20();
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedefault() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c32) {
        s1 = peg$c32;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f22();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseabsolute_size() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f23();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c34) {
        s1 = peg$c34;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f24();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c35) {
          s1 = peg$c35;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f25();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c36) {
            s1 = peg$c36;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f26();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c37) {
              s1 = peg$c37;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e42); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f27();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 7) === peg$c38) {
                s1 = peg$c38;
                peg$currPos += 7;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e43); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f28();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c39) {
                  s1 = peg$c39;
                  peg$currPos += 8;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e44); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f29();
                }
                s0 = s1;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parserelative_size() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c40) {
      s1 = peg$c40;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f30();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c41) {
        s1 = peg$c41;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f31();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsefont_size() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parserelative_size();
    if (s1 === peg$FAILED) {
      s1 = peg$parseabsolute_size();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLENGTH();
        if (s1 === peg$FAILED) {
          s1 = peg$parsePERCENTAGE();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f32(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseline_height() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c42) {
      s1 = peg$c42;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s1 === peg$FAILED) {
      s1 = peg$parseLENGTH();
      if (s1 === peg$FAILED) {
        s1 = peg$parsePERCENTAGE();
        if (s1 === peg$FAILED) {
          s1 = peg$parseNUMBER();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f33(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefont_style() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c42) {
      s0 = peg$c42;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c43) {
        s0 = peg$c43;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c44) {
          s0 = peg$c44;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
      }
    }

    return s0;
  }

  function peg$parsefont_weight() {
    var s0, s1, s2;

    if (input.substr(peg$currPos, 6) === peg$c42) {
      s0 = peg$c42;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c45) {
        s0 = peg$c45;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c46) {
          s0 = peg$c46;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e51); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c47) {
            s1 = peg$c47;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e52); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f34();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$r0.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                }
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f35();
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefont_variant() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c42) {
      s0 = peg$c42;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 10) === peg$c48) {
        s0 = peg$c48;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e53); }
      }
    }

    return s0;
  }

  function peg$parsefont_stretch() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c42) {
      s0 = peg$c42;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 15) === peg$c49) {
        s0 = peg$c49;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 15) === peg$c50) {
          s0 = peg$c50;
          peg$currPos += 15;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e55); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c51) {
            s0 = peg$c51;
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e56); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 14) === peg$c52) {
              s0 = peg$c52;
              peg$currPos += 14;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 13) === peg$c53) {
                s0 = peg$c53;
                peg$currPos += 13;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e58); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c54) {
                  s0 = peg$c54;
                  peg$currPos += 8;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e59); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 14) === peg$c55) {
                    s0 = peg$c55;
                    peg$currPos += 14;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e60); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 14) === peg$c56) {
                      s0 = peg$c56;
                      peg$currPos += 14;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e61); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefont_family() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSTRING();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      peg$savedPos = s0;
      s0 = peg$f36(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseident();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseS();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          s5 = peg$parseident();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f37(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsefont_family_list() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsefont_family();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c3;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseS();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseS();
        }
        s6 = peg$parsefont_family();
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c3;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseS();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseS();
          }
          s6 = peg$parsefont_family();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f38(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefont_style_short() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsefont_style();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f39(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefont_weight_short() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsefont_weight();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f40(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefont_variant_short() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsefont_variant();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefont_stretch_short() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsefont_stretch();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f42(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefont_wssv() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parsefont_style_short();
    if (s3 === peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parsefont_size();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsefont_weight_short();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$parsefont_variant_short();
        if (s3 === peg$FAILED) {
          s3 = peg$parsefont_stretch_short();
        }
      }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$parseS();
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parsefont_style_short();
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsefont_size();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefont_weight_short();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parsefont_variant_short();
          if (s3 === peg$FAILED) {
            s3 = peg$parsefont_stretch_short();
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f43();
    s0 = s1;

    return s0;
  }

  function peg$parsefont() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsefont_wssv();
    s3 = peg$parsefont_size();
    if (s3 !== peg$FAILED) {
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$currPos;
      s7 = [];
      s8 = peg$parseS();
      while (s8 !== peg$FAILED) {
        s7.push(s8);
        s8 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 47) {
        s8 = peg$c2;
        peg$currPos++;
      } else {
        s8 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s8 !== peg$FAILED) {
        s7 = [s7, s8];
        s6 = s7;
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = [];
        s7 = peg$parseS();
        if (s7 !== peg$FAILED) {
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseS();
          }
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parseS();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseS();
        }
        if (input.charCodeAt(peg$currPos) === 47) {
          s6 = peg$c2;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parseS();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseS();
          }
          s8 = peg$parseline_height();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parseS();
            if (s10 !== peg$FAILED) {
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parseS();
              }
            } else {
              s9 = peg$FAILED;
            }
            if (s9 !== peg$FAILED) {
              s5 = [s5, s6, s7, s8, s9];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsefont_family_list();
        if (s5 !== peg$FAILED) {
          s2 = [s2, s3, s4, s5];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f44(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedirection() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c57) {
      s0 = peg$c57;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c58) {
        s0 = peg$c58;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
    }

    return s0;
  }

  function peg$parsedisplay() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c59) {
      s1 = peg$c59;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f45();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f46();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c61) {
          s1 = peg$c61;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f47();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 9) === peg$c62) {
            s1 = peg$c62;
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e67); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f48();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c63) {
              s1 = peg$c63;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e68); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f49();
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsewriting_mode() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c64) {
      s0 = peg$c64;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 11) === peg$c65) {
        s0 = peg$c65;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c66) {
          s0 = peg$c66;
          peg$currPos += 11;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e71); }
        }
      }
    }

    return s0;
  }

  function peg$parsewhite_space() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c42) {
      s0 = peg$c42;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c67) {
        s0 = peg$c67;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c68) {
          s0 = peg$c68;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e73); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c69) {
            s0 = peg$c69;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e74); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c70) {
              s0 = peg$c70;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e75); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetab_size() {
    var s0;

    s0 = peg$parseLENGTH();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNUMBER();
    }

    return s0;
  }

  function peg$parseposition() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c71) {
      s0 = peg$c71;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c72) {
        s0 = peg$c72;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c73) {
          s0 = peg$c73;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e78); }
        }
      }
    }

    return s0;
  }

  function peg$parselength_side() {
    var s0;

    s0 = peg$parseLENGTH();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePERCENTAGE();
    }

    return s0;
  }

  function peg$parsemargin_side() {
    var s0;

    s0 = peg$parseLENGTH();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePERCENTAGE();
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c74) {
          s0 = peg$c74;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e79); }
        }
      }
    }

    return s0;
  }

  function peg$parseborder_style() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c63) {
      s0 = peg$c63;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c75) {
        s0 = peg$c75;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e80); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c76) {
          s0 = peg$c76;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e81); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c77) {
            s0 = peg$c77;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e82); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c78) {
              s0 = peg$c78;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e83); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c79) {
                s0 = peg$c79;
                peg$currPos += 6;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e84); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c80) {
                  s0 = peg$c80;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e85); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c81) {
                    s0 = peg$c81;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e86); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c82) {
                      s0 = peg$c82;
                      peg$currPos += 5;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e87); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c83) {
                        s0 = peg$c83;
                        peg$currPos += 6;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e88); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefont_size_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c84) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsefont_size();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f50(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseline_height_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c85) {
      s1 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseline_height();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f51(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefont_style_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c86) {
      s1 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsefont_style();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f52(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefont_weight_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c87) {
      s1 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsefont_weight();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f53(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefont_variant_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c88) {
      s1 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsefont_variant();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f54(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefont_stretch_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c89) {
      s1 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsefont_stretch();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f55(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefont_family_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c90) {
      s1 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsedefault();
        if (s5 === peg$FAILED) {
          s5 = peg$parsefont_family_list();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f56(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefont_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c91) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsefont();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f57(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolor_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c92) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsecolor();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f58(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedirection_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c93) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsedirection();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f59(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedisplay_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c94) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsedisplay();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f60(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewriting_mode_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c95) {
      s1 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsewriting_mode();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f61(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhite_space_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c96) {
      s1 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsewhite_space();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f62(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetab_size_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c97) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsetab_size();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f63(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseposition_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c98) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseposition();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f64(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemargin_top_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c99) {
      s1 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e104); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsemargin_side();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f65(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemargin_right_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c100) {
      s1 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsemargin_side();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f66(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemargin_bottom_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c101) {
      s1 = input.substr(peg$currPos, 13);
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsemargin_side();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f67(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemargin_left_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c102) {
      s1 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsemargin_side();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f68(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemargin_dec() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c103) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsemargin_side();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseS();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseS();
          }
          s7 = peg$parsemargin_side();
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = peg$parseS();
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$parseS();
            }
            s9 = peg$parsemargin_side();
            if (s9 !== peg$FAILED) {
              s10 = [];
              s11 = peg$parseS();
              while (s11 !== peg$FAILED) {
                s10.push(s11);
                s11 = peg$parseS();
              }
              s11 = peg$parsemargin_side();
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f69(s5, s7, s9, s11);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c103) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e108); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseS();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          s5 = peg$parsemargin_side();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseS();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseS();
            }
            s7 = peg$parsemargin_side();
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parseS();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parseS();
              }
              s9 = peg$parsemargin_side();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f70(s5, s7, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c103) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e108); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseS();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseS();
          }
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c1;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseS();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseS();
            }
            s5 = peg$parsemargin_side();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              s7 = peg$parsemargin_side();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f71(s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c103) {
            s1 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e108); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c1;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseS();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseS();
              }
              s5 = peg$parsemargin_side();
              if (s5 === peg$FAILED) {
                s5 = peg$parsedefault();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f72(s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsepadding_top_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c104) {
      s1 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e109); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parselength_side();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f73(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepadding_right_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c105) {
      s1 = input.substr(peg$currPos, 13);
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parselength_side();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f74(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepadding_bottom_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c106) {
      s1 = input.substr(peg$currPos, 14);
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parselength_side();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f75(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepadding_left_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c107) {
      s1 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parselength_side();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f76(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepadding_dec() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c108) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parselength_side();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseS();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseS();
          }
          s7 = peg$parselength_side();
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = peg$parseS();
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$parseS();
            }
            s9 = peg$parselength_side();
            if (s9 !== peg$FAILED) {
              s10 = [];
              s11 = peg$parseS();
              while (s11 !== peg$FAILED) {
                s10.push(s11);
                s11 = peg$parseS();
              }
              s11 = peg$parselength_side();
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f77(s5, s7, s9, s11);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c108) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e113); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseS();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          s5 = peg$parselength_side();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseS();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseS();
            }
            s7 = peg$parselength_side();
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parseS();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parseS();
              }
              s9 = peg$parselength_side();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f78(s5, s7, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c108) {
          s1 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e113); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseS();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseS();
          }
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c1;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseS();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseS();
            }
            s5 = peg$parselength_side();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              s7 = peg$parselength_side();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f79(s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c108) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e113); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c1;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseS();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseS();
              }
              s5 = peg$parselength_side();
              if (s5 === peg$FAILED) {
                s5 = peg$parsedefault();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f80(s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseborder_top_width_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c109) {
      s1 = input.substr(peg$currPos, 16);
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseLENGTH();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f81(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseborder_right_width_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18).toLowerCase() === peg$c110) {
      s1 = input.substr(peg$currPos, 18);
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseLENGTH();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f82(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseborder_bottom_width_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 19).toLowerCase() === peg$c111) {
      s1 = input.substr(peg$currPos, 19);
      peg$currPos += 19;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseLENGTH();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f83(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseborder_left_width_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c112) {
      s1 = input.substr(peg$currPos, 17);
      peg$currPos += 17;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseLENGTH();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f84(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseborder_width_dec() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c113) {
      s1 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseLENGTH();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseS();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseS();
          }
          s7 = peg$parseLENGTH();
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = peg$parseS();
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$parseS();
            }
            s9 = peg$parseLENGTH();
            if (s9 !== peg$FAILED) {
              s10 = [];
              s11 = peg$parseS();
              while (s11 !== peg$FAILED) {
                s10.push(s11);
                s11 = peg$parseS();
              }
              s11 = peg$parseLENGTH();
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f85(s5, s7, s9, s11);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c113) {
        s1 = input.substr(peg$currPos, 12);
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseS();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          s5 = peg$parseLENGTH();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseS();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseS();
            }
            s7 = peg$parseLENGTH();
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parseS();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parseS();
              }
              s9 = peg$parseLENGTH();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f86(s5, s7, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c113) {
          s1 = input.substr(peg$currPos, 12);
          peg$currPos += 12;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e118); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseS();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseS();
          }
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c1;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseS();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseS();
            }
            s5 = peg$parseLENGTH();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              s7 = peg$parseLENGTH();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f87(s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c113) {
            s1 = input.substr(peg$currPos, 12);
            peg$currPos += 12;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e118); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c1;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseS();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseS();
              }
              s5 = peg$parseLENGTH();
              if (s5 === peg$FAILED) {
                s5 = peg$parsedefault();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f88(s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseborder_top_style_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c114) {
      s1 = input.substr(peg$currPos, 16);
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseborder_style();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f89(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseborder_right_style_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18).toLowerCase() === peg$c115) {
      s1 = input.substr(peg$currPos, 18);
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseborder_style();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f90(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseborder_bottom_style_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 19).toLowerCase() === peg$c116) {
      s1 = input.substr(peg$currPos, 19);
      peg$currPos += 19;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseborder_style();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f91(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseborder_left_style_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c117) {
      s1 = input.substr(peg$currPos, 17);
      peg$currPos += 17;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseborder_style();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f92(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseborder_style_dec() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c118) {
      s1 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parseborder_style();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseS();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseS();
          }
          s7 = peg$parseborder_style();
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = peg$parseS();
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$parseS();
            }
            s9 = peg$parseborder_style();
            if (s9 !== peg$FAILED) {
              s10 = [];
              s11 = peg$parseS();
              while (s11 !== peg$FAILED) {
                s10.push(s11);
                s11 = peg$parseS();
              }
              s11 = peg$parseborder_style();
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f93(s5, s7, s9, s11);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c118) {
        s1 = input.substr(peg$currPos, 12);
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e123); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseS();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          s5 = peg$parseborder_style();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseS();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseS();
            }
            s7 = peg$parseborder_style();
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parseS();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parseS();
              }
              s9 = peg$parseborder_style();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f94(s5, s7, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c118) {
          s1 = input.substr(peg$currPos, 12);
          peg$currPos += 12;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e123); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseS();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseS();
          }
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c1;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseS();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseS();
            }
            s5 = peg$parseborder_style();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              s7 = peg$parseborder_style();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f95(s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c118) {
            s1 = input.substr(peg$currPos, 12);
            peg$currPos += 12;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e123); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c1;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseS();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseS();
              }
              s5 = peg$parseborder_style();
              if (s5 === peg$FAILED) {
                s5 = peg$parsedefault();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f96(s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseborder_top_color_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c119) {
      s1 = input.substr(peg$currPos, 16);
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsecolor();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f97(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseborder_right_color_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18).toLowerCase() === peg$c120) {
      s1 = input.substr(peg$currPos, 18);
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsecolor();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f98(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseborder_bottom_color_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 19).toLowerCase() === peg$c121) {
      s1 = input.substr(peg$currPos, 19);
      peg$currPos += 19;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e126); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsecolor();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f99(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseborder_left_color_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c122) {
      s1 = input.substr(peg$currPos, 17);
      peg$currPos += 17;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsecolor();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f100(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseborder_color_dec() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c123) {
      s1 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsecolor();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseS();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseS();
          }
          s7 = peg$parsecolor();
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = peg$parseS();
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$parseS();
            }
            s9 = peg$parsecolor();
            if (s9 !== peg$FAILED) {
              s10 = [];
              s11 = peg$parseS();
              while (s11 !== peg$FAILED) {
                s10.push(s11);
                s11 = peg$parseS();
              }
              s11 = peg$parsecolor();
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f101(s5, s7, s9, s11);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c123) {
        s1 = input.substr(peg$currPos, 12);
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseS();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          s5 = peg$parsecolor();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseS();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseS();
            }
            s7 = peg$parsecolor();
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parseS();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parseS();
              }
              s9 = peg$parsecolor();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f102(s5, s7, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c123) {
          s1 = input.substr(peg$currPos, 12);
          peg$currPos += 12;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseS();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseS();
          }
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c1;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseS();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseS();
            }
            s5 = peg$parsecolor();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              s7 = peg$parsecolor();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f103(s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c123) {
            s1 = input.substr(peg$currPos, 12);
            peg$currPos += 12;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e128); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c1;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseS();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseS();
              }
              s5 = peg$parsecolor();
              if (s5 === peg$FAILED) {
                s5 = peg$parsedefault();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f104(s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseborder_s() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c124) {
      s0 = peg$c124;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c125) {
        s0 = peg$c125;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e130); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c126) {
          s0 = peg$c126;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e131); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c127) {
            s0 = peg$c127;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e132); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseborder_dec() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseborder_s();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$parseS();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c1;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseS();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseS();
        }
        s6 = peg$parseLENGTH();
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parseS();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseS();
          }
          s8 = peg$parseborder_style();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parseS();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parseS();
            }
            s10 = peg$parsecolor();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f105(s2, s6, s8, s10);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e133); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseborder_s();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = [];
        s4 = peg$parseS();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseS();
        }
        if (input.charCodeAt(peg$currPos) === 58) {
          s4 = peg$c1;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseS();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseS();
          }
          s6 = peg$parseborder_style();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parseS();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseS();
            }
            s8 = peg$parseLENGTH();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parseS();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parseS();
              }
              s10 = peg$parsecolor();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f106(s2, s6, s8, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e133); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseborder_s();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = [];
          s4 = peg$parseS();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseS();
          }
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c1;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseS();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseS();
            }
            s6 = peg$parseLENGTH();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseS();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseS();
              }
              s8 = peg$parsecolor();
              if (s8 !== peg$FAILED) {
                s9 = [];
                s10 = peg$parseS();
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parseS();
                }
                s10 = peg$parseborder_style();
                if (s10 === peg$FAILED) {
                  s10 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f107(s2, s6, s8, s10);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
            s1 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e133); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseborder_s();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = [];
            s4 = peg$parseS();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseS();
            }
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c1;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseS();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseS();
              }
              s6 = peg$parsecolor();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseS();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseS();
                }
                s8 = peg$parseLENGTH();
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$parseS();
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$parseS();
                  }
                  s10 = peg$parseborder_style();
                  if (s10 === peg$FAILED) {
                    s10 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f108(s2, s6, s8, s10);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
              s1 = input.substr(peg$currPos, 6);
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e133); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseborder_s();
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (input.charCodeAt(peg$currPos) === 58) {
                s4 = peg$c1;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseS();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseS();
                }
                s6 = peg$parsecolor();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseS();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseS();
                  }
                  s8 = peg$parseborder_style();
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$parseS();
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parseS();
                    }
                    s10 = peg$parseLENGTH();
                    if (s10 === peg$FAILED) {
                      s10 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f109(s2, s6, s8, s10);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
                s1 = input.substr(peg$currPos, 6);
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e133); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseborder_s();
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                s3 = [];
                s4 = peg$parseS();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseS();
                }
                if (input.charCodeAt(peg$currPos) === 58) {
                  s4 = peg$c1;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e1); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseS();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseS();
                  }
                  s6 = peg$parseborder_style();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseS();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseS();
                    }
                    s8 = peg$parsecolor();
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseS();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseS();
                      }
                      s10 = peg$parseLENGTH();
                      if (s10 === peg$FAILED) {
                        s10 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f110(s2, s6, s8, s10);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
                  s1 = input.substr(peg$currPos, 6);
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e133); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseborder_s();
                  if (s2 === peg$FAILED) {
                    s2 = null;
                  }
                  s3 = [];
                  s4 = peg$parseS();
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseS();
                  }
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s4 = peg$c1;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e1); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parseS();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parseS();
                    }
                    s6 = peg$parseLENGTH();
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parseS();
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parseS();
                      }
                      peg$savedPos = s0;
                      s0 = peg$f111(s2, s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
                    s1 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e133); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseborder_s();
                    if (s2 === peg$FAILED) {
                      s2 = null;
                    }
                    s3 = [];
                    s4 = peg$parseS();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parseS();
                    }
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s4 = peg$c1;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e1); }
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parseS();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parseS();
                      }
                      s6 = peg$parsecolor();
                      if (s6 !== peg$FAILED) {
                        s7 = [];
                        s8 = peg$parseS();
                        while (s8 !== peg$FAILED) {
                          s7.push(s8);
                          s8 = peg$parseS();
                        }
                        peg$savedPos = s0;
                        s0 = peg$f112(s2, s6);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
                      s1 = input.substr(peg$currPos, 6);
                      peg$currPos += 6;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e133); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseborder_s();
                      if (s2 === peg$FAILED) {
                        s2 = null;
                      }
                      s3 = [];
                      s4 = peg$parseS();
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parseS();
                      }
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s4 = peg$c1;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e1); }
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = [];
                        s6 = peg$parseS();
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          s6 = peg$parseS();
                        }
                        s6 = peg$parseborder_style();
                        if (s6 !== peg$FAILED) {
                          s7 = [];
                          s8 = peg$parseS();
                          while (s8 !== peg$FAILED) {
                            s7.push(s8);
                            s8 = peg$parseS();
                          }
                          peg$savedPos = s0;
                          s0 = peg$f113(s2, s6);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
                        s1 = input.substr(peg$currPos, 6);
                        peg$currPos += 6;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e133); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseborder_s();
                        if (s2 === peg$FAILED) {
                          s2 = null;
                        }
                        s3 = [];
                        s4 = peg$parseS();
                        while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$parseS();
                        }
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s4 = peg$c1;
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e1); }
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = [];
                          s6 = peg$parseS();
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parseS();
                          }
                          s6 = peg$parsedefault();
                          if (s6 !== peg$FAILED) {
                            s7 = [];
                            s8 = peg$parseS();
                            while (s8 !== peg$FAILED) {
                              s7.push(s8);
                              s8 = peg$parseS();
                            }
                            peg$savedPos = s0;
                            s0 = peg$f114(s2, s6);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsebackground_color_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c129) {
      s1 = input.substr(peg$currPos, 16);
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parsecolor();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedefault();
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f115(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebackground_clip_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 15).toLowerCase() === peg$c130) {
      s1 = input.substr(peg$currPos, 15);
      peg$currPos += 15;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        if (input.substr(peg$currPos, 10) === peg$c131) {
          s5 = peg$c131;
          peg$currPos += 10;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e136); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c132) {
            s5 = peg$c132;
            peg$currPos += 11;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e137); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 11) === peg$c133) {
              s5 = peg$c133;
              peg$currPos += 11;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e138); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$parsedefault();
            }
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f116(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetext_align_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c134) {
      s1 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        if (input.substr(peg$currPos, 5) === peg$c135) {
          s5 = peg$c135;
          peg$currPos += 5;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e140); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c136) {
            s5 = peg$c136;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e141); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c137) {
              s5 = peg$c137;
              peg$currPos += 4;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e142); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c138) {
                s5 = peg$c138;
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e143); }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c139) {
                  s5 = peg$c139;
                  peg$currPos += 6;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e144); }
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$parsedefault();
                }
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f117(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefloat_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c140) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e145); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        if (input.substr(peg$currPos, 4) === peg$c137) {
          s5 = peg$c137;
          peg$currPos += 4;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e142); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c138) {
            s5 = peg$c138;
            peg$currPos += 5;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e143); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c63) {
              s5 = peg$c63;
              peg$currPos += 4;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e68); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$parsedefault();
            }
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f118(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseclear_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c141) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e146); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        if (input.substr(peg$currPos, 4) === peg$c137) {
          s5 = peg$c137;
          peg$currPos += 4;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e142); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c138) {
            s5 = peg$c138;
            peg$currPos += 5;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e143); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c63) {
              s5 = peg$c63;
              peg$currPos += 4;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e68); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c142) {
                s5 = peg$c142;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e147); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$parsedefault();
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f119(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewidth_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c143) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e148); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parselength_side();
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c74) {
            s5 = peg$c74;
            peg$currPos += 4;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e79); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parsedefault();
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f120(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseheight_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c144) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e149); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        s5 = peg$parselength_side();
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c74) {
            s5 = peg$c74;
            peg$currPos += 4;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e79); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parsedefault();
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f121(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebox_sizing_dec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c145) {
      s1 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        if (input.substr(peg$currPos, 10) === peg$c131) {
          s5 = peg$c131;
          peg$currPos += 10;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e136); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c132) {
            s5 = peg$c132;
            peg$currPos += 11;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e137); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parsedefault();
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f122(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseh() {
    var s0;

    if (peg$r5.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e151); }
    }

    return s0;
  }

  function peg$parsenonascii() {
    var s0;

    if (peg$r6.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e152); }
    }

    return s0;
  }

  function peg$parseunicode() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c146;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e153); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parseh();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseh();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseh();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseh();
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parseh();
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parseh();
        if (s9 === peg$FAILED) {
          s9 = null;
        }
        s4 = [s4, s5, s6, s7, s8, s9];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c147) {
          s3 = peg$c147;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e154); }
        }
        if (s3 === peg$FAILED) {
          if (peg$r7.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e155); }
          }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f123(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseescape() {
    var s0, s1, s2;

    s0 = peg$parseunicode();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e156); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f124(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsenmstart() {
    var s0;

    if (peg$r9.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e157); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsenonascii();
      if (s0 === peg$FAILED) {
        s0 = peg$parseescape();
      }
    }

    return s0;
  }

  function peg$parsenmchar() {
    var s0;

    if (peg$r10.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e158); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsenonascii();
      if (s0 === peg$FAILED) {
        s0 = peg$parseescape();
      }
    }

    return s0;
  }

  function peg$parsestring1() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c148;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e159); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r11.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e160); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s4 = peg$c146;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e153); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsenl();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f125(s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parseescape();
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r11.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e160); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s4 = peg$c146;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e153); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsenl();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f125(s5);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseescape();
          }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c148;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e159); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f126(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestring2() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c149;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e161); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r12.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e162); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s4 = peg$c146;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e153); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsenl();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f127(s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parseescape();
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r12.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e162); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s4 = peg$c146;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e153); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsenl();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f127(s5);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseescape();
          }
        }
      }
      if (input.charCodeAt(peg$currPos) === 39) {
        s3 = peg$c149;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e161); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f128(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c150) {
      s1 = peg$c150;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e163); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r13.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e164); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r13.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e164); }
        }
      }
      s3 = [];
      if (input.charCodeAt(peg$currPos) === 42) {
        s4 = peg$c151;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e165); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (input.charCodeAt(peg$currPos) === 42) {
            s4 = peg$c151;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e165); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        if (peg$r14.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e166); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          if (peg$r13.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e164); }
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            if (peg$r13.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e164); }
            }
          }
          s8 = [];
          if (input.charCodeAt(peg$currPos) === 42) {
            s9 = peg$c151;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e165); }
          }
          if (s9 !== peg$FAILED) {
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              if (input.charCodeAt(peg$currPos) === 42) {
                s9 = peg$c151;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e165); }
              }
            }
          } else {
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          if (peg$r14.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e166); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            if (peg$r13.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e164); }
            }
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (peg$r13.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e164); }
              }
            }
            s8 = [];
            if (input.charCodeAt(peg$currPos) === 42) {
              s9 = peg$c151;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e165); }
            }
            if (s9 !== peg$FAILED) {
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                if (input.charCodeAt(peg$currPos) === 42) {
                  s9 = peg$c151;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e165); }
                }
              }
            } else {
              s8 = peg$FAILED;
            }
            if (s8 !== peg$FAILED) {
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (input.charCodeAt(peg$currPos) === 47) {
          s5 = peg$c2;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s5 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4, s5];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseident() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s2 = peg$c152;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e167); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s1 = input.substring(s1, peg$currPos);
    s2 = peg$parsenmstart();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsenmchar();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsenmchar();
      }
      peg$savedPos = s0;
      s0 = peg$f129(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsename() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsenmchar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsenmchar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f130(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenum() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (peg$r15.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e168); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$currPos;
    s3 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
    }
    if (input.charCodeAt(peg$currPos) === 46) {
      s4 = peg$c9;
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s4 !== peg$FAILED) {
      s5 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s6 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s6 !== peg$FAILED) {
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
        }
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 101) {
        s4 = peg$c153;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e169); }
      }
      if (s4 !== peg$FAILED) {
        if (peg$r15.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e168); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = [];
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s7 !== peg$FAILED) {
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
          }
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f131();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestring() {
    var s0;

    s0 = peg$parsestring1();
    if (s0 === peg$FAILED) {
      s0 = peg$parsestring2();
    }

    return s0;
  }

  function peg$parseurl() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r16.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e170); }
    }
    if (s2 === peg$FAILED) {
      s2 = peg$parsenonascii();
      if (s2 === peg$FAILED) {
        s2 = peg$parseescape();
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (peg$r16.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e170); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parsenonascii();
        if (s2 === peg$FAILED) {
          s2 = peg$parseescape();
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f132(s1);
    s0 = s1;

    return s0;
  }

  function peg$parses() {
    var s0, s1;

    s0 = [];
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e155); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$r7.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e155); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsew() {
    var s0;

    s0 = peg$parses();
    if (s0 === peg$FAILED) {
      s0 = null;
    }

    return s0;
  }

  function peg$parsenl() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c154;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e171); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c147) {
        s0 = peg$c147;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e154); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c155;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e172); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 12) {
            s0 = peg$c156;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e173); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseA() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c157) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e174); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r17.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e176); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f133();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseC() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c159) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e177); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r18.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e178); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f134();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseD() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c160) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e179); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r19.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e180); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f135();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseE() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c153) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e181); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r20.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e182); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f136();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseG() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c161) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e183); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r21.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e184); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c162) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e185); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f137();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseH() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c163) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r22.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e187); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c164) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e188); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f138();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseI() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c165) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e189); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r23.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e190); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c166) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e191); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f139();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseK() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c167) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e192); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r24.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e193); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c168) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e194); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f140();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseL() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c169) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e195); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r25.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e196); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c170) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e197); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f141();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseM() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c171) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e198); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r26.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e199); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c172) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e200); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f142();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseN() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c173) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e201); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r27.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e202); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c174) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e203); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f143();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseO() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c175) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e204); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r28.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e205); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c176) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e206); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f144();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseP() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c177) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e207); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r29.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e208); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c178) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e209); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f145();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseR() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c179) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e210); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r30.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e211); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c180) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e212); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f146();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseS_() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c181) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e213); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r31.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e214); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c182) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e215); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f147();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseT() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c183) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e216); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r32.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e217); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c184) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e218); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f148();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseU() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c185) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e219); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r33.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e220); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c186) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e221); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f149();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseX() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c187) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e222); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r34.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e223); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c188) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e224); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f150();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseZ() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c189) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e225); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e153); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c158;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c158;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s4 = peg$c158;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (peg$r35.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e226); }
        }
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s7 = peg$c147;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
          if (s7 === peg$FAILED) {
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e155); }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c190) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e227); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f151();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseS() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    s2 = peg$parses();
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e228); }
    }

    return s0;
  }

  function peg$parseSTRING() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    s2 = peg$parsestring();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f152(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e229); }
    }

    return s0;
  }

  function peg$parseIDENT() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    s2 = peg$parseident();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f153(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e230); }
    }

    return s0;
  }

  function peg$parseHASH() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    if (input.charCodeAt(peg$currPos) === 35) {
      s2 = peg$c12;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsename();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f154(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e231); }
    }

    return s0;
  }

  function peg$parseEXS() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    s2 = peg$parsenum();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseE();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseX();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f155(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e232); }
    }

    return s0;
  }

  function peg$parseLENGTH() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    s2 = peg$parsenum();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseP();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseX();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f156(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsecomment();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsecomment();
      }
      s2 = peg$parsenum();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseC();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseM();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f157(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsecomment();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsecomment();
        }
        s2 = peg$parsenum();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseM();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f158(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsecomment();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsecomment();
          }
          s2 = peg$parsenum();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseI();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseN();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f159(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsecomment();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsecomment();
            }
            s2 = peg$parsenum();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseP();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseT();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f160(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parsecomment();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsecomment();
              }
              s2 = peg$parsenum();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseP();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseC();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f161(s2);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsecomment();
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parsecomment();
                }
                s2 = peg$parsenum();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseE();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseM();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f162(s2);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$parsecomment();
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsecomment();
                  }
                  if (input.charCodeAt(peg$currPos) === 48) {
                    s2 = peg$c158;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e175); }
                  }
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f163();
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e232); }
    }

    return s0;
  }

  function peg$parseANGLE() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    s2 = peg$parsenum();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseD();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseE();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseG();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f164(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsecomment();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsecomment();
      }
      s2 = peg$parsenum();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseR();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseA();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseD();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f165(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsecomment();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsecomment();
        }
        s2 = peg$parsenum();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseG();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseR();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseD();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f166(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e233); }
    }

    return s0;
  }

  function peg$parseTIME() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    s2 = peg$parsenum();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseM();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseS_();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f167(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsecomment();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsecomment();
      }
      s2 = peg$parsenum();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseS_();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f168(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e234); }
    }

    return s0;
  }

  function peg$parseFREQ() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    s2 = peg$parsenum();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseH();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseZ();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f169(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsecomment();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsecomment();
      }
      s2 = peg$parsenum();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseK();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseH();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseZ();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f170(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e235); }
    }

    return s0;
  }

  function peg$parsePERCENTAGE() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    s2 = peg$parsenum();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 37) {
        s3 = peg$c5;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f171(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e236); }
    }

    return s0;
  }

  function peg$parseNUMBER() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    s2 = peg$parsenum();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f172(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e237); }
    }

    return s0;
  }

  function peg$parseURI() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    s2 = peg$parseU();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseR();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseL();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c191) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e239); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsew();
            s7 = peg$parsestring();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsew();
              if (input.charCodeAt(peg$currPos) === 41) {
                s9 = peg$c4;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f173(s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsecomment();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsecomment();
      }
      s2 = peg$parseU();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseR();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseL();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c191) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e239); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              s7 = peg$parseurl();
              s8 = peg$parsew();
              if (input.charCodeAt(peg$currPos) === 41) {
                s9 = peg$c4;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f174(s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e238); }
    }

    return s0;
  }

  function peg$parseFUNCTION() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomment();
    }
    s2 = peg$parseident();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c191;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e241); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f175(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e240); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export {
  peg$SyntaxError as SyntaxError,

  peg$parse as parse
};
