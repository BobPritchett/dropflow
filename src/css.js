// Generated by PEG.js v0.11.0-master.b7b87ea, https://pegjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  // istanbul ignore next
  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found, location) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    },

    not: function(expectation) {
      return "not " + describeExpectation(expectation.expected);
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleIndices = { start: 0 };
  var peg$startRuleIndex = 0;

  var peg$literals = [
    ";",
    ":",
    "/",
    ",",
    ")",
    "%",
    "1",
    "2",
    "25",
    ".",
    "rgba(",
    "rgb(",
    "#",
    "maroon",
    "red",
    "orange",
    "yellow",
    "olive",
    "purple",
    "fuchsia",
    "white",
    "lime",
    "green",
    "navy",
    "blue",
    "aqua",
    "teal",
    "black",
    "silver",
    "gray",
    "inherit",
    "initial",
    "xx-small",
    "x-small",
    "small",
    "medium",
    "large",
    "x-large",
    "xx-large",
    "smaller",
    "larger",
    "normal",
    "italic",
    "oblique",
    "bold",
    "bolder",
    "lighter",
    "00",
    "small-caps",
    "block",
    "inline-block",
    "inline",
    "flow-root",
    "horizontal-tb",
    "vertical-lr",
    "vertical-rl",
    "nowrap",
    "pre-wrap",
    "pre-line",
    "pre",
    "absolute",
    "relative",
    "static",
    "auto",
    "none",
    "hidden",
    "dotted",
    "dashed",
    "solid",
    "double",
    "groove",
    "ridge",
    "inset",
    "outset",
    "font-size",
    "line-height",
    "font-style",
    "font-weight",
    "font-variant",
    "font-family",
    "font",
    "color",
    "display",
    "writing-mode",
    "white-space",
    "tab-size",
    "position",
    "margin-top",
    "margin-right",
    "margin-bottom",
    "margin-left",
    "margin",
    "padding-top",
    "padding-right",
    "padding-bottom",
    "padding-left",
    "padding",
    "border-top-width",
    "border-right-width",
    "border-bottom-width",
    "border-left-width",
    "border-width",
    "border-top-style",
    "border-right-style",
    "border-bottom-style",
    "border-left-style",
    "border-style",
    "border-top-color",
    "border-right-color",
    "border-bottom-color",
    "border-left-color",
    "border-color",
    "-top",
    "-right",
    "-bottom",
    "-left",
    "border",
    "background-color",
    "background-clip",
    "border-box",
    "content-box",
    "padding-box",
    "width",
    "height",
    "box-sizing",
    "\\",
    "\r\n",
    "\"",
    "'",
    "/*",
    "*",
    "-",
    "e",
    "\n",
    "\r",
    "\f",
    "a",
    "0",
    "c",
    "d",
    "g",
    "\\g",
    "h",
    "\\h",
    "i",
    "\\i",
    "k",
    "\\k",
    "l",
    "\\l",
    "m",
    "\\m",
    "n",
    "\\n",
    "o",
    "\\o",
    "p",
    "\\p",
    "r",
    "\\r",
    "s",
    "\\s",
    "t",
    "\\t",
    "u",
    "\\u",
    "x",
    "\\x",
    "z",
    "\\z",
    "("
  ];
  var peg$regexps = [
    /^[0-9]/,
    /^[0-4]/,
    /^[0-5]/,
    /^[a-f0-9]/i,
    /^[a-f0-9]/,
    /^[1-9]/,
    /^[0-9a-f]/i,
    /^[\x80-\uFFFF]/,
    /^[ \t\r\n\f]/,
    /^[^\r\n\f0-9a-f]/i,
    /^[_a-z]/i,
    /^[_a-z0-9\-]/i,
    /^[^\n\r\f\\"]/,
    /^[^\n\r\f\\']/,
    /^[^*]/,
    /^[^\/*]/,
    /^[+\-]/,
    /^[!#$%&*-[\]-~]/,
    /^[Aa]/,
    /^[Cc]/,
    /^[Dd]/,
    /^[Ee]/,
    /^[Gg]/,
    /^[Hh]/,
    /^[Ii]/,
    /^[Kk]/,
    /^[Ll]/,
    /^[Mm]/,
    /^[Nn]/,
    /^[Oo]/,
    /^[Pp]/,
    /^[Rr]/,
    /^[Ss]/,
    /^[Tt]/,
    /^[Uu]/,
    /^[Xx]/,
    /^[Zz]/
  ];
  var peg$expectations = [
    peg$literalExpectation(";", false),
    peg$literalExpectation(":", false),
    peg$literalExpectation("/", false),
    peg$literalExpectation(",", false),
    peg$literalExpectation(")", false),
    peg$classExpectation([["0", "9"]], false, false),
    peg$literalExpectation("%", false),
    peg$literalExpectation("1", false),
    peg$literalExpectation("2", false),
    peg$classExpectation([["0", "4"]], false, false),
    peg$literalExpectation("25", false),
    peg$classExpectation([["0", "5"]], false, false),
    peg$literalExpectation(".", false),
    peg$literalExpectation("rgba(", false),
    peg$literalExpectation("rgb(", false),
    peg$literalExpectation("#", false),
    peg$classExpectation([["a", "f"], ["0", "9"]], false, true),
    peg$classExpectation([["a", "f"], ["0", "9"]], false, false),
    peg$literalExpectation("maroon", false),
    peg$literalExpectation("red", false),
    peg$literalExpectation("orange", false),
    peg$literalExpectation("yellow", false),
    peg$literalExpectation("olive", false),
    peg$literalExpectation("purple", false),
    peg$literalExpectation("fuchsia", false),
    peg$literalExpectation("white", false),
    peg$literalExpectation("lime", false),
    peg$literalExpectation("green", false),
    peg$literalExpectation("navy", false),
    peg$literalExpectation("blue", false),
    peg$literalExpectation("aqua", false),
    peg$literalExpectation("teal", false),
    peg$literalExpectation("black", false),
    peg$literalExpectation("silver", false),
    peg$literalExpectation("gray", false),
    peg$literalExpectation("inherit", false),
    peg$literalExpectation("initial", false),
    peg$literalExpectation("xx-small", false),
    peg$literalExpectation("x-small", false),
    peg$literalExpectation("small", false),
    peg$literalExpectation("medium", false),
    peg$literalExpectation("large", false),
    peg$literalExpectation("x-large", false),
    peg$literalExpectation("xx-large", false),
    peg$literalExpectation("smaller", false),
    peg$literalExpectation("larger", false),
    peg$literalExpectation("normal", false),
    peg$literalExpectation("italic", false),
    peg$literalExpectation("oblique", false),
    peg$literalExpectation("bold", false),
    peg$literalExpectation("bolder", false),
    peg$literalExpectation("lighter", false),
    peg$classExpectation([["1", "9"]], false, false),
    peg$literalExpectation("00", false),
    peg$literalExpectation("small-caps", false),
    peg$literalExpectation("block", false),
    peg$literalExpectation("inline-block", false),
    peg$literalExpectation("inline", false),
    peg$literalExpectation("flow-root", false),
    peg$literalExpectation("horizontal-tb", false),
    peg$literalExpectation("vertical-lr", false),
    peg$literalExpectation("vertical-rl", false),
    peg$literalExpectation("nowrap", false),
    peg$literalExpectation("pre-wrap", false),
    peg$literalExpectation("pre-line", false),
    peg$literalExpectation("pre", false),
    peg$literalExpectation("absolute", false),
    peg$literalExpectation("relative", false),
    peg$literalExpectation("static", false),
    peg$literalExpectation("auto", false),
    peg$literalExpectation("none", false),
    peg$literalExpectation("hidden", false),
    peg$literalExpectation("dotted", false),
    peg$literalExpectation("dashed", false),
    peg$literalExpectation("solid", false),
    peg$literalExpectation("double", false),
    peg$literalExpectation("groove", false),
    peg$literalExpectation("ridge", false),
    peg$literalExpectation("inset", false),
    peg$literalExpectation("outset", false),
    peg$literalExpectation("font-size", true),
    peg$literalExpectation("line-height", true),
    peg$literalExpectation("font-style", true),
    peg$literalExpectation("font-weight", true),
    peg$literalExpectation("font-variant", true),
    peg$literalExpectation("font-family", true),
    peg$literalExpectation("font", true),
    peg$literalExpectation("color", true),
    peg$literalExpectation("display", true),
    peg$literalExpectation("writing-mode", true),
    peg$literalExpectation("white-space", true),
    peg$literalExpectation("tab-size", true),
    peg$literalExpectation("position", true),
    peg$literalExpectation("margin-top", true),
    peg$literalExpectation("margin-right", true),
    peg$literalExpectation("margin-bottom", true),
    peg$literalExpectation("margin-left", true),
    peg$literalExpectation("margin", true),
    peg$literalExpectation("padding-top", true),
    peg$literalExpectation("padding-right", true),
    peg$literalExpectation("padding-bottom", true),
    peg$literalExpectation("padding-left", true),
    peg$literalExpectation("padding", true),
    peg$literalExpectation("border-top-width", true),
    peg$literalExpectation("border-right-width", true),
    peg$literalExpectation("border-bottom-width", true),
    peg$literalExpectation("border-left-width", true),
    peg$literalExpectation("border-width", true),
    peg$literalExpectation("border-top-style", true),
    peg$literalExpectation("border-right-style", true),
    peg$literalExpectation("border-bottom-style", true),
    peg$literalExpectation("border-left-style", true),
    peg$literalExpectation("border-style", true),
    peg$literalExpectation("border-top-color", true),
    peg$literalExpectation("border-right-color", true),
    peg$literalExpectation("border-bottom-color", true),
    peg$literalExpectation("border-left-color", true),
    peg$literalExpectation("border-color", true),
    peg$literalExpectation("-top", false),
    peg$literalExpectation("-right", false),
    peg$literalExpectation("-bottom", false),
    peg$literalExpectation("-left", false),
    peg$literalExpectation("border", true),
    peg$literalExpectation("background-color", true),
    peg$literalExpectation("background-clip", true),
    peg$literalExpectation("border-box", false),
    peg$literalExpectation("content-box", false),
    peg$literalExpectation("padding-box", false),
    peg$literalExpectation("width", true),
    peg$literalExpectation("height", true),
    peg$literalExpectation("box-sizing", true),
    peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
    peg$classExpectation([["\x80", "\uFFFF"]], false, false),
    peg$literalExpectation("\\", false),
    peg$literalExpectation("\r\n", false),
    peg$classExpectation([" ", "\t", "\r", "\n", "\f"], false, false),
    peg$classExpectation(["\r", "\n", "\f", ["0", "9"], ["a", "f"]], true, true),
    peg$classExpectation(["_", ["a", "z"]], false, true),
    peg$classExpectation(["_", ["a", "z"], ["0", "9"], "-"], false, true),
    peg$literalExpectation("/*", false),
    peg$classExpectation(["*"], true, false),
    peg$literalExpectation("*", false),
    peg$classExpectation(["/", "*"], true, false),
    peg$literalExpectation("-", false),
    peg$otherExpectation("whitespace"),
    peg$otherExpectation("string"),
    peg$otherExpectation("identifier"),
    peg$otherExpectation("length"),
    peg$otherExpectation("angle"),
    peg$otherExpectation("time"),
    peg$otherExpectation("frequency"),
    peg$otherExpectation("percentage"),
    peg$otherExpectation("number"),
    peg$otherExpectation("uri"),
    peg$otherExpectation("function")
  ];
  var peg$functions = [
    function(declarationsHead, declarationsTail) { return combine(buildList(declarationsHead, declarationsTail, 2)); },
    function(name, value) {
          let r = {};
          r['_' + name] = value;
          return r;
        },
    function(name) { return name; },
    function(head, tail) { return buildExpression(head, tail); },
    function() { return '/'; },
    function() { return ','; },
    function(quantity) {
          return {
            type: 'Quantity',
            value: quantity.value,
            unit: quantity.unit
          };
        },
    function(value) { return { type: 'String', value: value }; },
    function(value) { return { type: 'URI',    value: value }; },
    function(value) { return value; },
    function(name, params) {
          return { type: 'Function', name: name, params: params };
        },
    function(component) {
        return Math.max(0, Math.min(100, parseInt(component, 10))) * 1e-2 * 255
      },
    function(component) {
        return parseInt(Array.isArray(component) ? component.join('') : component, 10);
      },
    function(a) {
        const component = a.join('');
        return Math.max(0, Math.min(100, parseInt(component, 10))) * 1e-2
      },
    function(a, b, c) {
        const component = (a ? a.join('') : '') + b + c.join('');
        return Math.max(0, Math.min(1, parseFloat(component)));
      },
    function(a) {
        return Math.max(0, Math.min(1, parseInt(a.join(''), 10)))
      },
    function(r, g, b, a) {
        return {r, g, b, a};
      },
    function(r, g, b) {
        return {r, g, b, a: 1};
      },
    function(r, g, b, a) {
        return {
          r: parseInt(r.join(''), 16),
          g: parseInt(g.join(''), 16),
          b: parseInt(b.join(''), 16),
          a: a ? parseInt(a.join(''), 16) / 255 : 1
        }
      },
    function(r, g, b, a) {
        return {
          r: parseInt(r + r, 16),
          g: parseInt(g + g, 16),
          b: parseInt(b + b, 16),
          a: a ? parseInt(a + a, 16) / 255 : 1
        }
      },
    function() {
        return colorMap.get(text())
      },
    function() { return inherit; },
    function() { return initial; },
    function() { return 9 },
    function() { return 10 },
    function() { return 13 },
    function() { return 16 },
    function() { return 18 },
    function() { return 24 },
    function() { return 32 },
    function() { return { value: 1/1.2, unit: 'em' } },
    function() { return { value: 1.2, unit: 'em' } },
    function(font_size) { return font_size; },
    function(line_height) { return line_height; },
    function(n) { return text(); },
    function(family) { return family; },
    function(head, tail) { return buildList(head, tail, 1).join(' '); },
    function(x) {
        const ret = {fontStyle: x[0], fontVariant: x[2]};
        if (x[4]) ret.fontWeight = x[4];
        return ret;
      },
    function(x) {
        const ret = {fontStyle: x[2], fontVariant: x[0]};
        if (x[4]) ret.fontWeight = x[4];
        return ret;
      },
    function(x) {
        const ret = {fontStyle: x[0], fontWeight: x[2]};
        if (x[4]) ret.fontVariant = x[4];
        return ret;
      },
    function(x) {
        const ret = {fontWeight: x[0], fontStyle: x[2]};
        if (x[4]) ret.fontVariant = x[4];
        return ret;
      },
    function(x) {
        const ret = {fontVariant: x[0], fontWeight: x[2]};
        if (x[4]) ret.fontStyle = x[4];
        return ret;
      },
    function(x) {
        const ret = {fontWeight: x[0], fontVariant: x[2]};
        if (x[4]) ret.fontStyle = x[4];
        return ret;
      },
    function(fontWeight) { return {fontWeight}; },
    function(fontVariant) { return {fontVariant}; },
    function(fontStyle) { return {fontStyle}; },
    function(x) {
          const ret = x[0] || {};
          ret.fontSize = x[1];
          if (x[2]) ret.lineHeight = x[2][2];
          ret.fontFamily = [x[3]].concat(x[4] ? extractList(x[4], 2) : []);
          return ret;
        },
    function() { return {outer: 'block', inner: 'flow'}; },
    function() { return {outer: 'inline', inner: 'flow-root'}; },
    function() { return {outer: 'inline', inner: 'flow'}; },
    function() { return {outer: 'block', inner: 'flow-root'}; },
    function(fontSize) {
        return {fontSize};
      },
    function(lineHeight) {
        return {lineHeight};
      },
    function(fontStyle) {
        return {fontStyle};
      },
    function(fontWeight) {
        return {fontWeight};
      },
    function(fontVariant) {
        return {fontVariant};
      },
    function(fontFamily) {
        return {fontFamily};
      },
    function(font) {
        return typeof font === "object" ? font : {font};
      },
    function(color) {
        return {color};
      },
    function(display) {
        return {display};
      },
    function(writingMode) {
        return {writingMode};
      },
    function(whiteSpace) {
        return {whiteSpace};
      },
    function(tabSize) {
        return {tabSize};
      },
    function(position) {
        return {position};
      },
    function(marginTop) {
        return {marginTop};
      },
    function(marginRight) {
        return {marginRight};
      },
    function(marginBottom) {
        return {marginBottom};
      },
    function(marginLeft) {
        return {marginLeft};
      },
    function(t, r, b, l) {
        return setTopRightBottomLeft({}, 'margin', '', t, r, b, l);
      },
    function(t, h, b) {
        return setTopRightBottomLeft({}, 'margin', '', t, h, b, h);
      },
    function(v, h) {
        return setTopRightBottomLeft({}, 'margin', '', v, h, v, h);
      },
    function(s) {
        return setTopRightBottomLeft({}, 'margin', '', s, s, s, s);
      },
    function(paddingTop) {
        return {paddingTop};
      },
    function(paddingRight) {
        return {paddingRight};
      },
    function(paddingBottom) {
        return {paddingBottom};
      },
    function(paddingLeft) {
        return {paddingLeft};
      },
    function(t, r, b, l) {
        return setTopRightBottomLeft({}, 'padding', '', t, r, b, l);
      },
    function(t, h, b) {
        return setTopRightBottomLeft({}, 'padding', '', t, h, b, h);
      },
    function(v, h) {
        return setTopRightBottomLeft({}, 'padding', '', v, h, v, h);
      },
    function(s) {
        return setTopRightBottomLeft({}, 'padding', '', s, s, s, s);
      },
    function(borderTopWidth) {
        return {borderTopWidth};
      },
    function(borderRightWidth) {
        return {borderRightWidth};
      },
    function(borderBottomWidth) {
        return {borderBottomWidth};
      },
    function(borderLeftWidth) {
        return {borderLeftWidth};
      },
    function(t, r, b, l) {
        return setTopRightBottomLeft({}, 'border', 'Width', t, r, b, l);
      },
    function(t, h, b) {
        return setTopRightBottomLeft({}, 'border', 'Width', t, h, b, h);
      },
    function(v, h) {
        return setTopRightBottomLeft({}, 'border', 'Width', v, h, v, h);
      },
    function(s) {
        return setTopRightBottomLeft({}, 'border', 'Width', s, s, s, s);
      },
    function(borderTopStyle) {
        return {borderTopStyle};
      },
    function(borderRightStyle) {
        return {borderRightStyle};
      },
    function(borderBottomStyle) {
        return {borderBottomStyle};
      },
    function(borderLeftStyle) {
        return {borderLeftStyle};
      },
    function(t, r, b, l) {
        return setTopRightBottomLeft({}, 'border', 'Style', t, r, b, l);
      },
    function(t, h, b) {
        return setTopRightBottomLeft({}, 'border', 'Style', t, h, b, h);
      },
    function(v, h) {
        return setTopRightBottomLeft({}, 'border', 'Style', v, h, v, h);
      },
    function(s) {
        return setTopRightBottomLeft({}, 'border', 'Style', s, s, s, s);
      },
    function(borderTopColor) {
        return {borderTopColor};
      },
    function(borderRightColor) {
        return {borderRightColor};
      },
    function(borderBottomColor) {
        return {borderBottomColor};
      },
    function(borderLeftColor) {
        return {borderLeftColor};
      },
    function(t, r, b, l) {
        return setTopRightBottomLeft({}, 'border', 'Color', t, r, b, l);
      },
    function(t, h, b) {
        return setTopRightBottomLeft({}, 'border', 'Color', t, h, b, h);
      },
    function(v, h) {
        return setTopRightBottomLeft({}, 'border', 'Color', v, h, v, h);
      },
    function(s) {
        return setTopRightBottomLeft({}, 'border', 'Color', s, s, s, s);
      },
    function(t, w, s, c) {
        const ret = {};
        setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
        setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
        if (c) setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
        return ret;
      },
    function(t, s, w, c) {
        const ret = {};
        setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
        setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
        if (c) setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
        return ret;
      },
    function(t, w, c, s) {
        const ret = {};
        setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
        setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
        if (s) setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
        return ret;
      },
    function(t, c, w, s) {
        const ret = {};
        setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
        setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
        if (s) setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
        return ret;
      },
    function(t, c, s, w) {
        const ret = {};
        setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
        setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
        if (w) setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
        return ret;
      },
    function(t, s, c, w) {
        const ret = {};
        setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
        setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
        if (w) setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
        return ret;
      },
    function(t, w) {
        return setTopRightBottomLeftOr(t, {}, 'border', 'Width', w, w, w, w);
      },
    function(t, c) {
        return setTopRightBottomLeftOr(t, {}, 'border', 'Color', c, c, c, c);
      },
    function(t, s) {
        return setTopRightBottomLeftOr(t, {}, 'border', 'Style', s, s, s, s);
      },
    function(t, i) {
        const ret = setTopRightBottomLeftOr(t, {}, 'border', 'Style', i, i, i, i);
        setTopRightBottomLeftOr(t, ret, 'border', 'Width', i, i, i, i);
        setTopRightBottomLeftOr(t, ret, 'border', 'Color', i, i, i, i);
        return ret;
      },
    function(backgroundColor) {
        return {backgroundColor};
      },
    function(backgroundClip) {
        return {backgroundClip};
      },
    function(width) {
        return {width};
      },
    function(height) {
        return {height};
      },
    function(boxSizing) {
        return {boxSizing};
      },
    function(digits) {
          return String.fromCharCode(parseInt(digits, 16));
        },
    function(ch) { return ch; },
    function(nl) { return ''; },
    function(chars) {
          return chars.join('');
        },
    function(prefix, start, chars) {
          return prefix + start + chars.join('');
        },
    function(chars) { return chars.join(''); },
    function() {
          return parseFloat(text());
        },
    function() { return 'a'; },
    function() { return 'c'; },
    function() { return 'd'; },
    function() { return 'e'; },
    function() { return 'g'; },
    function() { return 'h'; },
    function() { return 'i'; },
    function() { return 'k'; },
    function() { return 'l'; },
    function() { return 'm'; },
    function() { return 'n'; },
    function() { return 'o'; },
    function() { return 'p'; },
    function() { return 'r'; },
    function() { return 's'; },
    function() { return 't'; },
    function() { return 'u'; },
    function() { return 'x'; },
    function() { return 'z'; },
    function(string) { return string; },
    function(ident) { return ident; },
    function(name) { return '#' + name; },
    function(value) { return { value: value, unit: 'em' }; },
    function(value) { return { value: value, unit: 'ex' }; },
    function(value) { return { value: value, unit: 'cm' }; },
    function(value) { return { value: value, unit: 'mm' }; },
    function(value) { return { value: value, unit: 'in' }; },
    function(value) { return { value: value, unit: 'pt' }; },
    function(value) { return { value: value, unit: 'pc' }; },
    function() { return 0; },
    function(value) { return { value: value, unit: 'deg'  }; },
    function(value) { return { value: value, unit: 'rad'  }; },
    function(value) { return { value: value, unit: 'grad' }; },
    function(value) { return { value: value, unit: 'ms' }; },
    function(value) { return { value: value, unit: 's'  }; },
    function(value) { return { value: value, unit: 'hz' }; },
    function(value) { return { value: value, unit: 'kh' }; },
    function(value) { return { value: value, unit: '%' }; },
    function(value) { return { value: value, unit: null }; },
    function(url) { return url; }
  ];

  var peg$bytecode = [
    peg$decode("%$;\x8E0#*;\x8E&;!.\" &\"$%7 2 \"!6 #/3#$;\x8E0#*;\x8E&;!.\" &\"+#)&'#0D*%7 2 \"!6 #/3#$;\x8E0#*;\x8E&;!.\" &\"+#)&'#&8#: $\"! "),
    peg$decode(";=.\u0156 &;>.\u0150 &;?.\u014A &;@.\u0144 &;A.\u013E &;B.\u0138 &;C.\u0132 &;D.\u012C &;E.\u0126 &;F.\u0120 &;G.\u011A &;H.\u0114 &;I.\u010E &;J.\u0108 &;K.\u0102 &;L.\xFC &;M.\xF6 &;N.\xF0 &;O.\xEA &;P.\xE4 &;Q.\xDE &;R.\xD8 &;S.\xD2 &;T.\xCC &;U.\xC6 &;V.\xC0 &;W.\xBA &;X.\xB4 &;Y.\xAE &;Z.\xA8 &;[.\xA2 &;\\.\x9C &;].\x96 &;^.\x90 &;_.\x8A &;`.\x84 &;a.~ &;b.x &;d.r &;g.l &;h.f &;i.` &;e.Z &;f.T &%;\"/J#7!2!\"!6!#/:$$;\x8E0#*;\x8E&;#/($8$:!%\"# ($'#(\"'#&'#"),
    peg$decode("%;\x90/0#$;\x8E0#*;\x8E&8\":\"#!!&'#"),
    peg$decode("%;%/U#$%;$.\" &\";%/#$+\")(\"'#05*%;$.\" &\";%/#$+\")(\"'#&8\":##\"! &'#"),
    peg$decode("%7\"2\"\"!6\"#//#$;\x8E0#*;\x8E&8\":$# &'#.@ &%7#2#\"!6##//#$;\x8E0#*;\x8E&8\":%# &'#"),
    peg$decode("%;\x98.G &;\x94.A &;\x92.; &;\x93.5 &;\x95./ &;\x96.) &;\x97.# &;\x99/0#$;\x8E0#*;\x8E&8\":&#!!&'#.\x80 &%;\x8F/0#$;\x8E0#*;\x8E&8\":'#!!&'#.c &%;\x9A/0#$;\x8E0#*;\x8E&8\":(#!!&'#.F &;&.@ &;).: &%;\x90/0#$;\x8E0#*;\x8E&8\":)#!!&'#"),
    peg$decode("%;\x9B/S#$;\x8E0#*;\x8E&;#/A$7$2$\"!6$#/1$$;\x8E0#*;\x8E&8%:*&\"$\"($'#(#'#&'#"),
    peg$decode("%$7%4 \"!5!#/-#0**7%4 \"!5!#&&&#/7#7&2%\"!6%#/'$8\":+#!!(\"'#&'#.\xF2 &%%7'2&\"!6&#/C#7%4 \"!5!#/3$7%4 \"!5!#/#$+#)(#'#(\"'#&'#.\xAF &%7(2'\"!6'#/C#7)4!\"!5!#/3$7%4 \"!5!#/#$+#)(#'#(\"'#&'#.x &%7*2(\"!6(#/3#7+4\"\"!5!#/#$+\")(\"'#&'#.Q &%7%4 \"!5!#/3#7%4 \"!5!#/#$+\")(\"'#&'#.* &7%4 \"!5!#/' 8!:,!! )"),
    peg$decode("%$7%4 \"!5!#/-#0**7%4 \"!5!#&&&#/7#7&2%\"!6%#/'$8\":-#!!(\"'#&'#.\xA3 &%$7%4 \"!5!#0**7%4 \"!5!#&7,2)\"!6)#/M$$7%4 \"!5!#/-#0**7%4 \"!5!#&&&#/)$8#:.$#\"! (#'#(\"'#.J &%$7%4 \"!5!#/-#0**7%4 \"!5!#&&&#/' 8!:/!! )"),
    peg$decode("%$;r0#*;r&7-2*\"!6*#/\xD6$$;\x8E0#*;\x8E&;'/\xC4$$;\x8E0#*;\x8E&7#2#\"!6##/\xAB$$;\x8E0#*;\x8E&;'/\x99$$;\x8E0#*;\x8E&7#2#\"!6##/\x80$$;\x8E0#*;\x8E&;'/n$$;\x8E0#*;\x8E&7#2#\"!6##/U$$;\x8E0#*;\x8E&;(/C$$;\x8E0#*;\x8E&7$2$\"!6$#/*$82:03$.*&\"(2'#(0'#(.'#(,'#(*'#(('#(&'#($'#(\"'#.\u02E1 &%$;r0#*;r&7.2+\"!6+#/\xAA$$;\x8E0#*;\x8E&;'/\x98$$;\x8E0#*;\x8E&7#2#\"!6##/\x7F$$;\x8E0#*;\x8E&;'/m$$;\x8E0#*;\x8E&7#2#\"!6##/T$$;\x8E0#*;\x8E&;'/B$$;\x8E0#*;\x8E&7$2$\"!6$#/)$8.:1/#*&\"(.'#(,'#(*'#(('#(&'#($'#(\"'#.\u0239 &%$;r0#*;r&7/2,\"!6,#/\xD0$%704#\"!5!#/3#704#\"!5!#/#$+\")(\"'#&'#/\xA6$%704#\"!5!#/3#704#\"!5!#/#$+\")(\"'#&'#/|$%704#\"!5!#/3#704#\"!5!#/#$+\")(\"'#&'#/R$%704#\"!5!#/3#704#\"!5!#/#$+\")(\"'#&'#.\" &\"8&:2'$#\"! (%'#($'#(#'#(\"'#.\u016B &%$;r0#*;r&7/2,\"!6,#/h$704#\"!5!#/X$704#\"!5!#/H$714$\"!5!#/8$704#\"!5!#.\" &\"8&:3'$#\"! (%'#($'#(#'#(\"'#.\u0105 &%722-\"!6-#.\xED &732.\"!6.#.\xE0 &742/\"!6/#.\xD3 &7520\"!60#.\xC6 &7621\"!61#.\xB9 &7722\"!62#.\xAC &7823\"!63#.\x9F &7924\"!64#.\x92 &7:25\"!65#.\x85 &7;26\"!66#.x &7<27\"!67#.k &7=28\"!68#.^ &7>29\"!69#.Q &7?2:\"!6:#.D &7@2;\"!6;#.7 &7A2<\"!6<#.* &7B2=\"!6=#/& 8!:4! )"),
    peg$decode("%7C2>\"!6>#/& 8!:5! ).5 &%7D2?\"!6?#/& 8!:6! )"),
    peg$decode("%7E2@\"!6@#/& 8!:7! ).\xAD &%7F2A\"!6A#/& 8!:8! ).\x95 &%7G2B\"!6B#/& 8!:9! ).} &%7H2C\"!6C#/& 8!::! ).e &%7I2D\"!6D#/& 8!:;! ).M &%7J2E\"!6E#/& 8!:<! ).5 &%7K2F\"!6F#/& 8!:=! )"),
    peg$decode("%7L2G\"!6G#/& 8!:>! ).; &%7M2H\"!6H#/& 8!:?! ).# &;\x92"),
    peg$decode("%;,./ &;+.) &;\x94.# &;\x98/0#$;\x8E0#*;\x8E&8\":@#!!&'#"),
    peg$decode("%7N2I\"!6I#./ &;\x99.) &;\x94.# &;\x98/0#$;\x8E0#*;\x8E&8\":A#!!&'#"),
    peg$decode("7N2I\"!6I#.7 &7O2J\"!6J#.* &7P2K\"!6K#"),
    peg$decode("7N2I\"!6I#.o &7Q2L\"!6L#.b &7R2M\"!6M#.U &7S2N\"!6N#.H &%7T4%\"!5!#/7#7U2O\"!6O#/'$8\":B#!!(\"'#&'#"),
    peg$decode("7N2I\"!6I#.* &7V2P\"!6P#"),
    peg$decode("%;\x8F/0#$;\x8E0#*;\x8E&8\":C#!!&'#.c &%;s/Y#$%$;\x8E0#*;\x8E&;s/#$+\")(\"'#07*%$;\x8E0#*;\x8E&;s/#$+\")(\"'#&8\":D#\"! &'#"),
    peg$decode("%%;//N#$;\x8E0#*;\x8E&;1/<$$;\x8E0#*;\x8E&;0.\" &\"$;\x8E0#*;\x8E&+&)(#'#&'#/' 8!:E!! ).\u01D7 &%%;1/N#$;\x8E0#*;\x8E&;//<$$;\x8E0#*;\x8E&;0.\" &\"$;\x8E0#*;\x8E&+&)(#'#&'#/' 8!:F!! ).\u0190 &%%;//N#$;\x8E0#*;\x8E&;0/<$$;\x8E0#*;\x8E&;1.\" &\"$;\x8E0#*;\x8E&+&)(#'#&'#/' 8!:G!! ).\u0149 &%%;0/N#$;\x8E0#*;\x8E&;//<$$;\x8E0#*;\x8E&;1.\" &\"$;\x8E0#*;\x8E&+&)(#'#&'#/' 8!:H!! ).\u0102 &%%;1/N#$;\x8E0#*;\x8E&;0/<$$;\x8E0#*;\x8E&;/.\" &\"$;\x8E0#*;\x8E&+&)(#'#&'#/' 8!:I!! ).\xBB &%%;0/N#$;\x8E0#*;\x8E&;1/<$$;\x8E0#*;\x8E&;/.\" &\"$;\x8E0#*;\x8E&+&)(#'#&'#/' 8!:J!! ).t &%;0/0#$;\x8E0#*;\x8E&8\":K#!!&'#.W &%;1/0#$;\x8E0#*;\x8E&8\":L#!!&'#.: &%;//0#$;\x8E0#*;\x8E&8\":M#!!&'#"),
    peg$decode("%%;3/\xAE#;-/\xA5$%7\"2\"\"!6\"#/5#$;\x8E0#*;\x8E&;./#$+#)(#'#&'#.\" &\";2/r$$%7#2#\"!6##/5#$;\x8E0#*;\x8E&;2/#$+#)(#'#&'#0F*%7#2#\"!6##/5#$;\x8E0#*;\x8E&;2/#$+#)(#'#&'#&+%)($'#(\"'#&'#/' 8!:N!! )"),
    peg$decode("%7W2Q\"!6Q#/& 8!:O! ).e &%7X2R\"!6R#/& 8!:P! ).M &%7Y2S\"!6S#/& 8!:Q! ).5 &%7Z2T\"!6T#/& 8!:R! )"),
    peg$decode("7[2U\"!6U#.7 &7\\2V\"!6V#.* &7]2W\"!6W#"),
    peg$decode("7N2I\"!6I#.Q &7^2X\"!6X#.D &7_2Y\"!6Y#.7 &7`2Z\"!6Z#.* &7a2[\"!6[#"),
peg$decode(";\x94.# &;\x99"),
peg$decode("7b2\\\"!6\\#.7 &7c2]\"!6]#.* &7d2^\"!6^#"),
peg$decode(";\x94.# &;\x98"),
peg$decode(";\x94.0 &;\x98.* &7e2_\"!6_#"),
peg$decode("7f2`\"!6`#.\x92 &7g2a\"!6a#.\x85 &7h2b\"!6b#.x &7i2c\"!6c#.k &7j2d\"!6d#.^ &7k2e\"!6e#.Q &7l2f\"!6f#.D &7m2g\"!6g#.7 &7n2h\"!6h#.* &7o2i\"!6i#"),
    peg$decode("%7p3j\"!5)#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;-.# &;*/'$8%:S&! (%'#(#'#&'#"),
    peg$decode("%7q3k\"!5+#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;..# &;*/'$8%:T&! (%'#(#'#&'#"),
    peg$decode("%7r3l\"!5*#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;/.# &;*/'$8%:U&! (%'#(#'#&'#"),
    peg$decode("%7s3m\"!5+#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;0.# &;*/'$8%:V&! (%'#(#'#&'#"),
    peg$decode("%7t3n\"!5,#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;1.# &;*/'$8%:W&! (%'#(#'#&'#"),
    peg$decode("%7u3o\"!5+#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;2.# &;*/'$8%:X&! (%'#(#'#&'#"),
    peg$decode("%7v3p\"!5$#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;4.# &;*/'$8%:Y&! (%'#(#'#&'#"),
    peg$decode("%7w3q\"!5%#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;).# &;*/'$8%:Z&! (%'#(#'#&'#"),
    peg$decode("%7x3r\"!5'#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;5.# &;*/'$8%:[&! (%'#(#'#&'#"),
    peg$decode("%7y3s\"!5,#/R#$;\x8E0#*;\x8E&7!2!\"!6!#/9$$;\x8E0#*;\x8E&;6/'$8%:\\&! (%'#(#'#&'#"),
    peg$decode("%7z3t\"!5+#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;7.# &;*/'$8%:]&! (%'#(#'#&'#"),
    peg$decode("%7{3u\"!5(#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;8.# &;*/'$8%:^&! (%'#(#'#&'#"),
    peg$decode("%7|3v\"!5(#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;9.# &;*/'$8%:_&! (%'#(#'#&'#"),
    peg$decode("%7}3w\"!5*#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;;.# &;*/'$8%:`&! (%'#(#'#&'#"),
peg$decode("%7~3x\"!5,#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;;.# &;*/'$8%:a&! (%'#(#'#&'#"),
peg$decode("%7\x7F3y\"!5-#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;;.# &;*/'$8%:b&! (%'#(#'#&'#"),
peg$decode("%7\x803z\"!5+#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;;.# &;*/'$8%:c&! (%'#(#'#&'#"),
peg$decode("%7\x813{\"!5&#/\x8B#$;\x8E0#*;\x8E&7!2!\"!6!#/r$$;\x8E0#*;\x8E&;;/`$$;\x8E0#*;\x8E&;;/N$$;\x8E0#*;\x8E&;;/<$$;\x8E0#*;\x8E&;;/*$8+:d,$&$\" (+'#()'#(''#(%'#(#'#&'#.\u012E &%7\x813{\"!5&#/x#$;\x8E0#*;\x8E&7!2!\"!6!#/_$$;\x8E0#*;\x8E&;;/M$$;\x8E0#*;\x8E&;;/;$$;\x8E0#*;\x8E&;;/)$8):e*#$\" ()'#(''#(%'#(#'#&'#.\xC2 &%7\x813{\"!5&#/e#$;\x8E0#*;\x8E&7!2!\"!6!#/L$$;\x8E0#*;\x8E&;;/:$$;\x8E0#*;\x8E&;;/($8':f(\"\" (''#(%'#(#'#&'#.i &%7\x813{\"!5&#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;;.# &;*/'$8%:g&! (%'#(#'#&'#"),
    peg$decode("%7\x823|\"!5+#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;:.# &;*/'$8%:h&! (%'#(#'#&'#"),
    peg$decode("%7\x833}\"!5-#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;:.# &;*/'$8%:i&! (%'#(#'#&'#"),
    peg$decode("%7\x843~\"!5.#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;:.# &;*/'$8%:j&! (%'#(#'#&'#"),
    peg$decode("%7\x853\x7F\"!5,#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;:.# &;*/'$8%:k&! (%'#(#'#&'#"),
    peg$decode("%7\x863\x80\"!5'#/\x8B#$;\x8E0#*;\x8E&7!2!\"!6!#/r$$;\x8E0#*;\x8E&;:/`$$;\x8E0#*;\x8E&;:/N$$;\x8E0#*;\x8E&;:/<$$;\x8E0#*;\x8E&;:/*$8+:l,$&$\" (+'#()'#(''#(%'#(#'#&'#.\u012E &%7\x863\x80\"!5'#/x#$;\x8E0#*;\x8E&7!2!\"!6!#/_$$;\x8E0#*;\x8E&;:/M$$;\x8E0#*;\x8E&;:/;$$;\x8E0#*;\x8E&;:/)$8):m*#$\" ()'#(''#(%'#(#'#&'#.\xC2 &%7\x863\x80\"!5'#/e#$;\x8E0#*;\x8E&7!2!\"!6!#/L$$;\x8E0#*;\x8E&;:/:$$;\x8E0#*;\x8E&;:/($8':n(\"\" (''#(%'#(#'#&'#.i &%7\x863\x80\"!5'#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;:.# &;*/'$8%:o&! (%'#(#'#&'#"),
peg$decode("%7\x873\x81\"!50#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;\x94.# &;*/'$8%:p&! (%'#(#'#&'#"),
peg$decode("%7\x883\x82\"!52#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;\x94.# &;*/'$8%:q&! (%'#(#'#&'#"),
peg$decode("%7\x893\x83\"!53#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;\x94.# &;*/'$8%:r&! (%'#(#'#&'#"),
peg$decode("%7\x8A3\x84\"!51#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;\x94.# &;*/'$8%:s&! (%'#(#'#&'#"),
peg$decode("%7\x8B3\x85\"!5,#/\x8B#$;\x8E0#*;\x8E&7!2!\"!6!#/r$$;\x8E0#*;\x8E&;\x94/`$$;\x8E0#*;\x8E&;\x94/N$$;\x8E0#*;\x8E&;\x94/<$$;\x8E0#*;\x8E&;\x94/*$8+:t,$&$\" (+'#()'#(''#(%'#(#'#&'#.\u012E &%7\x8B3\x85\"!5,#/x#$;\x8E0#*;\x8E&7!2!\"!6!#/_$$;\x8E0#*;\x8E&;\x94/M$$;\x8E0#*;\x8E&;\x94/;$$;\x8E0#*;\x8E&;\x94/)$8):u*#$\" ()'#(''#(%'#(#'#&'#.\xC2 &%7\x8B3\x85\"!5,#/e#$;\x8E0#*;\x8E&7!2!\"!6!#/L$$;\x8E0#*;\x8E&;\x94/:$$;\x8E0#*;\x8E&;\x94/($8':v(\"\" (''#(%'#(#'#&'#.i &%7\x8B3\x85\"!5,#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;\x94.# &;*/'$8%:w&! (%'#(#'#&'#"),
    peg$decode("%7\x8C3\x86\"!50#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;<.# &;*/'$8%:x&! (%'#(#'#&'#"),
    peg$decode("%7\x8D3\x87\"!52#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;<.# &;*/'$8%:y&! (%'#(#'#&'#"),
    peg$decode("%7\x8E3\x88\"!53#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;<.# &;*/'$8%:z&! (%'#(#'#&'#"),
    peg$decode("%7\x8F3\x89\"!51#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;<.# &;*/'$8%:{&! (%'#(#'#&'#"),
    peg$decode("%7\x903\x8A\"!5,#/\x8B#$;\x8E0#*;\x8E&7!2!\"!6!#/r$$;\x8E0#*;\x8E&;</`$$;\x8E0#*;\x8E&;</N$$;\x8E0#*;\x8E&;</<$$;\x8E0#*;\x8E&;</*$8+:|,$&$\" (+'#()'#(''#(%'#(#'#&'#.\u012E &%7\x903\x8A\"!5,#/x#$;\x8E0#*;\x8E&7!2!\"!6!#/_$$;\x8E0#*;\x8E&;</M$$;\x8E0#*;\x8E&;</;$$;\x8E0#*;\x8E&;</)$8):}*#$\" ()'#(''#(%'#(#'#&'#.\xC2 &%7\x903\x8A\"!5,#/e#$;\x8E0#*;\x8E&7!2!\"!6!#/L$$;\x8E0#*;\x8E&;</:$$;\x8E0#*;\x8E&;</($8':~(\"\" (''#(%'#(#'#&'#.i &%7\x903\x8A\"!5,#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;<.# &;*/'$8%:\x7F&! (%'#(#'#&'#"),
peg$decode("%7\x913\x8B\"!50#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;).# &;*/'$8%:\x80&! (%'#(#'#&'#"),
peg$decode("%7\x923\x8C\"!52#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;).# &;*/'$8%:\x81&! (%'#(#'#&'#"),
peg$decode("%7\x933\x8D\"!53#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;).# &;*/'$8%:\x82&! (%'#(#'#&'#"),
peg$decode("%7\x943\x8E\"!51#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;).# &;*/'$8%:\x83&! (%'#(#'#&'#"),
peg$decode("%7\x953\x8F\"!5,#/\x8B#$;\x8E0#*;\x8E&7!2!\"!6!#/r$$;\x8E0#*;\x8E&;)/`$$;\x8E0#*;\x8E&;)/N$$;\x8E0#*;\x8E&;)/<$$;\x8E0#*;\x8E&;)/*$8+:\x84,$&$\" (+'#()'#(''#(%'#(#'#&'#.\u012E &%7\x953\x8F\"!5,#/x#$;\x8E0#*;\x8E&7!2!\"!6!#/_$$;\x8E0#*;\x8E&;)/M$$;\x8E0#*;\x8E&;)/;$$;\x8E0#*;\x8E&;)/)$8):\x85*#$\" ()'#(''#(%'#(#'#&'#.\xC2 &%7\x953\x8F\"!5,#/e#$;\x8E0#*;\x8E&7!2!\"!6!#/L$$;\x8E0#*;\x8E&;)/:$$;\x8E0#*;\x8E&;)/($8':\x86(\"\" (''#(%'#(#'#&'#.i &%7\x953\x8F\"!5,#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;).# &;*/'$8%:\x87&! (%'#(#'#&'#"),
    peg$decode("7\x962\x90\"!6\x90#.D &7\x972\x91\"!6\x91#.7 &7\x982\x92\"!6\x92#.* &7\x992\x93\"!6\x93#"),
    peg$decode("%7\x9A3\x94\"!5&#/~#;c.\" &\"$;\x8E0#*;\x8E&7!2!\"!6!#/^$$;\x8E0#*;\x8E&;\x94/L$$;\x8E0#*;\x8E&;</:$$;\x8E0#*;\x8E&;).\" &\"8*:\x88+$($\" (('#(&'#($'#&'#.\u03B3 &%7\x9A3\x94\"!5&#/~#;c.\" &\"$;\x8E0#*;\x8E&7!2!\"!6!#/^$$;\x8E0#*;\x8E&;</L$$;\x8E0#*;\x8E&;\x94/:$$;\x8E0#*;\x8E&;).\" &\"8*:\x89+$($\" (('#(&'#($'#&'#.\u0341 &%7\x9A3\x94\"!5&#/~#;c.\" &\"$;\x8E0#*;\x8E&7!2!\"!6!#/^$$;\x8E0#*;\x8E&;\x94/L$$;\x8E0#*;\x8E&;)/:$$;\x8E0#*;\x8E&;<.\" &\"8*:\x8A+$($\" (('#(&'#($'#&'#.\u02CF &%7\x9A3\x94\"!5&#/~#;c.\" &\"$;\x8E0#*;\x8E&7!2!\"!6!#/^$$;\x8E0#*;\x8E&;)/L$$;\x8E0#*;\x8E&;\x94/:$$;\x8E0#*;\x8E&;<.\" &\"8*:\x8B+$($\" (('#(&'#($'#&'#.\u025D &%7\x9A3\x94\"!5&#/~#;c.\" &\"$;\x8E0#*;\x8E&7!2!\"!6!#/^$$;\x8E0#*;\x8E&;)/L$$;\x8E0#*;\x8E&;</:$$;\x8E0#*;\x8E&;\x94.\" &\"8*:\x8C+$($\" (('#(&'#($'#&'#.\u01EB &%7\x9A3\x94\"!5&#/~#;c.\" &\"$;\x8E0#*;\x8E&7!2!\"!6!#/^$$;\x8E0#*;\x8E&;</L$$;\x8E0#*;\x8E&;)/:$$;\x8E0#*;\x8E&;\x94.\" &\"8*:\x8D+$($\" (('#(&'#($'#&'#.\u0179 &%7\x9A3\x94\"!5&#/c#;c.\" &\"$;\x8E0#*;\x8E&7!2!\"!6!#/C$$;\x8E0#*;\x8E&;\x94/1$$;\x8E0#*;\x8E&8':\x8E(\"%!(&'#($'#&'#.\u0122 &%7\x9A3\x94\"!5&#/c#;c.\" &\"$;\x8E0#*;\x8E&7!2!\"!6!#/C$$;\x8E0#*;\x8E&;)/1$$;\x8E0#*;\x8E&8':\x8F(\"%!(&'#($'#&'#.\xCB &%7\x9A3\x94\"!5&#/c#;c.\" &\"$;\x8E0#*;\x8E&7!2!\"!6!#/C$$;\x8E0#*;\x8E&;</1$$;\x8E0#*;\x8E&8':\x90(\"%!(&'#($'#&'#.t &%7\x9A3\x94\"!5&#/c#;c.\" &\"$;\x8E0#*;\x8E&7!2!\"!6!#/C$$;\x8E0#*;\x8E&;*/1$$;\x8E0#*;\x8E&8':\x91(\"%!(&'#($'#&'#"),
    peg$decode("%7\x9B3\x95\"!50#/X#$;\x8E0#*;\x8E&7!2!\"!6!#/?$$;\x8E0#*;\x8E&;).# &;*/'$8%:\x92&! (%'#(#'#&'#"),
peg$decode("%7\x9C3\x96\"!5/#/y#$;\x8E0#*;\x8E&7!2!\"!6!#/`$$;\x8E0#*;\x8E&7\x9D2\x97\"!6\x97#.= &7\x9E2\x98\"!6\x98#.0 &7\x9F2\x99\"!6\x99#.# &;*/'$8%:\x93&! (%'#(#'#&'#"),
    peg$decode("%7\xA03\x9A\"!5%#/e#$;\x8E0#*;\x8E&7!2!\"!6!#/L$$;\x8E0#*;\x8E&;:.0 &7e2_\"!6_#.# &;*/'$8%:\x94&! (%'#(#'#&'#"),
    peg$decode("%7\xA13\x9B\"!5&#/e#$;\x8E0#*;\x8E&7!2!\"!6!#/L$$;\x8E0#*;\x8E&;:.0 &7e2_\"!6_#.# &;*/'$8%:\x95&! (%'#(#'#&'#"),
    peg$decode("%7\xA23\x9C\"!5*#/l#$;\x8E0#*;\x8E&7!2!\"!6!#/S$$;\x8E0#*;\x8E&7\x9D2\x97\"!6\x97#.0 &7\x9E2\x98\"!6\x98#.# &;*/'$8%:\x96&! (%'#(#'#&'#"),
    peg$decode("7\xA34&\"!5!#"),
    peg$decode("7\xA44'\"!5!#"),
    peg$decode("%7\xA52\x9D\"!6\x9D#/\x7F#%%;j/F#;j.\" &\";j.\" &\";j.\" &\";j.\" &\";j.\" &\"+&)&'#/\"!&,)/B$7\xA62\x9E\"!6\x9E#.* &7\xA74(\"!5!#.\" &\"8#:\x97$!!(\"'#&'#"),
    peg$decode(";l.H &%7\xA52\x9D\"!6\x9D#/7#7\xA84)\"!5!#/'$8\":\x98#! (\"'#&'#"),
    peg$decode("7\xA94*\"!5!#.) &;k.# &;m"),
    peg$decode("7\xAA4+\"!5!#.) &;k.# &;m"),
    peg$decode("%2\x9F\"!6\x9F#/\x98#$4,\"!5!#.E &%2\x9D\"!6\x9D#/0#;z/'$8\":\x99#! (\"'#&'#.# &;m0P*4,\"!5!#.E &%2\x9D\"!6\x9D#/0#;z/'$8\":\x99#! (\"'#&'#.# &;m&2\x9F\"!6\x9F#/'$8#:\x9A$!!(#'#&'#"),
    peg$decode("%2\xA0\"!6\xA0#/\x98#$4-\"!5!#.E &%2\x9D\"!6\x9D#/0#;z/'$8\":\x99#! (\"'#&'#.# &;m0P*4-\"!5!#.E &%2\x9D\"!6\x9D#/0#;z/'$8\":\x99#! (\"'#&'#.# &;m&2\xA0\"!6\xA0#/'$8#:\x9A$!!(#'#&'#"),
    peg$decode("%7\xAB2\xA1\"!6\xA1#/\u010F#$7\xAC4.\"!5!#0**7\xAC4.\"!5!#&$7\xAD2\xA2\"!6\xA2#/-#0**7\xAD2\xA2\"!6\xA2#&&&#/\xD4$$%7\xAE4/\"!5!#/^#$7\xAC4.\"!5!#0**7\xAC4.\"!5!#&$7\xAD2\xA2\"!6\xA2#/-#0**7\xAD2\xA2\"!6\xA2#&&&#/#$+#)(#'#&'#0o*%7\xAE4/\"!5!#/^#$7\xAC4.\"!5!#0**7\xAC4.\"!5!#&$7\xAD2\xA2\"!6\xA2#/-#0**7\xAD2\xA2\"!6\xA2#&&&#/#$+#)(#'#&'#&7\"2\"\"!6\"#/#$+%)(%'#(#'#&'#"),
    peg$decode("%%7\xAF2\xA3\"!6\xA3#.\" &\"&,;n/2$$;o0#*;o&8#:\x9B$#\"! (\"'#"),
    peg$decode("%$;o/&#0#*;o&&&#/' 8!:\x9C!! )"),
    peg$decode("%40\"!5!#.\" &\"%$4 \"!5!#0(*4 \"!5!#&2)\"!6)#/C$$4 \"!5!#/+#0(*4 \"!5!#&&&#/#$+#)(#'#(\"'#.: &$4 \"!5!#/+#0(*4 \"!5!#&&&#/h$%2\xA4\"!6\xA4#/O#40\"!5!#.\" &\"$4 \"!5!#/+#0(*4 \"!5!#&&&#/#$+#)(#'#&'#.\" &\"8#:\x9D$ (\"'#"),
    peg$decode(";p.# &;q"),
    peg$decode("%$41\"!5!#.) &;k.# &;m04*41\"!5!#.) &;k.# &;m&8!:\x9C!! )"),
    peg$decode("$4(\"!5!#/+#0(*4(\"!5!#&&&#"),
    peg$decode(";x.\" &\""),
    peg$decode("2\xA5\"!6\xA5#.> &2\x9E\"!6\x9E#.3 &2\xA6\"!6\xA6#.( &2\xA7\"!6\xA7#"),
    peg$decode("3\xA8\"!5!#.\x8A &%2\x9D\"!6\x9D#/{#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"42\"!5!#/=$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"8':\x9E( (&'#&'#"),
    peg$decode("3\xAA\"!5!#.\x8A &%2\x9D\"!6\x9D#/{#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"43\"!5!#/=$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"8':\x9F( (&'#&'#"),
    peg$decode("3\xAB\"!5!#.\x8A &%2\x9D\"!6\x9D#/{#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"44\"!5!#/=$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"8':\xA0( (&'#&'#"),
    peg$decode("3\xA4\"!5!#.\x8A &%2\x9D\"!6\x9D#/{#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"45\"!5!#/=$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"8':\xA1( (&'#&'#"),
    peg$decode("3\xAC\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"46\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xAD\"!5\"#/& 8!:\xA2! )"),
    peg$decode("3\xAE\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"47\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xAF\"!5\"#/& 8!:\xA3! )"),
    peg$decode("3\xB0\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"48\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xB1\"!5\"#/& 8!:\xA4! )"),
    peg$decode("3\xB2\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"49\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xB3\"!5\"#/& 8!:\xA5! )"),
    peg$decode("3\xB4\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"4:\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xB5\"!5\"#/& 8!:\xA6! )"),
    peg$decode("3\xB6\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"4;\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xB7\"!5\"#/& 8!:\xA7! )"),
    peg$decode("3\xB8\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"4<\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xB9\"!5\"#/& 8!:\xA8! )"),
    peg$decode("3\xBA\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"4=\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xBB\"!5\"#/& 8!:\xA9! )"),
    peg$decode("3\xBC\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"4>\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xBD\"!5\"#/& 8!:\xAA! )"),
    peg$decode("3\xBE\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"4?\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xBF\"!5\"#/& 8!:\xAB! )"),
    peg$decode("3\xC0\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"4@\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xC1\"!5\"#/& 8!:\xAC! )"),
    peg$decode("3\xC2\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"4A\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xC3\"!5\"#/& 8!:\xAD! )"),
    peg$decode("3\xC4\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"4B\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xC5\"!5\"#/& 8!:\xAE! )"),
    peg$decode("3\xC6\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"4C\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xC7\"!5\"#/& 8!:\xAF! )"),
    peg$decode("3\xC8\"!5!#.\x9D &%2\x9D\"!6\x9D#/x#2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"2\xA9\"!6\xA9#.\" &\"4D\"!5!#/:$2\x9E\"!6\x9E#.( &4(\"!5!#.\" &\"+')(&'#&'#.3 &%3\xC9\"!5\"#/& 8!:\xB0! )"),
    peg$decode("7\xB0<%$;r0#*;r&;x/#$+\")(\"'#="),
    peg$decode("7\xB1<%$;r0#*;r&;v/'$8\":\xB1#! (\"'#="),
    peg$decode("7\xB2<%$;r0#*;r&;s/'$8\":\xB2#! (\"'#="),
    peg$decode("%$;r0#*;r&2,\"!6,#/0$;t/'$8#:\xB3$! (#'#(\"'#"),
    peg$decode("7\xB3<%$;r0#*;r&;u/9$;~/0$;\x84/'$8$:\xB4%!\"($'#(#'#(\"'#="),
    peg$decode("7\xB3<%$;r0#*;r&;u/9$;~/0$;\x8C/'$8$:\xB5%!\"($'#(#'#(\"'#="),
    peg$decode("7\xB3<%$;r0#*;r&;u/9$;\x87/0$;\x8C/'$8$:)%!\"($'#(#'#(\"'#.\u012F &%$;r0#*;r&;u/9$;|/0$;\x84/'$8$:\xB6%!\"($'#(#'#(\"'#.\xFF &%$;r0#*;r&;u/9$;\x84/0$;\x84/'$8$:\xB7%!\"($'#(#'#(\"'#.\xCF &%$;r0#*;r&;u/9$;\x81/0$;\x85/'$8$:\xB8%!\"($'#(#'#(\"'#.\x9F &%$;r0#*;r&;u/9$;\x87/0$;\x8A/'$8$:\xB9%!\"($'#(#'#(\"'#.o &%$;r0#*;r&;u/9$;\x87/0$;|/'$8$:\xBA%!\"($'#(#'#(\"'#.? &%$;r0#*;r&2\xA9\"!6\xA9#/&$8\":\xBB# (\"'#="),
    peg$decode("7\xB4<%$;r0#*;r&;u/B$;}/9$;~/0$;\x7F/'$8%:\xBC&!#(%'#($'#(#'#(\"'#.\x98 &%$;r0#*;r&;u/B$;\x88/9$;{/0$;}/'$8%:\xBD&!#(%'#($'#(#'#(\"'#._ &%$;r0#*;r&;u/K$;\x7F/B$;\x88/9$;{/0$;}/'$8&:\xBE'!$(&'#(%'#($'#(#'#(\"'#="),
    peg$decode("7\xB5<%$;r0#*;r&;u/9$;\x84/0$;\x89/'$8$:\xBF%!\"($'#(#'#(\"'#.D &%$;r0#*;r&;u/0$;\x89/'$8#:\xC0$!!(#'#(\"'#="),
    peg$decode("7\xB6<%$;r0#*;r&;u/9$;\x80/0$;\x8D/'$8$:\xC1%!\"($'#(#'#(\"'#.V &%$;r0#*;r&;u/B$;\x82/9$;\x80/0$;\x8D/'$8%:\xC2&!#(%'#($'#(#'#(\"'#="),
    peg$decode("7\xB7<%$;r0#*;r&;u/5$2%\"!6%#/'$8#:\xC3$!!(#'#(\"'#="),
    peg$decode("7\xB8<%$;r0#*;r&;u/'$8\":\xC4#! (\"'#="),
    peg$decode("7\xB9<%$;r0#*;r&;\x8B/b$;\x88/Y$;\x83/P$3\xCA\"!5!#/B$;y;v/7$;y2$\"!6$#/'$8):\xC5*!\"()'#(''#(%'#($'#(#'#(\"'#.o &%$;r0#*;r&;\x8B/[$;\x88/R$;\x83/I$3\xCA\"!5!#/;$;y;w;y2$\"!6$#/'$8):\xC5*!\"()'#(%'#($'#(#'#(\"'#="),
    peg$decode("7\xBA<%$;r0#*;r&;s/5$2\xCA\"!6\xCA#/'$8#:\"$!!(#'#(\"'#=")
  ];

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$expected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return [peg$savedPos, peg$currPos];
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
  function peg$computeLocation(startPos, endPos) {
    var loc = {};

    if ( peg$VALIDFILENAME ) loc.filename = options.filename;

    var startPosDetails = peg$computePosDetails(startPos);
    loc.start = {
      offset: startPos,
      line: startPosDetails.line,
      column: startPosDetails.column
    };

    var endPosDetails = peg$computePosDetails(endPos);
    loc.end = {
      offset: endPos,
      line: endPosDetails.line,
      column: endPosDetails.column
    };

    return loc;
  }

  function peg$begin() {
    peg$expected.push({ pos: peg$currPos, variants: [] });
  }

  function peg$expect(expected) {
    var top = peg$expected[peg$expected.length - 1];

    if (peg$currPos < top.pos) { return; }

    if (peg$currPos > top.pos) {
      top.pos = peg$currPos;
      top.variants = [];
    }

    top.variants.push(expected);
  }

  function peg$end(invert) {
    var expected = peg$expected.pop();
    var top = peg$expected[peg$expected.length - 1];
    var variants = expected.variants;

    if (top.pos !== expected.pos) { return; }

    if (invert) {
      variants = variants.map(function(e) {
        return e.type === "not" ? e.expected : { type: "not", expected: e };
      });
    }

    Array.prototype.push.apply(top.variants, variants);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found, location),
      expected,
      found,
      location
    );
  }

  function peg$buildError() {
    var expected = peg$expected[0];
    var failPos = expected.pos;

    return peg$buildStructuredError(
      expected.variants,
      failPos < input.length ? input.charAt(failPos) : null,
      failPos < input.length
        ? peg$computeLocation(failPos, failPos + 1)
        : peg$computeLocation(failPos, failPos)
    );
  }

  function peg$decode(s) {
    return s.split("").map(function(ch) { return ch.charCodeAt(0) - 32; });
  }

  function peg$parseRule(index) {
    var bc = peg$bytecode[index];
    var ip = 0;
    var ips = [];
    var end = bc.length;
    var ends = [];
    var stack = [];
    var params, paramsLength, paramsN;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push('');
            ip++;
            break;

          case 1:
            stack.push(undefined);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 41:
            paramsLength = bc[ip + 2];
            paramsN = 3 + paramsLength

            params = bc.slice(ip + 3, ip + paramsN);
            params = paramsLength === 1
              ? stack[stack.length - 1 - params[ 0 ]]
              : params.map(function(p) { return stack[stack.length - 1 - p]; });

            stack.splice(
              stack.length - bc[ip + 1],
              bc[ip + 1],
              params
            );

            ip += paramsN;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$literals[bc[ip + 1]].length) === peg$literals[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$literals[bc[ip + 1]].length).toLowerCase() === peg$literals[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$regexps[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$literals[bc[ip + 1]]);
            peg$currPos += peg$literals[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            rule$expects(peg$expectations[bc[ip + 1]]);
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3])
              .map(function(p) { return stack[stack.length - 1 - p]; });

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$functions[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          case 38:
            peg$begin();
            ip++;
            break;

          case 39:
            peg$end(bc[ip + 1]);
            ip += 2;
            break;

          // istanbul ignore next
          default:
            throw new Error(
              "Rule #" + index + ", position " + ip + ": "
              + "Invalid opcode " + bc[ip] + "."
            );
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }


    const {initial, inherit} = require('./cascade');

    function extractList(list, index) {
      return list.map(function(element) { return element[index]; });
    }

    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index))
        .filter(function(element) { return element !== null; });
    }

    function buildExpression(head, tail) {
      return tail.reduce(function(result, element) {
        return {
          type: 'Expression',
          operator: element[0],
          left: result,
          right: element[1]
        };
      }, head);
    }

    function extend(a, b) {
      for (var prop in b) {
        a[prop] = b[prop];
      }

      return a;
    }

    function combine(a) {
      return a.reduce(function(obj, next) {
        return extend(obj, next);
      }, {});
    }

    function setTopRightBottomLeft(obj, before, after, t, r, b, l) {
      obj[before + 'Top' + (after || '')] = t;
      obj[before + 'Right' + (after || '')] = r;
      obj[before + 'Bottom' + (after || '')] = b;
      obj[before + 'Left' + (after || '')] = l;
      return obj;
    }

    function setTopRightBottomLeftOr(x, obj, before, after, t, r, b, l) {
      if (!x) return setTopRightBottomLeft(obj, before, after, t, r, b, l);

      x = x.toLowerCase();

      if (x === '-top') obj[before + 'Top' + (after || '')] = t;
      if (x === '-right') obj[before + 'Right' + (after || '')] = r;
      if (x === '-bottom') obj[before + 'Bottom' + (after || '')] = b;
      if (x === '-left') obj[before + 'Left' + (after || '')] = l;

      return obj;
    }

    const colorMap = new Map([
      ['maroon', {r: 128, g: 0, b: 0, a: 1}],
      ['red', {r: 255, g: 0, b: 0, a: 1}],
      ['orange', {r: 255, g: 165, b: 0, a: 1}],
      ['yellow', {r: 255, g: 255, b: 0, a: 1}],
      ['olive', {r: 128, g: 128, b: 0, a: 1}],
      ['purple', {r: 128, g: 0, b: 128, a: 1}],
      ['fuchsia', {r: 255, g: 0, b: 255, a: 1}],
      ['white', {r: 255, g: 255, b: 255, a: 1}],
      ['lime', {r: 0, g: 255, b: 0, a: 1}],
      ['green', {r: 0, g: 128, b: 0, a: 1}],
      ['navy', {r: 0, g: 0, b: 128, a: 1}],
      ['blue', {r: 0, g: 0, b: 255, a: 1}],
      ['aqua', {r: 0, g: 255, b: 255, a: 1}],
      ['teal', {r: 0, g: 128, b: 128, a: 1}],
      ['black', {r: 0, g: 0, b: 0, a: 1}],
      ['silver', {r: 192, g: 192, b: 192, a: 1}],
      ['gray', {r: 128, g: 128, b: 128, a: 1}],
      ['transparent', {r: 255, g: 255, b: 255, a: 0}]
    ]);


  peg$begin();
  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$expect(peg$endExpectation());
    }

    throw peg$buildError();
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
