/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { start: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        ";",
        peg$literalExpectation(";", false),
        function(declarationsHead, declarationsTail) { return combine(buildList(declarationsHead, declarationsTail, 2)); },
        ":",
        peg$literalExpectation(":", false),
        function(name, value) {
              let r = {};
              r['_' + name] = value;
              return r;
            },
        function(name) { return name; },
        function(head, tail) { return buildExpression(head, tail); },
        "/",
        peg$literalExpectation("/", false),
        function() { return '/'; },
        ",",
        peg$literalExpectation(",", false),
        function() { return ','; },
        function(quantity) {
              return {
                type: 'Quantity',
                value: quantity.value,
                unit: quantity.unit
              };
            },
        function(value) { return { type: 'String', value: value }; },
        function(value) { return { type: 'URI',    value: value }; },
        function(value) { return value; },
        ")",
        peg$literalExpectation(")", false),
        function(name, params) {
              return { type: 'Function', name: name, params: params };
            },
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        "%",
        peg$literalExpectation("%", false),
        function(component) {
            return Math.max(0, Math.min(100, parseInt(component, 10))) * 1e-2 * 255
          },
        "1",
        peg$literalExpectation("1", false),
        "2",
        peg$literalExpectation("2", false),
        /^[0-4]/,
        peg$classExpectation([["0", "4"]], false, false),
        "25",
        peg$literalExpectation("25", false),
        /^[0-5]/,
        peg$classExpectation([["0", "5"]], false, false),
        function(component) {
            return parseInt(Array.isArray(component) ? component.join('') : component, 10);
          },
        function(a) {
            const component = a.join('');
            return Math.max(0, Math.min(100, parseInt(component, 10))) * 1e-2
          },
        ".",
        peg$literalExpectation(".", false),
        function(a, b, c) {
            const component = (a ? a.join('') : '') + b + c.join('');
            return Math.max(0, Math.min(1, parseFloat(component)));
          },
        function(a) {
            return Math.max(0, Math.min(1, parseInt(a.join(''), 10)))
          },
        "rgba(",
        peg$literalExpectation("rgba(", false),
        function(r, g, b, a) {
            return {r, g, b, a};
          },
        "rgb(",
        peg$literalExpectation("rgb(", false),
        function(r, g, b) {
            return {r, g, b, a: 1};
          },
        "#",
        peg$literalExpectation("#", false),
        /^[a-f0-9]/i,
        peg$classExpectation([["a", "f"], ["0", "9"]], false, true),
        function(r, g, b, a) {
            return {
              r: parseInt(r.join(''), 16),
              g: parseInt(g.join(''), 16),
              b: parseInt(b.join(''), 16),
              a: a ? parseInt(a.join(''), 16) / 255 : 1
            }
          },
        /^[a-f0-9]/,
        peg$classExpectation([["a", "f"], ["0", "9"]], false, false),
        function(r, g, b, a) {
            return {
              r: parseInt(r + r, 16),
              g: parseInt(g + g, 16),
              b: parseInt(b + b, 16),
              a: a ? parseInt(a + a, 16) / 255 : 1
            }
          },
        "maroon",
        peg$literalExpectation("maroon", false),
        "red",
        peg$literalExpectation("red", false),
        "orange",
        peg$literalExpectation("orange", false),
        "yellow",
        peg$literalExpectation("yellow", false),
        "olive",
        peg$literalExpectation("olive", false),
        "purple",
        peg$literalExpectation("purple", false),
        "fuchsia",
        peg$literalExpectation("fuchsia", false),
        "white",
        peg$literalExpectation("white", false),
        "lime",
        peg$literalExpectation("lime", false),
        "green",
        peg$literalExpectation("green", false),
        "navy",
        peg$literalExpectation("navy", false),
        "blue",
        peg$literalExpectation("blue", false),
        "aqua",
        peg$literalExpectation("aqua", false),
        "teal",
        peg$literalExpectation("teal", false),
        "black",
        peg$literalExpectation("black", false),
        "silver",
        peg$literalExpectation("silver", false),
        "gray",
        peg$literalExpectation("gray", false),
        function() {
            return colorMap.get(text())
          },
        "inherit",
        peg$literalExpectation("inherit", false),
        function() { return inherited; },
        "initial",
        peg$literalExpectation("initial", false),
        function() { return initial; },
        "xx-small",
        peg$literalExpectation("xx-small", false),
        function() { return 9 },
        "x-small",
        peg$literalExpectation("x-small", false),
        function() { return 10 },
        "small",
        peg$literalExpectation("small", false),
        function() { return 13 },
        "medium",
        peg$literalExpectation("medium", false),
        function() { return 16 },
        "large",
        peg$literalExpectation("large", false),
        function() { return 18 },
        "x-large",
        peg$literalExpectation("x-large", false),
        function() { return 24 },
        "xx-large",
        peg$literalExpectation("xx-large", false),
        function() { return 32 },
        "smaller",
        peg$literalExpectation("smaller", false),
        function() { return { value: 1/1.2, unit: 'em' } },
        "larger",
        peg$literalExpectation("larger", false),
        function() { return { value: 1.2, unit: 'em' } },
        function(font_size) { return font_size; },
        "normal",
        peg$literalExpectation("normal", false),
        function(line_height) { return line_height; },
        "italic",
        peg$literalExpectation("italic", false),
        "oblique",
        peg$literalExpectation("oblique", false),
        "bolder",
        peg$literalExpectation("bolder", false),
        "lighter",
        peg$literalExpectation("lighter", false),
        "bold",
        peg$literalExpectation("bold", false),
        function() { return 700; },
        function() { return +text() >= 1 && +text() <= 1000 ? +text() : undefined; },
        "small-caps",
        peg$literalExpectation("small-caps", false),
        "ultra-condensed",
        peg$literalExpectation("ultra-condensed", false),
        "extra-condensed",
        peg$literalExpectation("extra-condensed", false),
        "condensed",
        peg$literalExpectation("condensed", false),
        "semi-condensed",
        peg$literalExpectation("semi-condensed", false),
        "semi-expanded",
        peg$literalExpectation("semi-expanded", false),
        "expanded",
        peg$literalExpectation("expanded", false),
        "extra-expanded",
        peg$literalExpectation("extra-expanded", false),
        "ultra-expanded",
        peg$literalExpectation("ultra-expanded", false),
        function(family) { return family; },
        function(head, tail) { return buildList(head, tail, 1).join(' '); },
        function(f1, fn) {
          return [f1].concat(fn ? extractList(fn, 2) : []);
        },
        function(s) {
          if ($font) {
            if (s === 'normal') {
              if (++$fontNormals > 4) $font = undefined;
            } else {
              if ('fontStyle' in $font) {
                $font = undefined;
              } else {
                $font.fontStyle = s;
                ++$fontNormals;
              }
            }
          }
        },
        function(s) {
          if ($font) {
            if (s === undefined || 'fontWeight' in $font) {
              $font = undefined;
            } else {
              $font.fontWeight = s;
              ++$fontNormals;
            }
          }
        },
        function(s) {
          if ($font) {
            if ('fontVariant' in $font) {
              $font = undefined;
            } else {
              $font.fontVariant = s;
              ++$fontNormals;
            }
          }
        },
        function(s) {
          if ($font) {
            if ('fontStretch' in $font) {
              $font = undefined;
            } else {
              $font.fontStretch = s;
              ++$fontNormals;
            }
          }
        },
        function() {
          const ret = $font;
          $font = {};
          $fontNormals = 0;
          return ret;
        },
        function(x) {
            if (x[0] === undefined) return;

            const ret = Object.assign({
              fontStyle: 'normal',
              fontWeight: 'normal',
              fontVariant: 'normal',
              fontStretch: 'normal'
            }, x[0]);

            ret.fontSize = x[1];
            ret.lineHeight = x[2][1] === '/' ? x[2][3] : 'normal';
            ret.fontFamily = x[3];
            return ret;
          },
        "ltr",
        peg$literalExpectation("ltr", false),
        "rtl",
        peg$literalExpectation("rtl", false),
        "block",
        peg$literalExpectation("block", false),
        function() { return {outer: 'block', inner: 'flow'}; },
        "inline-block",
        peg$literalExpectation("inline-block", false),
        function() { return {outer: 'inline', inner: 'flow-root'}; },
        "inline",
        peg$literalExpectation("inline", false),
        function() { return {outer: 'inline', inner: 'flow'}; },
        "flow-root",
        peg$literalExpectation("flow-root", false),
        function() { return {outer: 'block', inner: 'flow-root'}; },
        "horizontal-tb",
        peg$literalExpectation("horizontal-tb", false),
        "vertical-lr",
        peg$literalExpectation("vertical-lr", false),
        "vertical-rl",
        peg$literalExpectation("vertical-rl", false),
        "nowrap",
        peg$literalExpectation("nowrap", false),
        "pre-wrap",
        peg$literalExpectation("pre-wrap", false),
        "pre-line",
        peg$literalExpectation("pre-line", false),
        "pre",
        peg$literalExpectation("pre", false),
        "absolute",
        peg$literalExpectation("absolute", false),
        "relative",
        peg$literalExpectation("relative", false),
        "static",
        peg$literalExpectation("static", false),
        "auto",
        peg$literalExpectation("auto", false),
        "none",
        peg$literalExpectation("none", false),
        "hidden",
        peg$literalExpectation("hidden", false),
        "dotted",
        peg$literalExpectation("dotted", false),
        "dashed",
        peg$literalExpectation("dashed", false),
        "solid",
        peg$literalExpectation("solid", false),
        "double",
        peg$literalExpectation("double", false),
        "groove",
        peg$literalExpectation("groove", false),
        "ridge",
        peg$literalExpectation("ridge", false),
        "inset",
        peg$literalExpectation("inset", false),
        "outset",
        peg$literalExpectation("outset", false),
        "font-size",
        peg$literalExpectation("font-size", true),
        function(fontSize) {
            return {fontSize};
          },
        "line-height",
        peg$literalExpectation("line-height", true),
        function(lineHeight) {
            return {lineHeight};
          },
        "font-style",
        peg$literalExpectation("font-style", true),
        function(fontStyle) {
            return {fontStyle};
          },
        "font-weight",
        peg$literalExpectation("font-weight", true),
        function(fontWeight) {
            return fontWeight && {fontWeight};
          },
        "font-variant",
        peg$literalExpectation("font-variant", true),
        function(fontVariant) {
            return {fontVariant};
          },
        "font-stretch",
        peg$literalExpectation("font-stretch", true),
        function(fontStretch) {
            return {fontStretch};
          },
        "font-family",
        peg$literalExpectation("font-family", true),
        function(fontFamily) {
            return {fontFamily};
          },
        "font",
        peg$literalExpectation("font", true),
        function(font) {
            return font && (typeof font === "object" ? font : {font});
          },
        "color",
        peg$literalExpectation("color", true),
        function(color) {
            return {color};
          },
        "direction",
        peg$literalExpectation("direction", true),
        function(direction) {
            return {direction};
          },
        "display",
        peg$literalExpectation("display", true),
        function(display) {
            return {display};
          },
        "writing-mode",
        peg$literalExpectation("writing-mode", true),
        function(writingMode) {
            return {writingMode};
          },
        "white-space",
        peg$literalExpectation("white-space", true),
        function(whiteSpace) {
            return {whiteSpace};
          },
        "tab-size",
        peg$literalExpectation("tab-size", true),
        function(tabSize) {
            return {tabSize};
          },
        "position",
        peg$literalExpectation("position", true),
        function(position) {
            return {position};
          },
        "margin-top",
        peg$literalExpectation("margin-top", true),
        function(marginTop) {
            return {marginTop};
          },
        "margin-right",
        peg$literalExpectation("margin-right", true),
        function(marginRight) {
            return {marginRight};
          },
        "margin-bottom",
        peg$literalExpectation("margin-bottom", true),
        function(marginBottom) {
            return {marginBottom};
          },
        "margin-left",
        peg$literalExpectation("margin-left", true),
        function(marginLeft) {
            return {marginLeft};
          },
        "margin",
        peg$literalExpectation("margin", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'margin', '', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'margin', '', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'margin', '', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'margin', '', s, s, s, s);
          },
        "padding-top",
        peg$literalExpectation("padding-top", true),
        function(paddingTop) {
            return {paddingTop};
          },
        "padding-right",
        peg$literalExpectation("padding-right", true),
        function(paddingRight) {
            return {paddingRight};
          },
        "padding-bottom",
        peg$literalExpectation("padding-bottom", true),
        function(paddingBottom) {
            return {paddingBottom};
          },
        "padding-left",
        peg$literalExpectation("padding-left", true),
        function(paddingLeft) {
            return {paddingLeft};
          },
        "padding",
        peg$literalExpectation("padding", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'padding', '', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'padding', '', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'padding', '', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'padding', '', s, s, s, s);
          },
        "border-top-width",
        peg$literalExpectation("border-top-width", true),
        function(borderTopWidth) {
            return {borderTopWidth};
          },
        "border-right-width",
        peg$literalExpectation("border-right-width", true),
        function(borderRightWidth) {
            return {borderRightWidth};
          },
        "border-bottom-width",
        peg$literalExpectation("border-bottom-width", true),
        function(borderBottomWidth) {
            return {borderBottomWidth};
          },
        "border-left-width",
        peg$literalExpectation("border-left-width", true),
        function(borderLeftWidth) {
            return {borderLeftWidth};
          },
        "border-width",
        peg$literalExpectation("border-width", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'border', 'Width', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'border', 'Width', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'border', 'Width', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'border', 'Width', s, s, s, s);
          },
        "border-top-style",
        peg$literalExpectation("border-top-style", true),
        function(borderTopStyle) {
            return {borderTopStyle};
          },
        "border-right-style",
        peg$literalExpectation("border-right-style", true),
        function(borderRightStyle) {
            return {borderRightStyle};
          },
        "border-bottom-style",
        peg$literalExpectation("border-bottom-style", true),
        function(borderBottomStyle) {
            return {borderBottomStyle};
          },
        "border-left-style",
        peg$literalExpectation("border-left-style", true),
        function(borderLeftStyle) {
            return {borderLeftStyle};
          },
        "border-style",
        peg$literalExpectation("border-style", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'border', 'Style', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'border', 'Style', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'border', 'Style', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'border', 'Style', s, s, s, s);
          },
        "border-top-color",
        peg$literalExpectation("border-top-color", true),
        function(borderTopColor) {
            return {borderTopColor};
          },
        "border-right-color",
        peg$literalExpectation("border-right-color", true),
        function(borderRightColor) {
            return {borderRightColor};
          },
        "border-bottom-color",
        peg$literalExpectation("border-bottom-color", true),
        function(borderBottomColor) {
            return {borderBottomColor};
          },
        "border-left-color",
        peg$literalExpectation("border-left-color", true),
        function(borderLeftColor) {
            return {borderLeftColor};
          },
        "border-color",
        peg$literalExpectation("border-color", true),
        function(t, r, b, l) {
            return setTopRightBottomLeft({}, 'border', 'Color', t, r, b, l);
          },
        function(t, h, b) {
            return setTopRightBottomLeft({}, 'border', 'Color', t, h, b, h);
          },
        function(v, h) {
            return setTopRightBottomLeft({}, 'border', 'Color', v, h, v, h);
          },
        function(s) {
            return setTopRightBottomLeft({}, 'border', 'Color', s, s, s, s);
          },
        "-top",
        peg$literalExpectation("-top", false),
        "-right",
        peg$literalExpectation("-right", false),
        "-bottom",
        peg$literalExpectation("-bottom", false),
        "-left",
        peg$literalExpectation("-left", false),
        "border",
        peg$literalExpectation("border", true),
        function(t, w, s, c) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (c) setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            return ret;
          },
        function(t, s, w, c) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (c) setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            return ret;
          },
        function(t, w, c, s) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            if (s) setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            return ret;
          },
        function(t, c, w, s) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            if (s) setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            return ret;
          },
        function(t, c, s, w) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (w) setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            return ret;
          },
        function(t, s, c, w) {
            const ret = {};
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', c, c, c, c);
            setTopRightBottomLeftOr(t, ret, 'border', 'Style', s, s, s, s);
            if (w) setTopRightBottomLeftOr(t, ret, 'border', 'Width', w, w, w, w);
            return ret;
          },
        function(t, w) {
            return setTopRightBottomLeftOr(t, {}, 'border', 'Width', w, w, w, w);
          },
        function(t, c) {
            return setTopRightBottomLeftOr(t, {}, 'border', 'Color', c, c, c, c);
          },
        function(t, s) {
            return setTopRightBottomLeftOr(t, {}, 'border', 'Style', s, s, s, s);
          },
        function(t, i) {
            const ret = setTopRightBottomLeftOr(t, {}, 'border', 'Style', i, i, i, i);
            setTopRightBottomLeftOr(t, ret, 'border', 'Width', i, i, i, i);
            setTopRightBottomLeftOr(t, ret, 'border', 'Color', i, i, i, i);
            return ret;
          },
        "background-color",
        peg$literalExpectation("background-color", true),
        function(backgroundColor) {
            return {backgroundColor};
          },
        "background-clip",
        peg$literalExpectation("background-clip", true),
        "border-box",
        peg$literalExpectation("border-box", false),
        "content-box",
        peg$literalExpectation("content-box", false),
        "padding-box",
        peg$literalExpectation("padding-box", false),
        function(backgroundClip) {
            return {backgroundClip};
          },
        "width",
        peg$literalExpectation("width", true),
        function(width) {
            return {width};
          },
        "height",
        peg$literalExpectation("height", true),
        function(height) {
            return {height};
          },
        "box-sizing",
        peg$literalExpectation("box-sizing", true),
        function(boxSizing) {
            return {boxSizing};
          },
        /^[0-9a-f]/i,
        peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        /^[\x80-\uFFFF]/,
        peg$classExpectation([["\x80", "\uFFFF"]], false, false),
        "\\",
        peg$literalExpectation("\\", false),
        "\r\n",
        peg$literalExpectation("\r\n", false),
        /^[ \t\r\n\f]/,
        peg$classExpectation([" ", "\t", "\r", "\n", "\f"], false, false),
        function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        /^[^\r\n\f0-9a-f]/i,
        peg$classExpectation(["\r", "\n", "\f", ["0", "9"], ["a", "f"]], true, true),
        function(ch) { return ch; },
        /^[_a-z]/i,
        peg$classExpectation(["_", ["a", "z"]], false, true),
        /^[_a-z0-9\-]/i,
        peg$classExpectation(["_", ["a", "z"], ["0", "9"], "-"], false, true),
        "\"",
        peg$literalExpectation("\"", false),
        /^[^\n\r\f\\"]/,
        peg$classExpectation(["\n", "\r", "\f", "\\", "\""], true, false),
        function(nl) { return ''; },
        function(chars) {
              return chars.join('');
            },
        "'",
        peg$literalExpectation("'", false),
        /^[^\n\r\f\\']/,
        peg$classExpectation(["\n", "\r", "\f", "\\", "'"], true, false),
        "/*",
        peg$literalExpectation("/*", false),
        /^[^*]/,
        peg$classExpectation(["*"], true, false),
        "*",
        peg$literalExpectation("*", false),
        /^[^\/*]/,
        peg$classExpectation(["/", "*"], true, false),
        "-",
        peg$literalExpectation("-", false),
        function(prefix, start, chars) {
              return prefix + start + chars.join('');
            },
        function(chars) { return chars.join(''); },
        /^[+\-]/,
        peg$classExpectation(["+", "-"], false, false),
        "e",
        peg$literalExpectation("e", false),
        function() {
              return parseFloat(text());
            },
        /^[!#$%&*-[\]-~]/,
        peg$classExpectation(["!", "#", "$", "%", "&", ["*", "["], ["]", "~"]], false, false),
        "\n",
        peg$literalExpectation("\n", false),
        "\r",
        peg$literalExpectation("\r", false),
        "\f",
        peg$literalExpectation("\f", false),
        "a",
        peg$literalExpectation("a", true),
        "0",
        peg$literalExpectation("0", false),
        /^[Aa]/,
        peg$classExpectation(["A", "a"], false, false),
        function() { return 'a'; },
        "c",
        peg$literalExpectation("c", true),
        /^[Cc]/,
        peg$classExpectation(["C", "c"], false, false),
        function() { return 'c'; },
        "d",
        peg$literalExpectation("d", true),
        /^[Dd]/,
        peg$classExpectation(["D", "d"], false, false),
        function() { return 'd'; },
        peg$literalExpectation("e", true),
        /^[Ee]/,
        peg$classExpectation(["E", "e"], false, false),
        function() { return 'e'; },
        "g",
        peg$literalExpectation("g", true),
        /^[Gg]/,
        peg$classExpectation(["G", "g"], false, false),
        "\\g",
        peg$literalExpectation("\\g", true),
        function() { return 'g'; },
        "h",
        peg$literalExpectation("h", true),
        /^[Hh]/,
        peg$classExpectation(["H", "h"], false, false),
        "\\h",
        peg$literalExpectation("\\h", true),
        function() { return 'h'; },
        "i",
        peg$literalExpectation("i", true),
        /^[Ii]/,
        peg$classExpectation(["I", "i"], false, false),
        "\\i",
        peg$literalExpectation("\\i", true),
        function() { return 'i'; },
        "k",
        peg$literalExpectation("k", true),
        /^[Kk]/,
        peg$classExpectation(["K", "k"], false, false),
        "\\k",
        peg$literalExpectation("\\k", true),
        function() { return 'k'; },
        "l",
        peg$literalExpectation("l", true),
        /^[Ll]/,
        peg$classExpectation(["L", "l"], false, false),
        "\\l",
        peg$literalExpectation("\\l", true),
        function() { return 'l'; },
        "m",
        peg$literalExpectation("m", true),
        /^[Mm]/,
        peg$classExpectation(["M", "m"], false, false),
        "\\m",
        peg$literalExpectation("\\m", true),
        function() { return 'm'; },
        "n",
        peg$literalExpectation("n", true),
        /^[Nn]/,
        peg$classExpectation(["N", "n"], false, false),
        "\\n",
        peg$literalExpectation("\\n", true),
        function() { return 'n'; },
        "o",
        peg$literalExpectation("o", true),
        /^[Oo]/,
        peg$classExpectation(["O", "o"], false, false),
        "\\o",
        peg$literalExpectation("\\o", true),
        function() { return 'o'; },
        "p",
        peg$literalExpectation("p", true),
        /^[Pp]/,
        peg$classExpectation(["P", "p"], false, false),
        "\\p",
        peg$literalExpectation("\\p", true),
        function() { return 'p'; },
        "r",
        peg$literalExpectation("r", true),
        /^[Rr]/,
        peg$classExpectation(["R", "r"], false, false),
        "\\r",
        peg$literalExpectation("\\r", true),
        function() { return 'r'; },
        "s",
        peg$literalExpectation("s", true),
        /^[Ss]/,
        peg$classExpectation(["S", "s"], false, false),
        "\\s",
        peg$literalExpectation("\\s", true),
        function() { return 's'; },
        "t",
        peg$literalExpectation("t", true),
        /^[Tt]/,
        peg$classExpectation(["T", "t"], false, false),
        "\\t",
        peg$literalExpectation("\\t", true),
        function() { return 't'; },
        "u",
        peg$literalExpectation("u", true),
        /^[Uu]/,
        peg$classExpectation(["U", "u"], false, false),
        "\\u",
        peg$literalExpectation("\\u", true),
        function() { return 'u'; },
        "x",
        peg$literalExpectation("x", true),
        /^[Xx]/,
        peg$classExpectation(["X", "x"], false, false),
        "\\x",
        peg$literalExpectation("\\x", true),
        function() { return 'x'; },
        "z",
        peg$literalExpectation("z", true),
        /^[Zz]/,
        peg$classExpectation(["Z", "z"], false, false),
        "\\z",
        peg$literalExpectation("\\z", true),
        function() { return 'z'; },
        peg$otherExpectation("whitespace"),
        peg$otherExpectation("string"),
        function(string) { return string; },
        peg$otherExpectation("identifier"),
        function(ident) { return ident; },
        peg$otherExpectation("hash"),
        function(name) { return '#' + name; },
        peg$otherExpectation("length"),
        function(value) { return { value: value, unit: 'ex' }; },
        function(value) { return { value: value, unit: 'cm' }; },
        function(value) { return { value: value, unit: 'mm' }; },
        function(value) { return { value: value, unit: 'in' }; },
        function(value) { return { value: value, unit: 'pt' }; },
        function(value) { return { value: value, unit: 'pc' }; },
        function(value) { return { value: value, unit: 'em' }; },
        function() { return 0; },
        peg$otherExpectation("angle"),
        function(value) { return { value: value, unit: 'deg'  }; },
        function(value) { return { value: value, unit: 'rad'  }; },
        function(value) { return { value: value, unit: 'grad' }; },
        peg$otherExpectation("time"),
        function(value) { return { value: value, unit: 'ms' }; },
        function(value) { return { value: value, unit: 's'  }; },
        peg$otherExpectation("frequency"),
        function(value) { return { value: value, unit: 'hz' }; },
        function(value) { return { value: value, unit: 'kh' }; },
        peg$otherExpectation("percentage"),
        function(value) { return { value: value, unit: '%' }; },
        peg$otherExpectation("number"),
        function(value) { return { value: value, unit: null }; },
        peg$otherExpectation("uri"),
        "(",
        peg$literalExpectation("(", true),
        function(url) { return url; },
        peg$otherExpectation("function"),
        peg$literalExpectation("(", false)
      ],

      peg$bytecode = [
        peg$decode("%$;\x970#*;\x97&/\xA3#;!.\" &\"/\x95$$%2 \"\"6 7!/A#$;\x970#*;\x97&/1$;!.\" &\"/#$+#)(#'#(\"'#&'#0Q*%2 \"\"6 7!/A#$;\x970#*;\x97&/1$;!.\" &\"/#$+#)(#'#(\"'#&'#&/)$8#:\"#\"! )(#'#(\"'#&'#"),
        peg$decode(";D.\u0163 &;E.\u015D &;F.\u0157 &;G.\u0151 &;H.\u014B &;J.\u0145 &;K.\u013F &;L.\u0139 &;M.\u0133 &;N.\u012D &;O.\u0127 &;P.\u0121 &;Q.\u011B &;R.\u0115 &;S.\u010F &;T.\u0109 &;U.\u0103 &;V.\xFD &;W.\xF7 &;X.\xF1 &;Y.\xEB &;Z.\xE5 &;[.\xDF &;\\.\xD9 &;].\xD3 &;^.\xCD &;_.\xC7 &;`.\xC1 &;a.\xBB &;b.\xB5 &;c.\xAF &;d.\xA9 &;e.\xA3 &;f.\x9D &;g.\x97 &;h.\x91 &;i.\x8B &;j.\x85 &;k.\x7F &;m.y &;p.s &;q.m &;r.g &;n.a &;o.[ &%;\"/Q#2#\"\"6#7$/B$$;\x970#*;\x97&/2$;#/)$8$:%$\"# )($'#(#'#(\"'#&'#"),
        peg$decode("%;\x99/8#$;\x970#*;\x97&/($8\":&\"!!)(\"'#&'#"),
        peg$decode("%;%/i#$%;$.\" &\"/,#;%/#$+\")(\"'#&'#0;*%;$.\" &\"/,#;%/#$+\")(\"'#&'#&/)$8\":'\"\"! )(\"'#&'#"),
        peg$decode("%2(\"\"6(7)/7#$;\x970#*;\x97&/'$8\":*\" )(\"'#&'#.G &%2+\"\"6+7,/7#$;\x970#*;\x97&/'$8\":-\" )(\"'#&'#"),
        peg$decode("%;\xA0.A &;\x9C.; &;\x9B.5 &;\x9D./ &;\x9E.) &;\x9F.# &;\xA1/8#$;\x970#*;\x97&/($8\":.\"!!)(\"'#&'#.\x98 &%;\x98/8#$;\x970#*;\x97&/($8\":/\"!!)(\"'#&'#.s &%;\xA2/8#$;\x970#*;\x97&/($8\":0\"!!)(\"'#&'#.N &;&.H &;).B &%;\x99/8#$;\x970#*;\x97&/($8\":1\"!!)(\"'#&'#"),
        peg$decode("%;\xA3/a#$;\x970#*;\x97&/Q$;#/H$22\"\"6273/9$$;\x970#*;\x97&/)$8%:4%\"$\")(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%$45\"\"5!76/,#0)*45\"\"5!76&&&#/7#27\"\"6778/($8\":9\"!!)(\"'#&'#.\xE7 &%%2:\"\"6:7;/A#45\"\"5!76/2$45\"\"5!76/#$+#)(#'#(\"'#&'#.\xA7 &%2<\"\"6<7=/A#4>\"\"5!7?/2$45\"\"5!76/#$+#)(#'#(\"'#&'#.s &%2@\"\"6@7A/2#4B\"\"5!7C/#$+\")(\"'#&'#.N &%45\"\"5!76/2#45\"\"5!76/#$+\")(\"'#&'#.) &45\"\"5!76/' 8!:D!! )"),
        peg$decode("%$45\"\"5!76/,#0)*45\"\"5!76&&&#/7#27\"\"6778/($8\":E\"!!)(\"'#&'#.\xA3 &%$45\"\"5!760)*45\"\"5!76&/[#2F\"\"6F7G/L$$45\"\"5!76/,#0)*45\"\"5!76&&&#/*$8#:H##\"! )(#'#(\"'#&'#.H &%$45\"\"5!76/,#0)*45\"\"5!76&&&#/' 8!:I!! )"),
        peg$decode("%$;{0#*;{&/\u011A#2J\"\"6J7K/\u010B$$;\x970#*;\x97&/\xFB$;'/\xF2$$;\x970#*;\x97&/\xE2$2+\"\"6+7,/\xD3$$;\x970#*;\x97&/\xC3$;'/\xBA$$;\x970#*;\x97&/\xAA$2+\"\"6+7,/\x9B$$;\x970#*;\x97&/\x8B$;'/\x82$$;\x970#*;\x97&/r$2+\"\"6+7,/c$$;\x970#*;\x97&/S$;(/J$$;\x970#*;\x97&/:$22\"\"6273/+$82:L2$.*&\")(2'#(1'#(0'#(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u030B &%$;{0#*;{&/\xE1#2M\"\"6M7N/\xD2$$;\x970#*;\x97&/\xC2$;'/\xB9$$;\x970#*;\x97&/\xA9$2+\"\"6+7,/\x9A$$;\x970#*;\x97&/\x8A$;'/\x81$$;\x970#*;\x97&/q$2+\"\"6+7,/b$$;\x970#*;\x97&/R$;'/I$$;\x970#*;\x97&/9$22\"\"6273/*$8.:O.#*&\")(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0236 &%$;{0#*;{&/\xDF#2P\"\"6P7Q/\xD0$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#/\xA8$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#/\x80$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#/X$%4R\"\"5!7S/2#4R\"\"5!7S/#$+\")(\"'#&'#.\" &\"/+$8&:T&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u0163 &%$;{0#*;{&/{#2P\"\"6P7Q/l$4R\"\"5!7S/]$4R\"\"5!7S/N$4U\"\"5!7V/?$4R\"\"5!7S.\" &\"/+$8&:W&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\xF4 &%2X\"\"6X7Y.\xDD &2Z\"\"6Z7[.\xD1 &2\\\"\"6\\7].\xC5 &2^\"\"6^7_.\xB9 &2`\"\"6`7a.\xAD &2b\"\"6b7c.\xA1 &2d\"\"6d7e.\x95 &2f\"\"6f7g.\x89 &2h\"\"6h7i.} &2j\"\"6j7k.q &2l\"\"6l7m.e &2n\"\"6n7o.Y &2p\"\"6p7q.M &2r\"\"6r7s.A &2t\"\"6t7u.5 &2v\"\"6v7w.) &2x\"\"6x7y/& 8!:z! )"),
        peg$decode("%2{\"\"6{7|/& 8!:}! ).4 &%2~\"\"6~7\x7F/& 8!:\x80! )"),
        peg$decode("%2\x81\"\"6\x817\x82/& 8!:\x83! ).\xA7 &%2\x84\"\"6\x847\x85/& 8!:\x86! ).\x90 &%2\x87\"\"6\x877\x88/& 8!:\x89! ).y &%2\x8A\"\"6\x8A7\x8B/& 8!:\x8C! ).b &%2\x8D\"\"6\x8D7\x8E/& 8!:\x8F! ).K &%2\x90\"\"6\x907\x91/& 8!:\x92! ).4 &%2\x93\"\"6\x937\x94/& 8!:\x95! )"),
        peg$decode("%2\x96\"\"6\x967\x97/& 8!:\x98! ).4 &%2\x99\"\"6\x997\x9A/& 8!:\x9B! )"),
        peg$decode("%;,./ &;+.) &;\x9C.# &;\xA0/' 8!:\x9C!! )"),
        peg$decode("%2\x9D\"\"6\x9D7\x9E./ &;\xA1.) &;\x9C.# &;\xA0/' 8!:\x9F!! )"),
        peg$decode("2\x9D\"\"6\x9D7\x9E.5 &2\xA0\"\"6\xA07\xA1.) &2\xA2\"\"6\xA27\xA3"),
        peg$decode("2\x9D\"\"6\x9D7\x9E.v &2\xA4\"\"6\xA47\xA5.j &2\xA6\"\"6\xA67\xA7.^ &%2\xA8\"\"6\xA87\xA9/& 8!:\xAA! ).G &%$45\"\"5!76/,#0)*45\"\"5!76&&&#/& 8!:\xAB! )"),
        peg$decode("2\x9D\"\"6\x9D7\x9E.) &2\xAC\"\"6\xAC7\xAD"),
        peg$decode("2\x9D\"\"6\x9D7\x9E.} &2\xAE\"\"6\xAE7\xAF.q &2\xB0\"\"6\xB07\xB1.e &2\xB2\"\"6\xB27\xB3.Y &2\xB4\"\"6\xB47\xB5.M &2\xB6\"\"6\xB67\xB7.A &2\xB8\"\"6\xB87\xB9.5 &2\xBA\"\"6\xBA7\xBB.) &2\xBC\"\"6\xBC7\xBD"),
        peg$decode("%;\x98/8#$;\x970#*;\x97&/($8\":\xBE\"!!)(\"'#&'#.w &%;|/m#$%$;\x970#*;\x97&/,#;|/#$+\")(\"'#&'#0=*%$;\x970#*;\x97&/,#;|/#$+\")(\"'#&'#&/)$8\":\xBF\"\"! )(\"'#&'#"),
        peg$decode("%;3/\x8B#$%2+\"\"6+7,/<#$;\x970#*;\x97&/,$;3/#$+#)(#'#(\"'#&'#0L*%2+\"\"6+7,/<#$;\x970#*;\x97&/,$;3/#$+#)(#'#(\"'#&'#&/)$8\":\xC0\"\"! )(\"'#&'#"),
        peg$decode("%;//' 8!:\xC1!! )"),
        peg$decode("%;0/' 8!:\xC2!! )"),
        peg$decode("%;1/' 8!:\xC3!! )"),
        peg$decode("%;2/' 8!:\xC4!! )"),
        peg$decode("%$%;5.N &%%<;-=.##&&!&'#/,#;6/#$+\")(\"'#&'#.) &;7.# &;8/9#$;\x97/&#0#*;\x97&&&#/#$+\")(\"'#&'#0t*%;5.N &%%<;-=.##&&!&'#/,#;6/#$+\")(\"'#&'#.) &;7.# &;8/9#$;\x97/&#0#*;\x97&&&#/#$+\")(\"'#&'#&/& 8!:\xC5! )"),
        peg$decode("%%;9/\xDF#;-/\xD6$%%<%$;\x970#*;\x97&/2#2(\"\"6(7)/#$+\")(\"'#&'#=.##&&!&'#/9#$;\x97/&#0#*;\x97&&&#/#$+\")(\"'#&'#.r &%$;\x970#*;\x97&/a#2(\"\"6(7)/R$$;\x970#*;\x97&/B$;./9$$;\x97/&#0#*;\x97&&&#/#$+%)(%'#($'#(#'#(\"'#&'#/,$;4/#$+$)($'#(#'#(\"'#&'#/' 8!:\xC6!! )"),
        peg$decode("2\xC7\"\"6\xC77\xC8.) &2\xC9\"\"6\xC97\xCA"),
        peg$decode("%2\xCB\"\"6\xCB7\xCC/& 8!:\xCD! ).b &%2\xCE\"\"6\xCE7\xCF/& 8!:\xD0! ).K &%2\xD1\"\"6\xD17\xD2/& 8!:\xD3! ).4 &%2\xD4\"\"6\xD47\xD5/& 8!:\xD6! )"),
        peg$decode("2\xD7\"\"6\xD77\xD8.5 &2\xD9\"\"6\xD97\xDA.) &2\xDB\"\"6\xDB7\xDC"),
        peg$decode("2\x9D\"\"6\x9D7\x9E.M &2\xDD\"\"6\xDD7\xDE.A &2\xDF\"\"6\xDF7\xE0.5 &2\xE1\"\"6\xE17\xE2.) &2\xE3\"\"6\xE37\xE4"),
        peg$decode(";\x9C.# &;\xA1"),
        peg$decode("2\xE5\"\"6\xE57\xE6.5 &2\xE7\"\"6\xE77\xE8.) &2\xE9\"\"6\xE97\xEA"),
        peg$decode(";\x9C.# &;\xA0"),
        peg$decode(";\x9C./ &;\xA0.) &2\xEB\"\"6\xEB7\xEC"),
        peg$decode("2\xED\"\"6\xED7\xEE.\x89 &2\xEF\"\"6\xEF7\xF0.} &2\xF1\"\"6\xF17\xF2.q &2\xF3\"\"6\xF37\xF4.e &2\xF5\"\"6\xF57\xF6.Y &2\xF7\"\"6\xF77\xF8.M &2\xF9\"\"6\xF97\xFA.A &2\xFB\"\"6\xFB7\xFC.5 &2\xFD\"\"6\xFD7\xFE.) &2\xFF\"\"6\xFF7\u0100"),
        peg$decode("%3\u0101\"\"5)7\u0102/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;-.# &;*/($8%:\u0103%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0104\"\"5+7\u0105/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;..# &;*/($8%:\u0106%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0107\"\"5*7\u0108/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;/.# &;*/($8%:\u0109%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u010A\"\"5+7\u010B/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;0.# &;*/($8%:\u010C%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u010D\"\"5,7\u010E/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;1.# &;*/($8%:\u010F%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0110\"\"5,7\u0111/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;2.# &;*/($8%:\u0112%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0113\"\"5+7\u0114/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;*.# &;4/($8%:\u0115%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0116\"\"5$7\u0117/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;:.# &;*/($8%:\u0118%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0119\"\"5%7\u011A/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;).# &;*/($8%:\u011B%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u011C\"\"5)7\u011D/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;;.# &;*/($8%:\u011E%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u011F\"\"5'7\u0120/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;<.# &;*/($8%:\u0121%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0122\"\"5,7\u0123/`#$;\x970#*;\x97&/P$2#\"\"6#7$/A$$;\x970#*;\x97&/1$;=/($8%:\u0124%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0125\"\"5+7\u0126/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;>.# &;*/($8%:\u0127%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0128\"\"5(7\u0129/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;?.# &;*/($8%:\u012A%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u012B\"\"5(7\u012C/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;@.# &;*/($8%:\u012D%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u012E\"\"5*7\u012F/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;B.# &;*/($8%:\u0130%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0131\"\"5,7\u0132/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;B.# &;*/($8%:\u0133%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0134\"\"5-7\u0135/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;B.# &;*/($8%:\u0136%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0137\"\"5+7\u0138/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;B.# &;*/($8%:\u0139%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u013A\"\"5&7\u013B/\xAE#$;\x970#*;\x97&/\x9E$2#\"\"6#7$/\x8F$$;\x970#*;\x97&/\x7F$;B/v$$;\x970#*;\x97&/f$;B/]$$;\x970#*;\x97&/M$;B/D$$;\x970#*;\x97&/4$;B/+$8+:\u013C+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u013A\"\"5&7\u013B/\x94#$;\x970#*;\x97&/\x84$2#\"\"6#7$/u$$;\x970#*;\x97&/e$;B/\\$$;\x970#*;\x97&/L$;B/C$$;\x970#*;\x97&/3$;B/*$8):\u013D)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u013A\"\"5&7\u013B/z#$;\x970#*;\x97&/j$2#\"\"6#7$/[$$;\x970#*;\x97&/K$;B/B$$;\x970#*;\x97&/2$;B/)$8':\u013E'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u013A\"\"5&7\u013B/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;B.# &;*/($8%:\u013F%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0140\"\"5+7\u0141/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;A.# &;*/($8%:\u0142%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0143\"\"5-7\u0144/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;A.# &;*/($8%:\u0145%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0146\"\"5.7\u0147/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;A.# &;*/($8%:\u0148%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0149\"\"5,7\u014A/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;A.# &;*/($8%:\u014B%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u014C\"\"5'7\u014D/\xAE#$;\x970#*;\x97&/\x9E$2#\"\"6#7$/\x8F$$;\x970#*;\x97&/\x7F$;A/v$$;\x970#*;\x97&/f$;A/]$$;\x970#*;\x97&/M$;A/D$$;\x970#*;\x97&/4$;A/+$8+:\u014E+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u014C\"\"5'7\u014D/\x94#$;\x970#*;\x97&/\x84$2#\"\"6#7$/u$$;\x970#*;\x97&/e$;A/\\$$;\x970#*;\x97&/L$;A/C$$;\x970#*;\x97&/3$;A/*$8):\u014F)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u014C\"\"5'7\u014D/z#$;\x970#*;\x97&/j$2#\"\"6#7$/[$$;\x970#*;\x97&/K$;A/B$$;\x970#*;\x97&/2$;A/)$8':\u0150'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u014C\"\"5'7\u014D/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;A.# &;*/($8%:\u0151%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0152\"\"507\u0153/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;\x9C.# &;*/($8%:\u0154%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0155\"\"527\u0156/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;\x9C.# &;*/($8%:\u0157%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0158\"\"537\u0159/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;\x9C.# &;*/($8%:\u015A%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u015B\"\"517\u015C/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;\x9C.# &;*/($8%:\u015D%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u015E\"\"5,7\u015F/\xAE#$;\x970#*;\x97&/\x9E$2#\"\"6#7$/\x8F$$;\x970#*;\x97&/\x7F$;\x9C/v$$;\x970#*;\x97&/f$;\x9C/]$$;\x970#*;\x97&/M$;\x9C/D$$;\x970#*;\x97&/4$;\x9C/+$8+:\u0160+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u015E\"\"5,7\u015F/\x94#$;\x970#*;\x97&/\x84$2#\"\"6#7$/u$$;\x970#*;\x97&/e$;\x9C/\\$$;\x970#*;\x97&/L$;\x9C/C$$;\x970#*;\x97&/3$;\x9C/*$8):\u0161)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u015E\"\"5,7\u015F/z#$;\x970#*;\x97&/j$2#\"\"6#7$/[$$;\x970#*;\x97&/K$;\x9C/B$$;\x970#*;\x97&/2$;\x9C/)$8':\u0162'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u015E\"\"5,7\u015F/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;\x9C.# &;*/($8%:\u0163%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0164\"\"507\u0165/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;C.# &;*/($8%:\u0166%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0167\"\"527\u0168/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;C.# &;*/($8%:\u0169%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u016A\"\"537\u016B/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;C.# &;*/($8%:\u016C%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u016D\"\"517\u016E/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;C.# &;*/($8%:\u016F%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0170\"\"5,7\u0171/\xAE#$;\x970#*;\x97&/\x9E$2#\"\"6#7$/\x8F$$;\x970#*;\x97&/\x7F$;C/v$$;\x970#*;\x97&/f$;C/]$$;\x970#*;\x97&/M$;C/D$$;\x970#*;\x97&/4$;C/+$8+:\u0172+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u0170\"\"5,7\u0171/\x94#$;\x970#*;\x97&/\x84$2#\"\"6#7$/u$$;\x970#*;\x97&/e$;C/\\$$;\x970#*;\x97&/L$;C/C$$;\x970#*;\x97&/3$;C/*$8):\u0173)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u0170\"\"5,7\u0171/z#$;\x970#*;\x97&/j$2#\"\"6#7$/[$$;\x970#*;\x97&/K$;C/B$$;\x970#*;\x97&/2$;C/)$8':\u0174'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u0170\"\"5,7\u0171/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;C.# &;*/($8%:\u0175%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0176\"\"507\u0177/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;).# &;*/($8%:\u0178%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0179\"\"527\u017A/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;).# &;*/($8%:\u017B%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u017C\"\"537\u017D/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;).# &;*/($8%:\u017E%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u017F\"\"517\u0180/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;).# &;*/($8%:\u0181%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u0182\"\"5,7\u0183/\xAE#$;\x970#*;\x97&/\x9E$2#\"\"6#7$/\x8F$$;\x970#*;\x97&/\x7F$;)/v$$;\x970#*;\x97&/f$;)/]$$;\x970#*;\x97&/M$;)/D$$;\x970#*;\x97&/4$;)/+$8+:\u0184+$&$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u016A &%3\u0182\"\"5,7\u0183/\x94#$;\x970#*;\x97&/\x84$2#\"\"6#7$/u$$;\x970#*;\x97&/e$;)/\\$$;\x970#*;\x97&/L$;)/C$$;\x970#*;\x97&/3$;)/*$8):\u0185)#$\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xE3 &%3\u0182\"\"5,7\u0183/z#$;\x970#*;\x97&/j$2#\"\"6#7$/[$$;\x970#*;\x97&/K$;)/B$$;\x970#*;\x97&/2$;)/)$8':\u0186'\"\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.v &%3\u0182\"\"5,7\u0183/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;).# &;*/($8%:\u0187%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("2\u0188\"\"6\u01887\u0189.A &2\u018A\"\"6\u018A7\u018B.5 &2\u018C\"\"6\u018C7\u018D.) &2\u018E\"\"6\u018E7\u018F"),
        peg$decode("%3\u0190\"\"5&7\u0191/\xA8#;l.\" &\"/\x9A$$;\x970#*;\x97&/\x8A$2#\"\"6#7$/{$$;\x970#*;\x97&/k$;\x9C/b$$;\x970#*;\x97&/R$;C/I$$;\x970#*;\x97&/9$;).\" &\"/+$8*:\u0192*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u04EC &%3\u0190\"\"5&7\u0191/\xA8#;l.\" &\"/\x9A$$;\x970#*;\x97&/\x8A$2#\"\"6#7$/{$$;\x970#*;\x97&/k$;C/b$$;\x970#*;\x97&/R$;\x9C/I$$;\x970#*;\x97&/9$;).\" &\"/+$8*:\u0193*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0451 &%3\u0190\"\"5&7\u0191/\xA8#;l.\" &\"/\x9A$$;\x970#*;\x97&/\x8A$2#\"\"6#7$/{$$;\x970#*;\x97&/k$;\x9C/b$$;\x970#*;\x97&/R$;)/I$$;\x970#*;\x97&/9$;C.\" &\"/+$8*:\u0194*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u03B6 &%3\u0190\"\"5&7\u0191/\xA8#;l.\" &\"/\x9A$$;\x970#*;\x97&/\x8A$2#\"\"6#7$/{$$;\x970#*;\x97&/k$;)/b$$;\x970#*;\x97&/R$;\x9C/I$$;\x970#*;\x97&/9$;C.\" &\"/+$8*:\u0195*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u031B &%3\u0190\"\"5&7\u0191/\xA8#;l.\" &\"/\x9A$$;\x970#*;\x97&/\x8A$2#\"\"6#7$/{$$;\x970#*;\x97&/k$;)/b$$;\x970#*;\x97&/R$;C/I$$;\x970#*;\x97&/9$;\x9C.\" &\"/+$8*:\u0196*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0280 &%3\u0190\"\"5&7\u0191/\xA8#;l.\" &\"/\x9A$$;\x970#*;\x97&/\x8A$2#\"\"6#7$/{$$;\x970#*;\x97&/k$;C/b$$;\x970#*;\x97&/R$;)/I$$;\x970#*;\x97&/9$;\x9C.\" &\"/+$8*:\u0197*$($\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01E5 &%3\u0190\"\"5&7\u0191/\x7F#;l.\" &\"/q$$;\x970#*;\x97&/a$2#\"\"6#7$/R$$;\x970#*;\x97&/B$;\x9C/9$$;\x970#*;\x97&/)$8':\u0198'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0173 &%3\u0190\"\"5&7\u0191/\x7F#;l.\" &\"/q$$;\x970#*;\x97&/a$2#\"\"6#7$/R$$;\x970#*;\x97&/B$;)/9$$;\x970#*;\x97&/)$8':\u0199'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0101 &%3\u0190\"\"5&7\u0191/\x7F#;l.\" &\"/q$$;\x970#*;\x97&/a$2#\"\"6#7$/R$$;\x970#*;\x97&/B$;C/9$$;\x970#*;\x97&/)$8':\u019A'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\x8F &%3\u0190\"\"5&7\u0191/\x7F#;l.\" &\"/q$$;\x970#*;\x97&/a$2#\"\"6#7$/R$$;\x970#*;\x97&/B$;*/9$$;\x970#*;\x97&/)$8':\u019B'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u019C\"\"507\u019D/f#$;\x970#*;\x97&/V$2#\"\"6#7$/G$$;\x970#*;\x97&/7$;).# &;*/($8%:\u019E%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u019F\"\"5/7\u01A0/\x84#$;\x970#*;\x97&/t$2#\"\"6#7$/e$$;\x970#*;\x97&/U$2\u01A1\"\"6\u01A17\u01A2.; &2\u01A3\"\"6\u01A37\u01A4./ &2\u01A5\"\"6\u01A57\u01A6.# &;*/($8%:\u01A7%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u01A8\"\"5%7\u01A9/r#$;\x970#*;\x97&/b$2#\"\"6#7$/S$$;\x970#*;\x97&/C$;A./ &2\xEB\"\"6\xEB7\xEC.# &;*/($8%:\u01AA%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u01AB\"\"5&7\u01AC/r#$;\x970#*;\x97&/b$2#\"\"6#7$/S$$;\x970#*;\x97&/C$;A./ &2\xEB\"\"6\xEB7\xEC.# &;*/($8%:\u01AD%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%3\u01AE\"\"5*7\u01AF/x#$;\x970#*;\x97&/h$2#\"\"6#7$/Y$$;\x970#*;\x97&/I$2\u01A1\"\"6\u01A17\u01A2./ &2\u01A3\"\"6\u01A37\u01A4.# &;*/($8%:\u01B0%! )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("4\u01B1\"\"5!7\u01B2"),
        peg$decode("4\u01B3\"\"5!7\u01B4"),
        peg$decode("%2\u01B5\"\"6\u01B57\u01B6/\xA8#%%;s/i#;s.\" &\"/[$;s.\" &\"/M$;s.\" &\"/?$;s.\" &\"/1$;s.\" &\"/#$+&)(&'#(%'#($'#(#'#(\"'#&'#/\"!&,)/H$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/($8#:\u01BB#!!)(#'#(\"'#&'#"),
        peg$decode(";u.G &%2\u01B5\"\"6\u01B57\u01B6/7#4\u01BC\"\"5!7\u01BD/($8\":\u01BE\"! )(\"'#&'#"),
        peg$decode("4\u01BF\"\"5!7\u01C0.) &;t.# &;v"),
        peg$decode("4\u01C1\"\"5!7\u01C2.) &;t.# &;v"),
        peg$decode("%2\u01C3\"\"6\u01C37\u01C4/\xA7#$4\u01C5\"\"5!7\u01C6.G &%2\u01B5\"\"6\u01B57\u01B6/1#;\x83/($8\":\u01C7\"! )(\"'#&'#.# &;v0S*4\u01C5\"\"5!7\u01C6.G &%2\u01B5\"\"6\u01B57\u01B6/1#;\x83/($8\":\u01C7\"! )(\"'#&'#.# &;v&/7$2\u01C3\"\"6\u01C37\u01C4/($8#:\u01C8#!!)(#'#(\"'#&'#"),
        peg$decode("%2\u01C9\"\"6\u01C97\u01CA/\xA7#$4\u01CB\"\"5!7\u01CC.G &%2\u01B5\"\"6\u01B57\u01B6/1#;\x83/($8\":\u01C7\"! )(\"'#&'#.# &;v0S*4\u01CB\"\"5!7\u01CC.G &%2\u01B5\"\"6\u01B57\u01B6/1#;\x83/($8\":\u01C7\"! )(\"'#&'#.# &;v&/7$2\u01C9\"\"6\u01C97\u01CA/($8#:\u01C8#!!)(#'#(\"'#&'#"),
        peg$decode("%2\u01CD\"\"6\u01CD7\u01CE/\u011C#$4\u01CF\"\"5!7\u01D00)*4\u01CF\"\"5!7\u01D0&/\u0100$$2\u01D1\"\"6\u01D17\u01D2/,#0)*2\u01D1\"\"6\u01D17\u01D2&&&#/\xDE$$%4\u01D3\"\"5!7\u01D4/a#$4\u01CF\"\"5!7\u01D00)*4\u01CF\"\"5!7\u01D0&/E$$2\u01D1\"\"6\u01D17\u01D2/,#0)*2\u01D1\"\"6\u01D17\u01D2&&&#/#$+#)(#'#(\"'#&'#0q*%4\u01D3\"\"5!7\u01D4/a#$4\u01CF\"\"5!7\u01D00)*4\u01CF\"\"5!7\u01D0&/E$$2\u01D1\"\"6\u01D17\u01D2/,#0)*2\u01D1\"\"6\u01D17\u01D2&&&#/#$+#)(#'#(\"'#&'#&/2$2(\"\"6(7)/#$+%)(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%%2\u01D5\"\"6\u01D57\u01D6.\" &\"/\"!&,)/C#;w/:$$;x0#*;x&/*$8#:\u01D7##\"! )(#'#(\"'#&'#"),
        peg$decode("%$;x/&#0#*;x&&&#/' 8!:\u01D8!! )"),
        peg$decode("%4\u01D9\"\"5!7\u01DA.\" &\"/\xF1#%$45\"\"5!760)*45\"\"5!76&/T#2F\"\"6F7G/E$$45\"\"5!76/,#0)*45\"\"5!76&&&#/#$+#)(#'#(\"'#&'#.< &$45\"\"5!76/,#0)*45\"\"5!76&&&#/{$%2\u01DB\"\"6\u01DB7\u01DC/Y#4\u01D9\"\"5!7\u01DA.\" &\"/E$$45\"\"5!76/,#0)*45\"\"5!76&&&#/#$+#)(#'#(\"'#&'#.\" &\"/'$8#:\u01DD# )(#'#(\"'#&'#"),
        peg$decode(";y.# &;z"),
        peg$decode("%$4\u01DE\"\"5!7\u01DF.) &;t.# &;v05*4\u01DE\"\"5!7\u01DF.) &;t.# &;v&/' 8!:\u01D8!! )"),
        peg$decode("$4\u01B9\"\"5!7\u01BA/,#0)*4\u01B9\"\"5!7\u01BA&&&#"),
        peg$decode(";\x81.\" &\""),
        peg$decode("2\u01E0\"\"6\u01E07\u01E1.A &2\u01B7\"\"6\u01B77\u01B8.5 &2\u01E2\"\"6\u01E27\u01E3.) &2\u01E4\"\"6\u01E47\u01E5"),
        peg$decode("3\u01E6\"\"5!7\u01E7.\xB6 &%2\u01B5\"\"6\u01B57\u01B6/\xA6#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x92$2\u01E8\"\"6\u01E87\u01E9.\" &\"/~$2\u01E8\"\"6\u01E87\u01E9.\" &\"/j$2\u01E8\"\"6\u01E87\u01E9.\" &\"/V$4\u01EA\"\"5!7\u01EB/G$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/'$8':\u01EC' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01ED\"\"5!7\u01EE.\xB6 &%2\u01B5\"\"6\u01B57\u01B6/\xA6#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x92$2\u01E8\"\"6\u01E87\u01E9.\" &\"/~$2\u01E8\"\"6\u01E87\u01E9.\" &\"/j$2\u01E8\"\"6\u01E87\u01E9.\" &\"/V$4\u01EF\"\"5!7\u01F0/G$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/'$8':\u01F1' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01F2\"\"5!7\u01F3.\xB6 &%2\u01B5\"\"6\u01B57\u01B6/\xA6#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x92$2\u01E8\"\"6\u01E87\u01E9.\" &\"/~$2\u01E8\"\"6\u01E87\u01E9.\" &\"/j$2\u01E8\"\"6\u01E87\u01E9.\" &\"/V$4\u01F4\"\"5!7\u01F5/G$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/'$8':\u01F6' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01DB\"\"5!7\u01F7.\xB6 &%2\u01B5\"\"6\u01B57\u01B6/\xA6#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x92$2\u01E8\"\"6\u01E87\u01E9.\" &\"/~$2\u01E8\"\"6\u01E87\u01E9.\" &\"/j$2\u01E8\"\"6\u01E87\u01E9.\" &\"/V$4\u01F8\"\"5!7\u01F9/G$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/'$8':\u01FA' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("3\u01FB\"\"5!7\u01FC.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u01FD\"\"5!7\u01FE/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u01FF\"\"5\"7\u0200/& 8!:\u0201! )"),
        peg$decode("3\u0202\"\"5!7\u0203.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u0204\"\"5!7\u0205/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0206\"\"5\"7\u0207/& 8!:\u0208! )"),
        peg$decode("3\u0209\"\"5!7\u020A.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u020B\"\"5!7\u020C/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u020D\"\"5\"7\u020E/& 8!:\u020F! )"),
        peg$decode("3\u0210\"\"5!7\u0211.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u0212\"\"5!7\u0213/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0214\"\"5\"7\u0215/& 8!:\u0216! )"),
        peg$decode("3\u0217\"\"5!7\u0218.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u0219\"\"5!7\u021A/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u021B\"\"5\"7\u021C/& 8!:\u021D! )"),
        peg$decode("3\u021E\"\"5!7\u021F.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u0220\"\"5!7\u0221/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0222\"\"5\"7\u0223/& 8!:\u0224! )"),
        peg$decode("3\u0225\"\"5!7\u0226.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u0227\"\"5!7\u0228/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0229\"\"5\"7\u022A/& 8!:\u022B! )"),
        peg$decode("3\u022C\"\"5!7\u022D.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u022E\"\"5!7\u022F/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0230\"\"5\"7\u0231/& 8!:\u0232! )"),
        peg$decode("3\u0233\"\"5!7\u0234.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u0235\"\"5!7\u0236/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0237\"\"5\"7\u0238/& 8!:\u0239! )"),
        peg$decode("3\u023A\"\"5!7\u023B.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u023C\"\"5!7\u023D/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u023E\"\"5\"7\u023F/& 8!:\u0240! )"),
        peg$decode("3\u0241\"\"5!7\u0242.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u0243\"\"5!7\u0244/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0245\"\"5\"7\u0246/& 8!:\u0247! )"),
        peg$decode("3\u0248\"\"5!7\u0249.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u024A\"\"5!7\u024B/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u024C\"\"5\"7\u024D/& 8!:\u024E! )"),
        peg$decode("3\u024F\"\"5!7\u0250.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u0251\"\"5!7\u0252/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0253\"\"5\"7\u0254/& 8!:\u0255! )"),
        peg$decode("3\u0256\"\"5!7\u0257.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u0258\"\"5!7\u0259/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u025A\"\"5\"7\u025B/& 8!:\u025C! )"),
        peg$decode("3\u025D\"\"5!7\u025E.\xC9 &%2\u01B5\"\"6\u01B57\u01B6/\xA2#2\u01E8\"\"6\u01E87\u01E9.\" &\"/\x8E$2\u01E8\"\"6\u01E87\u01E9.\" &\"/z$2\u01E8\"\"6\u01E87\u01E9.\" &\"/f$2\u01E8\"\"6\u01E87\u01E9.\" &\"/R$4\u025F\"\"5!7\u0260/C$2\u01B7\"\"6\u01B77\u01B8.) &4\u01B9\"\"5!7\u01BA.\" &\"/#$+')(''#(&'#(%'#($'#(#'#(\"'#&'#.4 &%3\u0261\"\"5\"7\u0262/& 8!:\u0263! )"),
        peg$decode("<%$;{0#*;{&/,#;\x81/#$+\")(\"'#&'#=.\" 7\u0264"),
        peg$decode("<%$;{0#*;{&/1#;\x7F/($8\":\u0266\"! )(\"'#&'#=.\" 7\u0265"),
        peg$decode("<%$;{0#*;{&/1#;|/($8\":\u0268\"! )(\"'#&'#=.\" 7\u0267"),
        peg$decode("<%$;{0#*;{&/@#2P\"\"6P7Q/1$;}/($8#:\u026A#! )(#'#(\"'#&'#=.\" 7\u0269"),
        peg$decode("<%$;{0#*;{&/C#;~/:$;\x87/1$;\x95/($8$:\u026C$!\")($'#(#'#(\"'#&'#=.\" 7\u026B"),
        peg$decode("<%$;{0#*;{&/C#;~/:$;\x90/1$;\x95/($8$:1$!\")($'#(#'#(\"'#&'#.\u0191 &%$;{0#*;{&/C#;~/:$;\x85/1$;\x8D/($8$:\u026D$!\")($'#(#'#(\"'#&'#.\u015A &%$;{0#*;{&/C#;~/:$;\x8D/1$;\x8D/($8$:\u026E$!\")($'#(#'#(\"'#&'#.\u0123 &%$;{0#*;{&/C#;~/:$;\x8A/1$;\x8E/($8$:\u026F$!\")($'#(#'#(\"'#&'#.\xEC &%$;{0#*;{&/C#;~/:$;\x90/1$;\x93/($8$:\u0270$!\")($'#(#'#(\"'#&'#.\xB5 &%$;{0#*;{&/C#;~/:$;\x90/1$;\x85/($8$:\u0271$!\")($'#(#'#(\"'#&'#.~ &%$;{0#*;{&/C#;~/:$;\x87/1$;\x8D/($8$:\u0272$!\")($'#(#'#(\"'#&'#.G &%$;{0#*;{&/6#2\u01E8\"\"6\u01E87\u01E9/'$8\":\u0273\" )(\"'#&'#=.\" 7\u026B"),
        peg$decode("<%$;{0#*;{&/L#;~/C$;\x86/:$;\x87/1$;\x88/($8%:\u0275%!#)(%'#($'#(#'#(\"'#&'#.\xA6 &%$;{0#*;{&/L#;~/C$;\x91/:$;\x84/1$;\x86/($8%:\u0276%!#)(%'#($'#(#'#(\"'#&'#.f &%$;{0#*;{&/U#;~/L$;\x88/C$;\x91/:$;\x84/1$;\x86/($8&:\u0277&!$)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0274"),
        peg$decode("<%$;{0#*;{&/C#;~/:$;\x8D/1$;\x92/($8$:\u0279$!\")($'#(#'#(\"'#&'#.K &%$;{0#*;{&/:#;~/1$;\x92/($8#:\u027A#!!)(#'#(\"'#&'#=.\" 7\u0278"),
        peg$decode("<%$;{0#*;{&/C#;~/:$;\x89/1$;\x96/($8$:\u027C$!\")($'#(#'#(\"'#&'#.] &%$;{0#*;{&/L#;~/C$;\x8B/:$;\x89/1$;\x96/($8%:\u027D%!#)(%'#($'#(#'#(\"'#&'#=.\" 7\u027B"),
        peg$decode("<%$;{0#*;{&/@#;~/7$27\"\"6778/($8#:\u027F#!!)(#'#(\"'#&'#=.\" 7\u027E"),
        peg$decode("<%$;{0#*;{&/1#;~/($8\":\u0281\"! )(\"'#&'#=.\" 7\u0280"),
        peg$decode("<%$;{0#*;{&/|#;\x94/s$;\x91/j$;\x8C/a$3\u0283\"\"5!7\u0284/R$;\x82/I$;\x7F/@$;\x82/7$22\"\"6273/($8):\u0285)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\x8D &%$;{0#*;{&/|#;\x94/s$;\x91/j$;\x8C/a$3\u0283\"\"5!7\u0284/R$;\x82/I$;\x80/@$;\x82/7$22\"\"6273/($8):\u0285)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0282"),
        peg$decode("<%$;{0#*;{&/@#;|/7$2\u0283\"\"6\u02837\u0287/($8#:&#!!)(#'#(\"'#&'#=.\" 7\u0286")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }


    const {initial, inherited} = require('./cascade');

    function extractList(list, index) {
      return list.map(function(element) { return element[index]; });
    }

    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index))
        .filter(function(element) { return element !== null; });
    }

    function buildExpression(head, tail) {
      return tail.reduce(function(result, element) {
        return {
          type: 'Expression',
          operator: element[0],
          left: result,
          right: element[1]
        };
      }, head);
    }

    function extend(a, b) {
      for (var prop in b) {
        a[prop] = b[prop];
      }

      return a;
    }

    function combine(a) {
      return a.reduce(function(obj, next) {
        return extend(obj, next);
      }, {});
    }

    function setTopRightBottomLeft(obj, before, after, t, r, b, l) {
      obj[before + 'Top' + (after || '')] = t;
      obj[before + 'Right' + (after || '')] = r;
      obj[before + 'Bottom' + (after || '')] = b;
      obj[before + 'Left' + (after || '')] = l;
      return obj;
    }

    function setTopRightBottomLeftOr(x, obj, before, after, t, r, b, l) {
      if (!x) return setTopRightBottomLeft(obj, before, after, t, r, b, l);

      x = x.toLowerCase();

      if (x === '-top') obj[before + 'Top' + (after || '')] = t;
      if (x === '-right') obj[before + 'Right' + (after || '')] = r;
      if (x === '-bottom') obj[before + 'Bottom' + (after || '')] = b;
      if (x === '-left') obj[before + 'Left' + (after || '')] = l;

      return obj;
    }

    const colorMap = new Map([
      ['maroon', {r: 128, g: 0, b: 0, a: 1}],
      ['red', {r: 255, g: 0, b: 0, a: 1}],
      ['orange', {r: 255, g: 165, b: 0, a: 1}],
      ['yellow', {r: 255, g: 255, b: 0, a: 1}],
      ['olive', {r: 128, g: 128, b: 0, a: 1}],
      ['purple', {r: 128, g: 0, b: 128, a: 1}],
      ['fuchsia', {r: 255, g: 0, b: 255, a: 1}],
      ['white', {r: 255, g: 255, b: 255, a: 1}],
      ['lime', {r: 0, g: 255, b: 0, a: 1}],
      ['green', {r: 0, g: 128, b: 0, a: 1}],
      ['navy', {r: 0, g: 0, b: 128, a: 1}],
      ['blue', {r: 0, g: 0, b: 255, a: 1}],
      ['aqua', {r: 0, g: 255, b: 255, a: 1}],
      ['teal', {r: 0, g: 128, b: 128, a: 1}],
      ['black', {r: 0, g: 0, b: 0, a: 1}],
      ['silver', {r: 192, g: 192, b: 192, a: 1}],
      ['gray', {r: 128, g: 128, b: 128, a: 1}],
      ['transparent', {r: 255, g: 255, b: 255, a: 0}]
    ]);

    let $font = {}, $fontNormals = 0;


  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
